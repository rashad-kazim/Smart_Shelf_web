// App.js
import React, {
  useState,
  useRef,
  useMemo,
  useEffect,
  useCallback,
} from "react";
// Lucide React icons
import {
  Menu,
  X,
  Home,
  Store,
  PlusCircle,
  Settings,
  Users,
  Sun,
  Moon,
  CheckCircle,
  Bluetooth,
  ChevronDown,
  Edit,
  Trash2,
  List,
  Copy,
  RotateCcw,
  ArrowLeft,
} from "lucide-react";

// Helper function for consistent date/time formatting (24-hour)
const formatDateTime = (dateString, translations) => {
  if (!dateString) return translations.notAvailable;
  const date = new Date(dateString);
  if (isNaN(date.getTime())) return translations.notAvailable;
  return date.toLocaleString("en-GB", {
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit",
    second: "2-digit",
    hour12: false,
  });
};

// Custom Dialog Component
const CustomDialog = ({
  title,
  message,
  type,
  onConfirm,
  onCancel,
  onClose,
  colors,
  storeNameForConfirmation,
  translations,
}) => {
  const [localConfirmInput, setLocalConfirmInput] = useState("");
  const [localConfirmInputError, setLocalConfirmInputError] = useState("");

  const handleConfirm = () => {
    if (type === "confirm" && storeNameForConfirmation) {
      if (localConfirmInput.trim() === storeNameForConfirmation) {
        onConfirm(localConfirmInput.trim());
      } else {
        setLocalConfirmInputError(translations.deleteConfirmationMismatch);
      }
    } else {
      onConfirm();
    }
  };

  const handleCancel = () => {
    setLocalConfirmInput("");
    setLocalConfirmInputError("");
    onCancel();
  };

  return (
    <div className="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center z-50">
      <div
        className="bg-white p-6 rounded-lg shadow-xl max-w-sm w-full"
        style={{ backgroundColor: colors.pureWhite, color: colors.darkText }}>
        <h3
          className="text-lg font-semibold mb-4"
          style={{ color: colors.darkText }}>
          {title}
        </h3>
        <p className="mb-6">{message}</p>

        {type === "confirm" && storeNameForConfirmation && (
          <div className="mb-4">
            <label
              htmlFor="confirmInput"
              className="block text-sm font-medium mb-2"
              style={{ color: colors.darkText }}>
              {translations.deleteConfirmationPrompt}
            </label>
            <input
              type="text"
              id="confirmInput"
              value={localConfirmInput}
              onChange={(e) => {
                setLocalConfirmInput(e.target.value);
                setLocalConfirmInputError("");
              }}
              placeholder={translations.deleteConfirmationPlaceholder}
              className={`w-full p-2 rounded-md border ${
                localConfirmInputError ? "border-red-500" : "border-gray-300"
              }`}
              style={{
                backgroundColor: colors.pureWhite,
                color: colors.darkText,
              }}
            />
            {localConfirmInputError && (
              <p className="text-red-500 text-xs italic mt-1">
                {localConfirmInputError}
              </p>
            )}
          </div>
        )}

        <div className="flex justify-end space-x-4">
          {type === "confirm" && (
            <button
              onClick={handleCancel}
              className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 transition-colors duration-200"
              style={{ backgroundColor: colors.prevButtonBg }}>
              No
            </button>
          )}
          <button
            onClick={handleConfirm}
            className={`bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-200
              ${
                type === "confirm" &&
                storeNameForConfirmation &&
                localConfirmInput.trim() !== storeNameForConfirmation
                  ? "opacity-50 cursor-not-allowed"
                  : ""
              }
            `}
            style={{ backgroundColor: colors.logoSecondaryBlue }}
            disabled={
              type === "confirm" &&
              storeNameForConfirmation &&
              localConfirmInput.trim() !== storeNameForConfirmation
            }>
            {type === "confirm" ? "Yes" : "OK"}
          </button>
        </div>
      </div>
    </div>
  );
};

// Step1 Bileşeni
function Step1({
  storeForm,
  setStoreForm,
  citiesOptions,
  setCitiesOptions,
  countryOptions,
  colors,
  translations,
  timeOptions,
  formErrors,
  setFormErrors,
  onNext,
  setShowDialog, // Dialog props added
  setDialogTitle,
  setDialogMessage,
  setDialogType,
  setDialogCallback,
}) {
  // Form alanlarındaki değişiklikleri yönetir
  const handleStoreFormChange = (e) => {
    const { name, value, type, checked } = e.target;
    setStoreForm((prevData) => ({
      ...prevData,
      [name]: type === "checkbox" ? checked : value,
    }));
    if (name === "country") {
      if (value === "Poland") {
        setCitiesOptions([
          { value: "Warsaw", label: "Warsaw" },
          { value: "Krakow", label: "Krakow" },
          { value: "Gdansk", label: "Gdansk" },
        ]);
        setStoreForm((prev) => ({ ...prev, city: "" })); // Şehri temizle
      } else if (value === "Azerbaijan") {
        setCitiesOptions([
          { value: "Baku", label: "Baku" },
          { value: "Ganja", label: "Ganja" },
          { value: "Sumgait", label: "Sumgait" },
        ]);
        setStoreForm((prev) => ({ ...prev, city: "" })); // Şehri temizle
      } else {
        setCitiesOptions([]);
        setStoreForm((prev) => ({ ...prev, city: "" }));
      }
    }
  };

  const handleNextClick = () => {
    let isValid = true;
    const newErrors = {};
    let firstInvalidFieldElement = null;

    const requiredFields = [
      "country",
      "city",
      "storeName",
      "address",
      "ownerName",
      "ownerSurname",
      "installerName",
      "installerSurname",
    ];
    if (!storeForm.allDayOpen) {
      requiredFields.push("openingHour", "closingHour");
    }
    if (storeForm.addBranch) {
      requiredFields.push("branchName");
    }

    for (const field of requiredFields) {
      if (!storeForm[field]) {
        isValid = false;
        newErrors[field] = translations?.requiredFieldWarning;
        if (!firstInvalidFieldElement) {
          firstInvalidFieldElement = document.getElementById(field);
        }
      }
    }
    setFormErrors(newErrors);
    if (isValid) {
      onNext();
    } else {
      if (firstInvalidFieldElement) {
        firstInvalidFieldElement.scrollIntoView({
          behavior: "smooth",
          block: "center",
        });
      }
    }
  };

  return (
    <div
      className="bg-white p-6 rounded-lg shadow-md max-w-2xl mx-auto"
      style={{ backgroundColor: colors?.pureWhite, color: colors?.darkText }}>
      <h2
        className="text-xl font-semibold text-gray-800 mb-6"
        style={{ color: colors?.darkText }}>
        {translations?.step1Title}
      </h2>
      <form>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div>
            <label
              htmlFor="country"
              className="block text-gray-700 text-sm font-bold mb-2"
              style={{ color: colors?.darkText }}>
              {translations?.countryLabel}{" "}
              <span className="text-red-500">*</span>
            </label>
            <div className="relative">
              {" "}
              {/* Added relative for arrow positioning */}
              <select
                id="country"
                name="country"
                value={storeForm.country}
                onChange={handleStoreFormChange}
                className={`shadow appearance-none border rounded-md w-full py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                  formErrors.country ? "border-red-500" : ""
                }`}
                required
                style={{
                  backgroundColor: colors?.pureWhite,
                  color: colors?.darkText,
                  borderColor: colors?.mediumGrayText,
                  cursor: "pointer", // Added pointer cursor
                }}>
                <option value="">{translations?.countryPlaceholder}</option>
                {countryOptions.map((option) => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </select>
              <ChevronDown
                className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                size={18}
              />{" "}
              {/* Arrow icon */}
            </div>
            {formErrors.country && (
              <p className="text-red-500 text-xs italic mt-1">
                {formErrors.country}
              </p>
            )}
          </div>
          <div>
            <label
              htmlFor="city"
              className="block text-gray-700 text-sm font-bold mb-2"
              style={{ color: colors?.darkText }}>
              {translations?.cityLabel} <span className="text-red-500">*</span>
            </label>
            <div className="relative">
              {" "}
              {/* Added relative for arrow positioning */}
              <select
                id="city"
                name="city"
                value={storeForm.city}
                onChange={handleStoreFormChange}
                className={`shadow appearance-none border rounded-md w-full py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                  formErrors.city ? "border-red-500" : ""
                }`}
                disabled={!storeForm.country}
                required
                style={{
                  backgroundColor: colors?.pureWhite,
                  color: colors?.darkText,
                  borderColor: colors?.mediumGrayText,
                  cursor: storeForm.country ? "pointer" : "default", // Conditional cursor
                }}>
                <option value="">{translations?.cityPlaceholder}</option>
                {citiesOptions.map((option) => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </select>
              <ChevronDown
                className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                size={18}
              />{" "}
              {/* Arrow icon */}
            </div>
            {formErrors.city && (
              <p className="text-red-500 text-xs italic mt-1">
                {formErrors.city}
              </p>
            )}
          </div>
        </div>
        <div className="mb-4">
          <label
            htmlFor="storeName"
            className="block text-gray-700 text-sm font-bold mb-2"
            style={{ color: colors?.darkText }}>
            {translations?.storeNameLabel}{" "}
            <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="storeName"
            name="storeName"
            value={storeForm.storeName}
            onChange={handleStoreFormChange}
            className={`shadow appearance-none border rounded-md w-full py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
              formErrors.storeName ? "border-red-500" : ""
            }`}
            required
            style={{
              backgroundColor: colors?.pureWhite,
              color: colors?.darkText,
              borderColor: colors?.mediumGrayText,
            }}
          />
          {formErrors.storeName && (
            <p className="text-red-500 text-xs italic mt-1">
              {formErrors.storeName}
            </p>
          )}
        </div>
        <div className="mb-4 flex items-center">
          <input
            type="checkbox"
            id="addBranch"
            name="addBranch"
            checked={storeForm.addBranch}
            onChange={handleStoreFormChange}
            className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            style={{
              backgroundColor: colors?.pureWhite,
              borderColor: colors?.mediumGrayText,
            }}
          />
          <label
            htmlFor="addBranch"
            className="text-gray-700 text-sm"
            style={{ color: colors?.darkText }}>
            {translations?.addBranchLabel}
          </label>
        </div>
        {storeForm.addBranch && (
          <div className="mb-4">
            <label
              htmlFor="branchName"
              className="block text-gray-700 text-sm font-bold mb-2"
              style={{ color: colors?.darkText }}>
              {translations?.branchNameLabel}{" "}
              <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="branchName"
              name="branchName"
              value={storeForm.branchName}
              onChange={handleStoreFormChange}
              className={`shadow appearance-none border rounded-md w-full py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                formErrors.branchName ? "border-red-500" : ""
              }`}
              required
              style={{
                backgroundColor: colors?.pureWhite,
                color: colors?.darkText,
                borderColor: colors?.mediumGrayText,
              }}
            />
            {formErrors.branchName && (
              <p className="text-red-500 text-xs italic mt-1">
                {formErrors.branchName}
              </p>
            )}
          </div>
        )}
        <div className="mb-4">
          <label
            htmlFor="address"
            className="block text-gray-700 text-sm font-bold mb-2"
            style={{ color: colors?.darkText }}>
            {translations?.storeBranchAddressLabel}{" "}
            <span className="text-red-500">*</span>
          </label>
          <textarea
            id="address"
            name="address"
            rows="3"
            value={storeForm.address}
            onChange={handleStoreFormChange}
            className={`shadow appearance-none border rounded-md w-full py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 resize-y ${
              formErrors.address ? "border-red-500" : ""
            }`}
            required
            style={{
              backgroundColor: colors?.pureWhite,
              color: colors?.darkText,
              borderColor: colors?.mediumGrayText,
            }}></textarea>
          {formErrors.address && (
            <p className="text-red-500 text-xs italic mt-1">
              {formErrors.address}
            </p>
          )}
        </div>

        <div className="mb-4 flex items-center">
          <input
            type="checkbox"
            id="allDayOpen"
            name="allDayOpen"
            checked={storeForm.allDayOpen}
            onChange={handleStoreFormChange}
            className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            style={{
              backgroundColor: colors?.pureWhite,
              borderColor: colors?.mediumGrayText,
            }}
          />
          <label
            htmlFor="allDayOpen"
            className="text-gray-700 text-sm"
            style={{ color: colors?.darkText }}>
            {translations?.allDayOpenLabel}
          </label>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div>
            <label
              htmlFor="openingHour"
              className="block text-gray-700 text-sm font-bold mb-2"
              style={{ color: colors?.darkText }}>
              {translations?.openingHourLabel}{" "}
              {!storeForm.allDayOpen && <span className="text-red-500">*</span>}
            </label>
            <div className="relative">
              {" "}
              {/* Added relative for arrow positioning */}
              <select
                id="openingHour"
                name="openingHour"
                value={storeForm.openingHour}
                onChange={handleStoreFormChange}
                className={`shadow appearance-none border rounded-md w-full py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                  storeForm.allDayOpen ? "bg-gray-200" : ""
                } ${formErrors.openingHour ? "border-red-500" : ""}`}
                disabled={storeForm.allDayOpen}
                required={!storeForm.allDayOpen}
                style={{
                  backgroundColor: storeForm.allDayOpen
                    ? colors?.lightGrayBg
                    : colors?.pureWhite,
                  color: colors?.darkText,
                  borderColor: colors?.mediumGrayText,
                  cursor: storeForm.allDayOpen ? "default" : "pointer",
                }}>
                <option value="">{translations?.selectHour}</option>
                {timeOptions.map((time) => (
                  <option key={time} value={time}>
                    {time}
                  </option>
                ))}
              </select>
              <ChevronDown
                className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                size={18}
              />{" "}
              {/* Arrow icon */}
            </div>
            {formErrors.openingHour && (
              <p className="text-red-500 text-xs italic mt-1">
                {formErrors.openingHour}
              </p>
            )}
          </div>
          <div>
            <label
              htmlFor="closingHour"
              className="block text-gray-700 text-sm font-bold mb-2"
              style={{ color: colors?.darkText }}>
              {translations?.closingHourLabel}{" "}
              {!storeForm.allDayOpen && <span className="text-red-500">*</span>}
            </label>
            <div className="relative">
              {" "}
              {/* Added relative for arrow positioning */}
              <select
                id="closingHour"
                name="closingHour"
                value={storeForm.closingHour}
                onChange={handleStoreFormChange}
                className={`shadow appearance-none border rounded-md w-full py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                  storeForm.allDayOpen ? "bg-gray-200" : ""
                } ${formErrors.closingHour ? "border-red-500" : ""}`}
                disabled={storeForm.allDayOpen}
                required={!storeForm.allDayOpen}
                style={{
                  backgroundColor: storeForm.allDayOpen
                    ? colors?.lightGrayBg
                    : colors?.pureWhite,
                  color: colors?.darkText,
                  borderColor: colors?.mediumGrayText,
                  cursor: storeForm.allDayOpen ? "default" : "pointer",
                }}>
                <option value="">{translations?.selectHour}</option>
                {timeOptions.map((time) => (
                  <option key={time} value={time}>
                    {time}
                  </option>
                ))}
              </select>
              <ChevronDown
                className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                size={18}
              />{" "}
              {/* Arrow icon */}
            </div>
            {formErrors.closingHour && (
              <p className="text-red-500 text-xs italic mt-1">
                {formErrors.closingHour}
              </p>
            )}
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div>
            <label
              htmlFor="ownerName"
              className="block text-gray-700 text-sm font-bold mb-2"
              style={{ color: colors?.darkText }}>
              {translations?.ownerNameLabel}{" "}
              <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="ownerName"
              name="ownerName"
              value={storeForm.ownerName}
              onChange={handleStoreFormChange}
              className={`shadow appearance-none border rounded-md w-full py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                formErrors.ownerName ? "border-red-500" : ""
              }`}
              required
              style={{
                backgroundColor: colors?.pureWhite,
                color: colors?.darkText,
                borderColor: colors?.mediumGrayText,
              }}
            />
            {formErrors.ownerName && (
              <p className="text-red-500 text-xs italic mt-1">
                {formErrors.ownerName}
              </p>
            )}
          </div>
          <div>
            <label
              htmlFor="ownerSurname"
              className="block text-gray-700 text-sm font-bold mb-2"
              style={{ color: colors?.darkText }}>
              {translations?.ownerSurnameLabel}{" "}
              <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="ownerSurname"
              name="ownerSurname"
              value={storeForm.ownerSurname}
              onChange={handleStoreFormChange}
              className={`shadow appearance-none border rounded-md w-full py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                formErrors.ownerSurname ? "border-red-500" : ""
              }`}
              required
              style={{
                backgroundColor: colors?.pureWhite,
                color: colors?.darkText,
                borderColor: colors?.mediumGrayText,
              }}
            />
            {formErrors.ownerSurname && (
              <p className="text-red-500 text-xs italic mt-1">
                {formErrors.ownerSurname}
              </p>
            )}
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label
              htmlFor="installerName"
              className="block text-gray-700 text-sm font-bold mb-2"
              style={{ color: colors?.darkText }}>
              {translations?.installerNameLabel}{" "}
              <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="installerName"
              name="installerName"
              value={storeForm.installerName}
              onChange={handleStoreFormChange}
              className={`shadow appearance-none border rounded-md w-full py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                formErrors.installerName ? "border-red-500" : ""
              }`}
              required
              style={{
                backgroundColor: colors?.pureWhite,
                color: colors?.darkText,
                borderColor: colors?.mediumGrayText,
              }}
            />
            {formErrors.installerName && (
              <p className="text-red-500 text-xs italic mt-1">
                {formErrors.installerName}
              </p>
            )}
          </div>
          <div>
            <label
              htmlFor="installerSurname"
              className="block text-gray-700 text-sm font-bold mb-2"
              style={{ color: colors?.darkText }}>
              {translations?.installerSurnameLabel}{" "}
              <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="installerSurname"
              name="installerSurname"
              value={storeForm.installerSurname}
              onChange={handleStoreFormChange}
              className={`shadow appearance-none border rounded-md w-full py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                formErrors.installerSurname ? "border-red-500" : ""
              }`}
              required
              style={{
                backgroundColor: colors?.pureWhite,
                color: colors?.darkText,
                borderColor: colors?.mediumGrayText,
              }}
            />
            {formErrors.installerSurname && (
              <p className="text-red-500 text-xs italic mt-1">
                {formErrors.installerSurname}
              </p>
            )}
          </div>
        </div>
      </form>
      <div className="flex justify-end p-4 bg-transparent">
        <button
          onClick={handleNextClick}
          className={`bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-6 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors duration-200`}
          style={{ backgroundColor: colors?.nextButtonBg }}>
          {translations?.nextButton}
        </button>
      </div>
    </div>
  );
}

// Step2 Bileşeni
function Step2({
  serverToken,
  serverConnectionStatus,
  colors,
  translations,
  onNext,
  onBack,
  handleGenerateServerToken,
  handleCheckConnection,
  setShowDialog, // Dialog props added
  setDialogTitle,
  setDialogMessage,
  setDialogType,
  setDialogCallback,
}) {
  const handleNextClick = () => {
    // Check if serverToken is present and connection status is successful
    if (
      !serverToken ||
      serverConnectionStatus !== translations?.connectionSuccess
    ) {
      setDialogTitle("Cannot Proceed");
      setDialogMessage(translations?.cannotProceed);
      setDialogType("alert");
      setDialogCallback(() => () => setShowDialog(false));
      setShowDialog(true);
      return;
    }
    onNext();
  };
  return (
    <div
      className="bg-white p-6 rounded-lg shadow-md max-w-2xl mx-auto"
      style={{ backgroundColor: colors?.pureWhite, color: colors?.darkText }}>
      <h2
        className="text-xl font-semibold text-gray-800 mb-6"
        style={{ color: colors?.darkText }}>
        {translations?.step2Title}
      </h2>
      <div className="mb-4">
        <div className="flex items-center space-x-2">
          <button
            onClick={handleGenerateServerToken}
            className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors duration-200">
            {translations?.generateTokenButton}
          </button>
          <div className="relative flex-grow">
            <input
              type="text"
              readOnly
              value={serverToken}
              className="shadow appearance-none border rounded-md w-full py-2 px-3 text-gray-700 bg-gray-100" // Removed pr-10
              style={{
                backgroundColor: colors?.lightGrayBg,
                color: colors?.darkText,
                borderColor: colors?.mediumGrayText,
              }}
            />
            {/* Removed the copy button */}
          </div>
        </div>
      </div>
      <div className="mb-4">
        <button
          onClick={handleCheckConnection}
          className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition-colors duration-200">
          {translations?.checkConnectionButton}
        </button>
        {serverConnectionStatus && (
          <p
            className={`mt-2 ${
              serverConnectionStatus?.includes(translations?.connectionSuccess)
                ? "text-green-600"
                : "text-red-600"
            }`}
            style={{
              color: serverConnectionStatus?.includes(
                translations?.connectionSuccess
              )
                ? colors?.successGreen
                : colors?.errorRed,
            }}>
            {serverConnectionStatus}
          </p>
        )}
      </div>
      <div className="flex justify-between p-4 bg-transparent">
        <button
          onClick={onBack}
          className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-6 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors duration-200"
          style={{ backgroundColor: colors?.prevButtonBg }}>
          {translations?.previousButton}
        </button>
        <button
          onClick={handleNextClick}
          className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-6 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors duration-200"
          style={{ backgroundColor: colors?.nextButtonBg }}>
          {translations?.nextButton}
        </button>
      </div>
    </div>
  );
}

// Step3 Bileşeni
function Step3({
  esp32Token,
  colors,
  translations,
  onNext,
  onBack,
  handleGenerateEsp32Token,
  setShowDialog, // Dialog props added
  setDialogTitle,
  setDialogMessage,
  setDialogType,
  setDialogCallback,
}) {
  return (
    <div
      className="bg-white p-6 rounded-lg shadow-md max-w-2xl mx-auto"
      style={{ backgroundColor: colors?.pureWhite, color: colors?.darkText }}>
      <h2
        className="text-xl font-semibold text-gray-800 mb-6"
        style={{ color: colors?.darkText }}>
        {translations?.step3Title}
      </h2>
      <div className="mb-4">
        <div className="flex items-center space-x-2">
          <button
            onClick={handleGenerateEsp32Token}
            className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-1.5 px-3 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors duration-200 whitespace-nowrap">
            {translations?.generateTokenButton}
          </button>
          <input
            type="text"
            readOnly
            value={esp32Token}
            className="shadow appearance-none border rounded-md w-full py-2 px-3 text-gray-700 bg-gray-100"
            style={{
              backgroundColor: colors?.lightGrayBg,
              color: colors?.darkText,
              borderColor: colors?.mediumGrayText,
            }}
          />
        </div>
      </div>
      <div className="flex justify-between p-4 bg-transparent">
        <button
          onClick={onBack}
          className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-6 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors duration-200"
          style={{ backgroundColor: colors?.prevButtonBg }}>
          {translations?.previousButton}
        </button>
        <button
          onClick={onNext}
          className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-6 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors duration-200"
          style={{ backgroundColor: colors?.nextButtonBg }}>
          {translations?.nextButton}
        </button>
      </div>
    </div>
  );
}

// Step4 Bileşeni
function Step4({
  installedDevices,
  setInstalledDevices,
  currentInstallingDevice,
  setCurrentInstallingDevice,
  bluetoothConnectedDevice,
  setBluetoothConnectedDevice,
  deviceForm,
  setDeviceForm,
  isDeviceFormActive,
  setIsDeviceFormActive,
  fontSizes,
  screenSizes,
  deviceFormErrors,
  setDeviceFormErrors,
  colors,
  translations,
  timeOptions,
  storeForm,
  esp32Token,
  onNext,
  onBack,
  handleBluetoothConnect,
  handleSaveDevice,
  handleRemoveDevice,
  handleEditDevice,
  handleAddNewDevice,
  setShowDialog, // Added for custom dialog
  setDialogTitle,
  setDialogMessage,
  setDialogType,
  setDialogCallback,
}) {
  const newDeviceFormSectionRef = useRef(null);
  const installedDevicesSectionRef = useRef(null);

  // Form alanlarındaki değişiklikları yönetir
  const handleDeviceFormChange = (e) => {
    const { name, value, type, checked } = e.target;
    if (name === "id") {
      const parsedValue = parseInt(value);
      if (isNaN(parsedValue) && value !== "") {
        setDeviceFormErrors((prev) => ({
          ...prev,
          id: translations?.invalidID,
        }));
        return;
      } else {
        setDeviceFormErrors((prev) => ({ ...prev, id: "" }));
      }

      if (
        value !== "" &&
        installedDevices.some(
          (d) =>
            d.id === parsedValue &&
            d.id !== (currentInstallingDevice?.id || null)
        )
      ) {
        setDeviceFormErrors((prev) => ({
          ...prev,
          id: translations?.deviceIdExists,
        }));
      } else {
        setDeviceFormErrors((prev) => ({ ...prev, id: "" }));
      }
    }

    setDeviceForm((prevData) => ({
      ...prevData,
      [name]: type === "checkbox" ? checked : value,
    }));
  };

  const handleSaveClick = () => {
    let isValid = true;
    const newErrors = {};
    if (!bluetoothConnectedDevice && !currentInstallingDevice) {
      // Replaced alert with custom dialog
      setDialogTitle("Device Connection Required");
      setDialogMessage(translations?.bluetoothNoDeviceSelected);
      setDialogType("alert");
      setDialogCallback(() => () => setShowDialog(false));
      setShowDialog(true);
      return;
    }

    const requiredDeviceFields = ["screenSize"];
    if (!deviceForm.allDayWork) {
      requiredDeviceFields.push("awakeTime", "sleepTime");
    }

    // Validate required fields
    for (const field of requiredDeviceFields) {
      if (!deviceForm[field]) {
        isValid = false;
        newErrors[field] = translations?.requiredFieldWarning;
      }
    }

    // Validate ID field specifically
    const parsedId = parseInt(deviceForm.id);
    if (isNaN(parsedId)) {
      isValid = false;
      newErrors.id = translations?.invalidID;
    } else if (
      installedDevices.some(
        (d) =>
          d.id === parsedId && d.id !== (currentInstallingDevice?.id || null)
      )
    ) {
      isValid = false;
      newErrors.id = translations?.deviceIdExists;
    }
    setDeviceFormErrors(newErrors);

    if (!isValid) {
      const firstErrorField = Object.keys(newErrors)[0];
      if (firstErrorField) {
        document
          .getElementById(firstErrorField)
          ?.scrollIntoView({ behavior: "smooth", block: "center" });
      }
      return;
    }

    const newInstalledDevice = { ...deviceForm, id: parsedId };
    setInstalledDevices((prev) => {
      let updatedDevices = [...prev];
      // If we are editing an existing device
      if (currentInstallingDevice) {
        const originalId = currentInstallingDevice.id;
        // Filter out the old version of the device based on its original ID
        updatedDevices = updatedDevices.filter((d) => d.id !== originalId);
      }

      // Add the new/updated device
      updatedDevices.push(newInstalledDevice);
      return updatedDevices;
    });

    setIsDeviceFormActive(false);
    setCurrentInstallingDevice(null);
    setBluetoothConnectedDevice(null);
    setDeviceForm({
      id:
        installedDevices.length > 0
          ? Math.max(...installedDevices.map((d) => d.id)) + 1
          : 1,
      country: storeForm.country,
      city: storeForm.city,
      token: esp32Token,
      allDayWork: storeForm.allDayOpen,
      awakeTime: "", // Removed default
      sleepTime: "", // Removed default
      productNameFontSize: 14, // Set default
      productPriceFontSizeBeforeDiscount: 14, // Set default
      productPriceFontSizeAfterDiscount: 14, // Set default
      productBarcodeFontSize: 14, // Set default
      productBarcodeNumbersFontSize: 14, // Set default
      screenSize: "", // Removed default
    });
    setDeviceFormErrors({});

    if (installedDevicesSectionRef.current) {
      installedDevicesSectionRef.current.scrollIntoView({
        behavior: "smooth",
        block: "start",
      });
    }
  };

  const handleEditDeviceClick = (deviceToEdit) => {
    handleEditDevice(deviceToEdit);
    if (newDeviceFormSectionRef.current) {
      newDeviceFormSectionRef.current.scrollIntoView({
        behavior: "smooth",
        block: "start",
      });
    }
  };

  const handleAddNewDeviceClick = () => {
    handleAddNewDevice();
    if (newDeviceFormSectionRef.current) {
      newDeviceFormSectionRef.current.scrollIntoView({
        behavior: "smooth",
        block: "start",
      });
    }
  };

  return (
    <div
      className="bg-white p-6 rounded-lg shadow-md max-w-2xl mx-auto"
      style={{ backgroundColor: colors?.pureWhite, color: colors?.darkText }}>
      <h2
        className="text-xl font-semibold text-gray-800 mb-6"
        style={{ color: colors?.darkText }}>
        {translations?.step4Title}
      </h2>
      <div
        id="installed-devices-section"
        ref={installedDevicesSectionRef}
        className="mb-6">
        <h3
          className="text-lg font-semibold mb-4"
          style={{ color: colors?.darkText }}>
          {translations?.installedDevicesTitle}
        </h3>
        {installedDevices.length === 0 ? (
          <p
            className="text-gray-600"
            style={{ color: colors?.mediumGrayText }}>
            No devices installed yet.
          </p>
        ) : (
          <ul className="space-y-2">
            {installedDevices.map((device) => (
              <li
                key={device.id}
                className="flex justify-between items-center bg-gray-100 p-3 rounded-md"
                style={{
                  backgroundColor: colors?.lightGrayBg,
                  color: colors?.darkText,
                }}>
                <span>
                  ID: {device.id} - Screen: {device.screenSize} - Token:{" "}
                  {device.token.substring(0, 8)}...
                </span>
                <button
                  onClick={() => handleEditDeviceClick(device)}
                  className="bg-yellow-500 hover:bg-yellow-600 text-white text-sm font-bold py-1 px-3 rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2 transition-colors duration-200">
                  {translations?.editButton}
                </button>
              </li>
            ))}
          </ul>
        )}
      </div>

      {isDeviceFormActive && (
        <div
          id="new-device-form-section"
          ref={newDeviceFormSectionRef}
          className="border-t border-gray-200 pt-6 mt-6 grid grid-cols-1 gap-4 md:grid-cols-2">
          <h3
            className="text-lg font-semibold text-gray-800 mb-4 col-span-full"
            style={{ color: colors?.darkText }}>
            {currentInstallingDevice
              ? `Edit Device ID: ${currentInstallingDevice.id}`
              : `New Device Installation`}
          </h3>
          <div className="col-span-full text-center mb-4">
            <button
              onClick={handleBluetoothConnect}
              className={`bg-blue-600 hover:bg-blue-700 text-white font-bold w-full py-4 rounded-md flex items-center justify-center border-2 border-blue-700 transition-colors duration-200 shadow-lg
              ${
                bluetoothConnectedDevice || currentInstallingDevice
                  ? "opacity-50 cursor-default"
                  : ""
              }`}
              disabled={
                bluetoothConnectedDevice !== null ||
                currentInstallingDevice !== null
              }
              title={translations?.bluetoothConnectButton}>
              <Bluetooth size={28} className="mr-3" />
              <span>{translations?.bluetoothConnectButton}</span>
            </button>
            {bluetoothConnectedDevice && (
              <p
                className="mt-2 text-green-600"
                style={{ color: colors?.successGreen }}>
                Connected to {bluetoothConnectedDevice.name}
              </p>
            )}
            {!bluetoothConnectedDevice && !currentInstallingDevice && (
              <p
                className="mt-2 text-gray-500 text-sm"
                style={{ color: colors?.mediumGrayText }}>
                {translations?.bluetoothNoDeviceSelected}
              </p>
            )}
          </div>

          <div className="col-span-1">
            <label
              htmlFor="id"
              className="block text-gray-700 text-sm font-bold mb-2"
              style={{ color: colors?.darkText }}>
              {translations?.idLabel}
            </label>
            <input
              type="text"
              id="id"
              name="id"
              value={deviceForm.id}
              onChange={handleDeviceFormChange}
              className={`shadow appearance-none border rounded-md w-full py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                deviceFormErrors.id ? "border-red-500" : ""
              }`}
              disabled={!isDeviceFormActive}
              style={{
                backgroundColor: !isDeviceFormActive
                  ? colors?.lightGrayBg
                  : colors?.pureWhite,
                color: colors?.darkText,
                borderColor: colors?.mediumGrayText,
                cursor: !isDeviceFormActive ? "default" : "text",
              }}
            />
            {deviceFormErrors.id && (
              <p className="text-red-500 text-xs italic mt-1">
                {deviceFormErrors.id}
              </p>
            )}
          </div>
          <div className="col-span-1">
            <label
              htmlFor="deviceCountry"
              className="block text-gray-700 text-sm font-bold mb-2"
              style={{ color: colors?.darkText }}>
              {translations?.countryLabel}
            </label>
            <input
              type="text"
              id="deviceCountry"
              name="country"
              value={deviceForm.country}
              readOnly
              className="shadow appearance-none border rounded-md w-full py-2 px-3 text-gray-700 bg-gray-100"
              style={{
                backgroundColor: colors?.lightGrayBg,
                color: colors?.darkText,
                borderColor: colors?.mediumGrayText,
                cursor: "default",
              }}
            />
          </div>
          <div className="col-span-1">
            <label
              htmlFor="deviceCity"
              className="block text-gray-700 text-sm font-bold mb-2"
              style={{ color: colors?.darkText }}>
              {translations?.cityLabel}
            </label>
            <input
              type="text"
              id="deviceCity"
              name="city"
              value={deviceForm.city}
              readOnly
              className="shadow appearance-none border rounded-md w-full py-2 px-3 text-gray-700 bg-gray-100"
              style={{
                backgroundColor: colors?.lightGrayBg,
                color: colors?.darkText,
                borderColor: colors?.mediumGrayText,
                cursor: "default",
              }}
            />
          </div>
          <div className="col-span-1">
            <label
              htmlFor="deviceToken"
              className="block text-gray-700 text-sm font-bold mb-2"
              style={{ color: colors?.darkText }}>
              {translations?.tokenLabel}
            </label>
            <input
              type="text"
              id="deviceToken"
              name="token"
              value={deviceForm.token}
              readOnly
              className="shadow appearance-none border rounded-md w-full py-2 px-3 text-gray-700 bg-gray-100"
              style={{
                backgroundColor: colors?.lightGrayBg,
                color: colors?.darkText,
                borderColor: colors?.mediumGrayText,
              }}
            />
          </div>

          <div className="col-span-full mb-4 flex items-center">
            <input
              type="checkbox"
              id="allDayWork"
              name="allDayWork"
              checked={deviceForm.allDayWork}
              onChange={handleDeviceFormChange}
              disabled={!isDeviceFormActive}
              className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              style={{
                backgroundColor: colors?.pureWhite,
                borderColor: colors?.mediumGrayText,
              }}
            />
            <label
              htmlFor="allDayWork"
              className="text-gray-700 text-sm"
              style={{ color: colors?.darkText }}>
              {translations?.allDayWorkLabel}
            </label>
          </div>

          <div className="col-span-1">
            <label
              htmlFor="awakeTime"
              className="block text-gray-700 text-sm font-bold mb-2"
              style={{ color: colors?.darkText }}>
              {translations?.awakeTimeLabel}{" "}
              {!deviceForm.allDayWork && (
                <span className="text-red-500">*</span>
              )}
            </label>
            <div className="relative">
              {" "}
              {/* Added relative for arrow positioning */}
              <select
                id="awakeTime"
                name="awakeTime"
                value={deviceForm.awakeTime}
                onChange={handleDeviceFormChange}
                disabled={deviceForm.allDayWork || !isDeviceFormActive}
                className={`shadow appearance-none border rounded-md w-full py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                  deviceForm.allDayWork ? "bg-gray-200" : ""
                } ${deviceFormErrors.awakeTime ? "border-red-500" : ""}`}
                required={!deviceForm.allDayWork}
                style={{
                  backgroundColor: deviceForm.allDayWork
                    ? colors?.lightGrayBg
                    : colors?.pureWhite,
                  color: colors?.darkText,
                  borderColor: colors?.mediumGrayText,
                  cursor:
                    deviceForm.allDayWork || !isDeviceFormActive
                      ? "default"
                      : "pointer",
                }}>
                <option value="">Select Time</option>
                {timeOptions.map((time) => (
                  <option key={time} value={time}>
                    {time}
                  </option>
                ))}
              </select>
              <ChevronDown
                className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                size={18}
              />{" "}
              {/* Arrow icon */}
            </div>
            {deviceFormErrors.awakeTime && (
              <p className="text-red-500 text-xs italic mt-1">
                {deviceFormErrors.awakeTime}
              </p>
            )}
          </div>
          <div className="col-span-1">
            <label
              htmlFor="sleepTime"
              className="block text-gray-700 text-sm font-bold mb-2"
              style={{ color: colors?.darkText }}>
              {translations?.sleepTimeLabel}{" "}
              {!deviceForm.allDayWork && (
                <span className="text-red-500">*</span>
              )}
            </label>
            <div className="relative">
              {" "}
              {/* Added relative for arrow positioning */}
              <select
                id="sleepTime"
                name="sleepTime"
                value={deviceForm.sleepTime}
                onChange={handleDeviceFormChange}
                disabled={deviceForm.allDayWork || !isDeviceFormActive}
                className={`shadow appearance-none border rounded-md w-full py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                  deviceForm.allDayWork ? "bg-gray-200" : ""
                } ${deviceFormErrors.sleepTime ? "border-red-500" : ""}`}
                required={!deviceForm.allDayWork}
                style={{
                  backgroundColor: deviceForm.allDayWork
                    ? colors?.lightGrayBg
                    : colors?.pureWhite,
                  color: colors?.darkText,
                  borderColor: colors?.mediumGrayText,
                  cursor:
                    deviceForm.allDayWork || !isDeviceFormActive
                      ? "default"
                      : "pointer",
                }}>
                <option value="">Select Time</option>
                {timeOptions.map((time) => (
                  <option key={time} value={time}>
                    {time}
                  </option>
                ))}
              </select>
              <ChevronDown
                className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                size={18}
              />{" "}
              {/* Arrow icon */}
            </div>
            {deviceFormErrors.sleepTime && (
              <p className="text-red-500 text-xs italic mt-1">
                {deviceFormErrors.sleepTime}
              </p>
            )}
          </div>

          <div className="col-span-1">
            <label
              htmlFor="productNameFontSize"
              className="block text-gray-700 text-sm font-bold mb-2"
              style={{ color: colors?.darkText }}>
              {translations?.productNameFontSizeLabel}
            </label>
            <div className="relative">
              {" "}
              {/* Added relative for arrow positioning */}
              <select
                id="productNameFontSize"
                name="productNameFontSize"
                value={deviceForm.productNameFontSize}
                onChange={handleDeviceFormChange}
                disabled={!isDeviceFormActive}
                className="shadow appearance-none border rounded-md w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                style={{
                  backgroundColor: colors?.pureWhite,
                  color: colors?.darkText,
                  borderColor: colors?.mediumGrayText,
                  cursor: !isDeviceFormActive ? "default" : "pointer",
                }}>
                <option value="">Select Font Size</option>
                {fontSizes.map((size) => (
                  <option key={size} value={size}>
                    {size}px
                  </option>
                ))}
              </select>
              <ChevronDown
                className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                size={18}
              />{" "}
              {/* Arrow icon */}
            </div>
          </div>
          <div className="col-span-1">
            <label
              htmlFor="productPriceFontSizeBeforeDiscount"
              className="block text-gray-700 text-sm font-bold mb-2"
              style={{ color: colors?.darkText }}>
              {translations?.productPriceFontSizeBeforeDiscountLabel}
            </label>
            <div className="relative">
              {" "}
              {/* Added relative for arrow positioning */}
              <select
                id="productPriceFontSizeBeforeDiscount"
                name="productPriceFontSizeBeforeDiscount"
                value={deviceForm.productPriceFontSizeBeforeDiscount}
                onChange={handleDeviceFormChange}
                disabled={!isDeviceFormActive}
                className="shadow appearance-none border rounded-md w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                style={{
                  backgroundColor: colors?.pureWhite,
                  color: colors?.darkText,
                  borderColor: colors?.mediumGrayText,
                }}>
                <option value="">Select Font Size</option>
                {fontSizes.map((size) => (
                  <option key={size} value={size}>
                    {size}px
                  </option>
                ))}
              </select>
              <ChevronDown
                className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                size={18}
              />{" "}
              {/* Arrow icon */}
            </div>
          </div>
          <div className="col-span-1">
            <label
              htmlFor="productPriceFontSizeAfterDiscount"
              className="block text-gray-700 text-sm font-bold mb-2"
              style={{ color: colors?.darkText }}>
              {translations?.productPriceFontSizeAfterDiscountLabel}
            </label>
            <div className="relative">
              {" "}
              {/* Added relative for arrow positioning */}
              <select
                id="productPriceFontSizeAfterDiscount"
                name="productPriceFontSizeAfterDiscount"
                value={deviceForm.productPriceFontSizeAfterDiscount}
                onChange={handleDeviceFormChange}
                disabled={!isDeviceFormActive}
                className="shadow appearance-none border rounded-md w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                style={{
                  backgroundColor: colors?.pureWhite,
                  color: colors?.darkText,
                  borderColor: colors?.mediumGrayText,
                }}>
                <option value="">Select Font Size</option>
                {fontSizes.map((size) => (
                  <option key={size} value={size}>
                    {size}px
                  </option>
                ))}
              </select>
              <ChevronDown
                className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                size={18}
              />{" "}
              {/* Arrow icon */}
            </div>
          </div>
          <div className="col-span-1">
            <label
              htmlFor="productBarcodeFontSize"
              className="block text-gray-700 text-sm font-bold mb-2"
              style={{ color: colors?.darkText }}>
              {translations?.productBarcodeFontSizeLabel}
            </label>
            <div className="relative">
              {" "}
              {/* Added relative for arrow positioning */}
              <select
                id="productBarcodeFontSize"
                name="productBarcodeFontSize"
                value={deviceForm.productBarcodeFontSize}
                onChange={handleDeviceFormChange}
                disabled={!isDeviceFormActive}
                className="shadow appearance-none border rounded-md w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                style={{
                  backgroundColor: colors?.pureWhite,
                  color: colors?.darkText,
                  borderColor: colors?.mediumGrayText,
                }}>
                <option value="">Select Font Size</option>
                {fontSizes.map((size) => (
                  <option key={size} value={size}>
                    {size}px
                  </option>
                ))}
              </select>
              <ChevronDown
                className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                size={18}
              />{" "}
              {/* Arrow icon */}
            </div>
          </div>
          <div className="col-span-1">
            <label
              htmlFor="productBarcodeNumbersFontSize"
              className="block text-gray-700 text-sm font-bold mb-2"
              style={{ color: colors?.darkText }}>
              {translations?.productBarcodeNumbersFontSizeLabel}
            </label>
            <div className="relative">
              {" "}
              {/* Added relative for arrow positioning */}
              <select
                id="productBarcodeNumbersFontSize"
                name="productBarcodeNumbersFontSize"
                value={deviceForm.productBarcodeNumbersFontSize}
                onChange={handleDeviceFormChange}
                disabled={!isDeviceFormActive}
                className="shadow appearance-none border rounded-md w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                style={{
                  backgroundColor: colors?.pureWhite,
                  color: colors?.darkText,
                  borderColor: colors?.mediumGrayText,
                }}>
                <option value="">Select Font Size</option>
                {fontSizes.map((size) => (
                  <option key={size} value={size}>
                    {size}px
                  </option>
                ))}
              </select>
              <ChevronDown
                className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                size={18}
              />{" "}
              {/* Arrow icon */}
            </div>
          </div>
          <div className="col-span-1">
            <label
              htmlFor="screenSize"
              className="block text-gray-700 text-sm font-bold mb-2"
              style={{ color: colors?.darkText }}>
              {translations?.screenSizeLabel}{" "}
              <span className="text-red-500">*</span>
            </label>
            <div className="relative">
              {" "}
              {/* Added relative for arrow positioning */}
              <select
                id="screenSize"
                name="screenSize"
                value={deviceForm.screenSize}
                onChange={handleDeviceFormChange}
                disabled={!isDeviceFormActive}
                className={`shadow appearance-none border rounded-md w-full py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                  deviceFormErrors.screenSize ? "border-red-500" : ""
                }`}
                required
                style={{
                  backgroundColor: colors?.pureWhite,
                  color: colors?.darkText,
                  borderColor: colors?.mediumGrayText,
                  cursor: !isDeviceFormActive ? "default" : "pointer",
                }}>
                <option value="">Select Screen Size</option>
                {screenSizes.map((size) => (
                  <option key={size} value={size}>
                    {size}
                  </option>
                ))}
              </select>
              <ChevronDown
                className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                size={18}
              />{" "}
              {/* Arrow icon */}
            </div>
            {deviceFormErrors.screenSize && (
              <p className="text-red-500 text-xs italic mt-1">
                {deviceFormErrors.screenSize}
              </p>
            )}
          </div>
          <div className="flex justify-between mt-6 col-span-full">
            {!(installedDevices.length === 0 && !currentInstallingDevice) && (
              <button
                onClick={() =>
                  handleRemoveDevice(
                    currentInstallingDevice?.id || deviceForm.id
                  )
                }
                className="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-colors duration-200">
                {translations?.removeDeviceButton}
              </button>
            )}
            <button
              onClick={handleSaveClick}
              className={`bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors duration-200 ${
                installedDevices.length === 0 && !currentInstallingDevice
                  ? "mx-auto"
                  : ""
              }`}
              style={{
                marginLeft:
                  installedDevices.length === 0 && !currentInstallingDevice
                    ? "auto"
                    : "0",
              }}>
              {translations?.saveButton}
            </button>
          </div>
        </div>
      )}

      {!isDeviceFormActive && ( // Show "Add New Device" button only when form is not active
        <div className="mb-6 mt-6">
          <button
            onClick={handleAddNewDeviceClick}
            className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors duration-200 block mx-auto">
            {translations?.addNewDeviceButton}
          </button>
        </div>
      )}

      <div className="flex justify-between p-4 bg-transparent mt-4">
        <button
          onClick={onBack}
          className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-6 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors duration-200"
          style={{ backgroundColor: colors?.prevButtonBg }}>
          {translations?.previousButton}
        </button>
        <button
          onClick={onNext}
          className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-6 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors duration-200"
          style={{ backgroundColor: colors?.nextButtonBg }}>
          {translations?.nextButton}
        </button>
      </div>
    </div>
  );
}

// Step5 Bileşeni
function Step5({
  logs,
  setLogs,
  colors,
  translations,
  onBack,
  handleGetLogs,
  handleCompleteInstallation,
  setShowDialog, // Dialog props added
  setDialogTitle,
  setDialogMessage,
  setDialogType,
  setDialogCallback,
}) {
  const handleCompleteClick = () => {
    handleCompleteInstallation();
  };

  return (
    <div
      className="bg-white p-6 rounded-lg shadow-md max-w-2xl mx-auto"
      style={{ backgroundColor: colors?.pureWhite, color: colors?.darkText }}>
      <h2
        className="text-xl font-semibold text-gray-800 mb-6"
        style={{ color: colors?.darkText }}>
        {translations?.step5Title}
      </h2>
      <div className="mb-4">
        <button
          onClick={handleGetLogs}
          className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors duration-200">
          {translations?.getLogsButton}
        </button>
        {logs.length > 0 && (
          <div
            className="mt-4 p-3 bg-gray-100 rounded-md"
            style={{
              backgroundColor: colors?.lightGrayBg,
              color: colors?.darkText,
            }}>
            <p className="font-semibold mb-2">
              {translations?.logsServerConnection}
            </p>
            <ul className="space-y-1">
              {logs.map((log, index) => (
                <li key={index} className="text-sm">
                  {translations?.logsDeviceStatus
                    ?.replace("{id}", log.id)
                    .replace("{status}", log.status)
                    .replace("{refreshRate}", log.refreshRate)
                    .replace("{batteryStatus}", log.batteryStatus)}
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>
      <div className="flex justify-between p-4 bg-transparent mt-4">
        <button
          onClick={onBack}
          className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-6 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors duration-200"
          style={{ backgroundColor: colors?.prevButtonBg }}>
          {translations?.previousButton}
        </button>
        <button
          onClick={handleCompleteClick}
          className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-6 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors duration-200">
          {translations?.completeInstallationButton}
        </button>
      </div>
    </div>
  );
}

// New Installation Component (Container for multi-step form)
function NewInstallationPage({
  colors,
  translations,
  storeForm,
  setStoreForm,
  citiesOptions,
  setCitiesOptions,
  countryOptions,
  serverToken,
  setServerToken,
  serverConnectionStatus,
  setServerConnectionStatus,
  esp32Token,
  setEsp32Token,
  installedDevices,
  setInstalledDevices,
  currentInstallingDevice,
  setCurrentInstallingDevice,
  bluetoothConnectedDevice,
  setBluetoothConnectedDevice,
  deviceForm,
  setDeviceForm,
  isDeviceFormActive,
  setIsDeviceFormActive,
  fontSizes,
  screenSizes,
  deviceFormErrors,
  setDeviceFormErrors,
  logs,
  setLogs,
  timeOptions,
  formErrors,
  setFormErrors,
  setShowDialog,
  setDialogTitle,
  setDialogMessage,
  setDialogType,
  setDialogCallback,
  handleGenerateServerToken,
  handleCheckConnection,
  handleGenerateEsp32Token,
  handleBluetoothConnect,
  handleSaveDevice,
  handleRemoveDevice,
  handleEditDevice,
  handleAddNewDevice,
  handleGetLogs,
  handleCompleteInstallation,
}) {
  const [currentStep, setCurrentStep] = useState(1);
  const steps = [
    { id: 1, label: "Store Info", component: Step1 },
    { id: 2, label: "Server Token", component: Step2 },
    { id: 3, label: "ESP32 Token", component: Step3 },
    { id: 4, label: "Device Installation", component: Step4 },
    { id: 5, label: "Complete Installation", component: Step5 },
  ];
  const CurrentStepComponent = steps.find(
    (s) => s.id === currentStep
  )?.component;

  const nextStep = () =>
    setCurrentStep((prev) => Math.min(prev + 1, steps.length));
  const prevStep = () => setCurrentStep((prev) => Math.max(prev - 1, 1));

  const StepIcon = ({ stepNumber, current, completed, colors }) => {
    const isCompleted = completed || currentStep > stepNumber;
    const isActive = current || currentStep === stepNumber;

    const circleColor = isCompleted ? colors?.progressBarActive : "transparent";
    const borderColor = isActive
      ? colors?.logoPrimaryBlue
      : colors?.progressBarBorder;
    const textColor = isCompleted
      ? colors?.whiteText
      : isActive
      ? colors?.logoPrimaryBlue
      : colors?.darkText;
    const iconColor = colors?.whiteText;
    return (
      <div
        className={`relative flex flex-col items-center transition-all duration-300 ease-in-out`}>
        <div
          className={`w-8 h-8 rounded-full flex items-center justify-center border-2 transition-all duration-300 ease-in-out`}
          style={{
            backgroundColor: circleColor,
            borderColor: borderColor,
          }}>
          {isCompleted ? (
            <CheckCircle size={18} style={{ color: iconColor }} />
          ) : (
            <span className="font-semibold" style={{ color: textColor }}>
              {/* stepNumber kaldırıldı, sadece ikonlar gösteriliyor */}
            </span>
          )}
        </div>
        {stepNumber < steps.length && (
          <div
            className={`absolute h-0.5 top-1/2 left-full -translate-y-1/2 transition-all duration-300 ease-in-out`}
            style={{
              width: "calc(100% + 1rem)",
              backgroundColor:
                currentStep > stepNumber
                  ? colors?.progressBarActive
                  : colors?.progressBarLine,
              zIndex: -1,
            }}></div>
        )}
      </div>
    );
  };

  return (
    <div className="flex flex-col h-full min-h-0">
      {/* Progress Bar */}
      <div className="flex justify-center items-center my-8 space-x-4">
        {steps.map((stepDef) => (
          <React.Fragment key={stepDef.id}>
            <StepIcon
              stepNumber={stepDef.id}
              current={currentStep === stepDef.id}
              completed={currentStep > stepDef.id}
              colors={colors}
            />
            {stepDef.id < steps.length && (
              <div
                className={`h-0.5 w-8 transition-all duration-300 ease-in-out`}
                style={{
                  backgroundColor:
                    currentStep > stepDef.id
                      ? colors?.progressBarActive
                      : colors?.progressBarLine,
                }}></div>
            )}
          </React.Fragment>
        ))}
      </div>

      {/* Dinamik olarak seçilen adım bileşenini render et */}
      <div className="flex-1 p-4 overflow-y-auto">
        {CurrentStepComponent && (
          <CurrentStepComponent
            storeForm={storeForm}
            setStoreForm={setStoreForm}
            citiesOptions={citiesOptions}
            setCitiesOptions={setCitiesOptions}
            countryOptions={countryOptions}
            serverToken={serverToken}
            setServerToken={setServerToken}
            serverConnectionStatus={serverConnectionStatus}
            setServerConnectionStatus={setServerConnectionStatus}
            esp32Token={esp32Token}
            setEsp32Token={setEsp32Token}
            installedDevices={installedDevices}
            setInstalledDevices={setInstalledDevices}
            currentInstallingDevice={currentInstallingDevice}
            setCurrentInstallingDevice={setCurrentInstallingDevice}
            bluetoothConnectedDevice={bluetoothConnectedDevice}
            setBluetoothConnectedDevice={setBluetoothConnectedDevice}
            deviceForm={deviceForm}
            setDeviceForm={setDeviceForm}
            isDeviceFormActive={isDeviceFormActive}
            setIsDeviceFormActive={setIsDeviceFormActive}
            fontSizes={fontSizes}
            screenSizes={screenSizes}
            deviceFormErrors={deviceFormErrors}
            setDeviceFormErrors={setDeviceFormErrors}
            logs={logs}
            setLogs={setLogs}
            colors={colors}
            translations={translations} // Sadece stores çevirilerini gönderiyoruz
            timeOptions={timeOptions}
            formErrors={formErrors}
            setFormErrors={setFormErrors}
            setShowDialog={setShowDialog}
            setDialogTitle={setDialogTitle}
            setDialogMessage={setDialogMessage}
            setDialogType={setDialogType}
            setDialogCallback={setDialogCallback}
            onNext={nextStep}
            onBack={prevStep}
            handleGenerateServerToken={handleGenerateServerToken}
            handleCheckConnection={handleCheckConnection}
            handleGenerateEsp32Token={handleGenerateEsp32Token}
            handleBluetoothConnect={handleBluetoothConnect}
            handleSaveDevice={handleSaveDevice}
            handleRemoveDevice={handleRemoveDevice}
            handleEditDevice={handleEditDevice}
            handleAddNewDevice={handleAddNewDevice}
            handleGetLogs={handleGetLogs}
            handleCompleteInstallation={handleCompleteInstallation}
          />
        )}
      </div>
    </div>
  );
}

// Stores Page Component
function StoresPage({
  colors,
  translations = {},
  setShowDialog,
  setDialogTitle,
  setDialogMessage,
  setDialogType,
  setDialogCallback,
  setActiveRoute,
}) {
  const safeTranslations = {
    title: translations.title || "",
    createStoreTitle: translations.createStoreTitle || "",
    createStoreDesc: translations.createStoreDesc || "",
    editStoreTitle: translations.editStoreTitle || "",
    editStoreDesc: translations.editStoreDesc || "",
    deleteStoreTitle: translations.deleteStoreTitle || "",
    deleteStoreDesc: translations.deleteStoreDesc || "",
    viewLogsTitle: translations.viewLogsTitle || "",
    viewLogsDesc: translations.viewLogsDesc || "",
  };
  const cardData = [
    {
      title: safeTranslations.createStoreTitle,
      description: safeTranslations.createStoreDesc,
      icon: PlusCircle,
      action: () => {
        setActiveRoute("/new-installation");
      },
    },
    {
      title: safeTranslations.editStoreTitle,
      description: safeTranslations.editStoreDesc,
      icon: Edit,
      action: () => {
        setActiveRoute("/edit-store-details");
      },
    },
    {
      title: safeTranslations.deleteStoreTitle,
      description: safeTranslations.deleteStoreDesc,
      icon: Trash2,
      action: () => {
        setActiveRoute("/delete-store");
      },
    },
    {
      title: safeTranslations.viewLogsTitle,
      description: safeTranslations.viewLogsDesc,
      icon: List,
      action: () => {
        setActiveRoute("/view-logs");
      },
    },
  ];

  return (
    <>
      <h1
        className="text-3xl font-semibold mb-6"
        style={{ color: colors.darkText }}>
        {safeTranslations.title}
      </h1>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {cardData.map((card, index) => (
          <div
            key={index}
            className="p-6 rounded-lg shadow-md flex flex-col items-center text-center transition-transform transform hover:scale-105 cursor-pointer"
            style={{
              backgroundColor: colors.pureWhite,
              color: colors.darkText,
            }}
            onClick={card.action}>
            <card.icon size={48} style={{ color: colors.logoPrimaryBlue }} />
            <h2
              className="text-xl font-semibold mb-2"
              style={{ color: colors.darkText }}>
              {card.title}
            </h2>
            <p className="text-sm" style={{ color: colors.mediumGrayText }}>
              {card.description}
            </p>
          </div>
        ))}
      </div>
    </>
  );
}

// Delete Store Page Component
function DeleteStorePage({
  colors,
  translations,
  setShowDialog,
  setDialogTitle,
  setDialogMessage,
  setDialogType,
  setDialogCallback,
  stores,
  setStores,
}) {
  const [selectedCountries, setSelectedCountries] = useState([]);
  const [selectedCities, setSelectedCities] = useState([]);

  const [countryInput, setCountryInput] = useState("");
  const [cityInput, setCityInput] = useState("");

  const [showCountrySuggestions, setShowCountrySuggestions] = useState(false);
  const [showCitySuggestions, setShowCitySuggestions] = useState(false);

  const countryInputRef = useRef(null);
  const cityInputRef = useRef(null);
  const handleCountryInputChange = (e) => {
    setCountryInput(e.target.value);
  };
  const handleCityInputChange = (e) => {
    setCityInput(e.target.value);
  };
  const addCountryFilter = (country) => {
    if (country && !selectedCountries.includes(country)) {
      setSelectedCountries([...selectedCountries, country]);
      setCountryInput("");
      setShowCountrySuggestions(false);
    }
  };
  const addCityFilter = (city) => {
    if (city && !selectedCities.includes(city)) {
      setSelectedCities([...selectedCities, city]);
      setCityInput("");
      setShowCitySuggestions(false);
    }
  };

  const removeCountryFilter = (countryToRemove) => {
    setSelectedCountries(
      selectedCountries.filter((country) => country !== countryToRemove)
    );
  };
  const removeCityFilter = (cityToRemove) => {
    setSelectedCities(selectedCities.filter((city) => city !== cityToRemove));
  };
  const handleCountryInputKeyPress = (e) => {
    if (e.key === "Enter") {
      addCountryFilter(countryInput.trim());
    }
  };
  const handleCityInputKeyPress = (e) => {
    if (e.key === "Enter") {
      addCityFilter(cityInput.trim());
    }
  };

  const handleResetFilters = () => {
    setSelectedCountries([]);
    setSelectedCities([]);
    setCountryInput("");
    setCityInput("");
  };
  const handleDeleteStore = (storeToDelete) => {
    setDialogTitle(translations.confirmDeleteTitle);

    // Düzeltilmiş satır
    setDialogMessage(
      `${translations.confirmDeleteMessage} '${storeToDelete.name}'?`
    );

    setDialogType("confirm");
    setDialogCallback(() => (confirmedName) => {
      if (confirmedName === storeToDelete.name) {
        setStores((prevStores) =>
          prevStores.filter((store) => store.id !== storeToDelete.id)
        );
        setShowDialog(false);
        setDialogTitle("Success");
        setDialogMessage(
          `Store '${storeToDelete.name}' ${translations.deleteSuccess}`
        );
        setDialogType("alert");
        setDialogCallback(() => () => setShowDialog(false));
        setShowDialog(true);
      } else {
        setShowDialog(false);
        setDialogTitle("Error");
        setDialogMessage(translations.deleteConfirmationMismatch);
        setDialogType("alert");
        setDialogCallback(() => () => setShowDialog(false));
        setShowDialog(true);
      }
    });
    setShowDialog(true);
  };

  const uniqueCountries = useMemo(() => {
    const countries = [...new Set(stores.map((store) => store.country))];
    return countries.sort();
  }, [stores]);
  const uniqueCities = useMemo(() => {
    let cities = [];
    if (selectedCountries.length > 0) {
      cities = stores
        .filter((store) => selectedCountries.includes(store.country))
        .map((store) => store.city);
    } else {
      cities = stores.map((store) => store.city);
    }
    return [...new Set(cities)].sort();
  }, [stores, selectedCountries]);
  const filteredStores = stores.filter((store) => {
    const countryMatch =
      selectedCountries.length === 0 ||
      selectedCountries.includes(store.country);
    const cityMatch =
      selectedCities.length === 0 || selectedCities.includes(store.city);

    return countryMatch && cityMatch;
  });
  return (
    <div
      className="p-8 rounded-lg shadow-md"
      style={{
        backgroundColor: colors.pureWhite,
        color: colors.darkText,
      }}>
      <h1
        className="text-3xl font-semibold mb-6"
        style={{ color: colors.darkText }}>
        {translations.deleteStoreTitle}
      </h1>

      <div className="flex flex-wrap items-start gap-4 mb-4">
        <div className="flex-1 min-w-[150px]">
          <label
            htmlFor="filter-country"
            className="block text-sm font-medium mb-1"
            style={{ color: colors.darkText }}>
            {translations.country}
          </label>
          <div className="relative">
            <input
              type="text"
              id="filter-country"
              name="country"
              value={countryInput}
              onChange={handleCountryInputChange}
              onFocus={() => setShowCountrySuggestions(true)}
              onBlur={() =>
                setTimeout(() => setShowCountrySuggestions(false), 100)
              }
              onKeyPress={handleCountryInputKeyPress}
              placeholder={translations.countryPlaceholder}
              className="w-full p-2 pr-10 rounded-md border cursor-pointer"
              style={{
                borderColor: colors.mediumGrayText,
                backgroundColor: colors.lightGrayBg,
                color: colors.darkText,
                outlineColor: colors.logoPrimaryBlue,
              }}
              ref={countryInputRef}
            />
            {showCountrySuggestions && (
              <ul
                className="absolute z-10 w-full rounded-md shadow-lg py-1 mt-1 max-h-40 overflow-y-auto"
                style={{
                  backgroundColor: colors.pureWhite,
                  border: `1px solid ${colors.mediumGrayText}`,
                }}>
                {uniqueCountries
                  .filter((c) =>
                    c.toLowerCase().includes(countryInput.toLowerCase())
                  )
                  .map((country) => (
                    <li
                      key={country}
                      className="px-3 py-2 cursor-pointer hover:bg-gray-100"
                      style={{ color: colors.darkText }}
                      onMouseDown={() => {
                        addCountryFilter(country);
                        countryInputRef.current.focus();
                      }}>
                      {country}
                    </li>
                  ))}
                {uniqueCountries.filter((c) =>
                  c.toLowerCase().includes(countryInput.toLowerCase())
                ).length === 0 &&
                  countryInput && (
                    <li
                      className="px-3 py-2 text-sm"
                      style={{ color: colors.mediumGrayText }}>
                      {translations.noSuggestions}
                    </li>
                  )}
              </ul>
            )}
            <ChevronDown
              className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
              size={18}
            />
          </div>
        </div>
        <div className="flex-1 min-w-[150px]">
          <label
            htmlFor="filter-city"
            className="block text-sm font-medium mb-1"
            style={{ color: colors.darkText }}>
            {translations.city}
          </label>
          <div className="relative">
            <input
              type="text"
              id="filter-city"
              name="city"
              value={cityInput}
              onChange={handleCityInputChange}
              onFocus={() => setShowCitySuggestions(true)}
              onBlur={() =>
                setTimeout(() => setShowCitySuggestions(false), 100)
              }
              onKeyPress={handleCityInputKeyPress}
              placeholder={translations.cityPlaceholder}
              className="w-full p-2 pr-10 rounded-md border cursor-pointer"
              style={{
                borderColor: colors.mediumGrayText,
                backgroundColor: colors.lightGrayBg,
                color: colors.darkText,
                outlineColor: colors.logoPrimaryBlue,
              }}
              ref={cityInputRef}
            />
            {showCitySuggestions && (
              <ul
                className="absolute z-10 w-full rounded-md shadow-lg py-1 mt-1 max-h-40 overflow-y-auto"
                style={{
                  backgroundColor: colors.pureWhite,
                  border: `1px solid ${colors.mediumGrayText}`,
                }}>
                {uniqueCities
                  .filter((c) =>
                    c.toLowerCase().includes(cityInput.toLowerCase())
                  )
                  .map((city) => (
                    <li
                      key={city}
                      className="px-3 py-2 cursor-pointer hover:bg-gray-100"
                      style={{ color: colors.darkText }}
                      onMouseDown={() => {
                        addCityFilter(city);
                        cityInputRef.current.focus();
                      }}>
                      {city}
                    </li>
                  ))}
                {uniqueCities.filter((c) =>
                  c.toLowerCase().includes(cityInput.toLowerCase())
                ).length === 0 &&
                  cityInput && (
                    <li
                      className="px-3 py-2 text-sm"
                      style={{ color: colors.mediumGrayText }}>
                      {translations.noSuggestions}
                    </li>
                  )}
              </ul>
            )}
            <ChevronDown
              className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
              size={18}
            />
          </div>
        </div>
      </div>

      <div className="w-full text-right mb-4">
        <button
          onClick={handleResetFilters}
          className="px-4 py-2 rounded-md font-medium flex items-center justify-center transition-colors duration-200 cursor-pointer inline-flex"
          style={{
            backgroundColor: colors.logoPrimaryBlue,
            color: colors.whiteText,
          }}>
          <RotateCcw size={18} className="mr-2" />
          {translations.resetFilters}
        </button>
      </div>

      {(selectedCountries.length > 0 || selectedCities.length > 0) && (
        <div className="flex flex-nowrap gap-2 mb-4 overflow-x-auto pb-2">
          {selectedCountries.map((country) => (
            <span
              key={`country-${country}`}
              className="flex-shrink-0 flex items-center bg-blue-100 text-blue-800 text-sm font-medium px-2.5 py-0.5 rounded-full"
              style={{
                backgroundColor: colors.logoPrimaryBlue + "20",
                color: colors.logoPrimaryBlue,
              }}>
              {country}
              <button
                onClick={() => removeCountryFilter(country)}
                className="ml-1 text-blue-800 hover:text-blue-900 rounded-full p-0.5 transition-colors cursor-pointer"
                style={{ color: colors.logoPrimaryBlue }}>
                <X size={14} />
              </button>
            </span>
          ))}
          {selectedCities.map((city) => (
            <span
              key={`city-${city}`}
              className="flex-shrink-0 flex items-center bg-green-100 text-green-800 text-sm font-medium px-2.5 py-0.5 rounded-full"
              style={{
                backgroundColor: colors.successGreen + "20",
                color: colors.successGreen,
              }}>
              {city}
              <button
                onClick={() => removeCityFilter(city)}
                className="ml-1 text-green-800 hover:text-green-900 rounded-full p-0.5 transition-colors cursor-pointer"
                style={{ color: colors.successGreen }}>
                <X size={14} />
              </button>
            </span>
          ))}
        </div>
      )}

      <div
        className="overflow-x-auto rounded-lg border"
        style={{ borderColor: colors.mediumGrayText }}>
        <table
          className="min-w-full divide-y divide-gray-200"
          style={{ borderColor: colors.mediumGrayText }}>
          <thead style={{ backgroundColor: colors.lightGrayBg }}>
            <tr>
              <th
                className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                style={{ color: colors.mediumGrayText }}>
                {translations.nameHeader}
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                style={{ color: colors.mediumGrayText }}>
                {translations.countryHeader}
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                style={{ color: colors.mediumGrayText }}>
                {translations.cityHeader}
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                style={{ color: colors.mediumGrayText }}>
                {translations.branchHeader}
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                style={{ color: colors.mediumGrayText }}></th>
            </tr>
          </thead>
          <tbody
            style={{
              backgroundColor: colors.pureWhite,
              color: colors.darkText,
            }}>
            {filteredStores.length > 0 ? (
              filteredStores.map((store) => (
                <tr
                  key={store.id}
                  className="border-t hover:bg-gray-50 transition-colors duration-150"
                  style={{ borderColor: colors.lightGrayBg }}>
                  <td className="px-6 py-4 text-sm font-medium break-words">
                    {store.name}
                  </td>
                  <td className="px-6 py-4 text-sm whitespace-nowrap">
                    {store.country}
                  </td>
                  <td className="px-6 py-4 text-sm whitespace-nowrap">
                    {store.city}
                  </td>
                  <td className="px-6 py-4 text-sm break-words">
                    {store.branch || "-"}
                  </td>
                  <td className="px-6 py-4 text-sm text-right whitespace-nowrap">
                    <button
                      onClick={() => handleDeleteStore(store)}
                      className="bg-red-500 hover:bg-red-600 text-white font-bold py-1.5 px-3 rounded-md transition-colors duration-200 cursor-pointer">
                      {translations.deleteButton}
                    </button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td
                  colSpan={5}
                  className="px-6 py-4 whitespace-nowrap text-sm text-center"
                  style={{ color: colors.mediumGrayText }}>
                  {translations.noStoresFound}
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}

// Edit Store Details Page
function EditStoreDetailsPage({
  colors,
  translations,
  setShowDialog,
  setDialogTitle,
  setDialogMessage,
  setDialogType,
  setDialogCallback,
  setSelectedStoreForEdit,
  setActiveRoute,
  stores,
  setStores,
  installedDevices,
  setInstalledDevices,
}) {
  const [filters, setFilters] = useState({
    opening_hour: "",
    closing_hour: "",
    is_all_day_open: false,
  });
  const [selectedCountries, setSelectedCountries] = useState([]);
  const [selectedCities, setSelectedCities] = useState([]);

  const [countryInput, setCountryInput] = useState("");
  const [cityInput, setCityInput] = useState("");
  const [showCountrySuggestions, setShowCountrySuggestions] = useState(false);
  const [showCitySuggestions, setShowCitySuggestions] = useState(false);

  const countryInputRef = useRef(null);
  const cityInputRef = useRef(null);
  const hoursOptions = useMemo(() => {
    const hours = [];
    for (let i = 0; i < 24; i++) {
      for (let m = 0; m < 60; m += 30) {
        const hour = i.toString().padStart(2, "0");
        const minute = m.toString().padStart(2, "0");
        // Düzeltilmiş satır
        hours.push(`${hour}:${minute}`);
      }
    }
    return hours;
  }, []);
  const [selectedStore, setSelectedStoreLocal] = useState(null);
  const [showStoreDetailsModal, setShowStoreDetailsModal] = useState(false);

  const selectedStoreLocal = selectedStore;

  const handleCopyToClipboard = (text) => {
    const textarea = document.createElement("textarea");
    textarea.value = text;
    document.body.appendChild(textarea);
    textarea.select();
    try {
      document.execCommand("copy");
      setDialogTitle("Copied!");
      setDialogMessage(`"${text}" ${translations.copiedMessage}`);
      setDialogType("alert");
      setDialogCallback(() => () => setShowDialog(false));
      setShowDialog(true);
    } catch (err) {
      console.error("Could not copy to clipboard:", err);
      setDialogTitle("Copy Failed");
      setDialogMessage("Copy failed. Please copy manually.");
      setDialogType("alert");
      setDialogCallback(() => () => setShowDialog(false));
      setShowDialog(true);
    }
    document.body.removeChild(textarea);
  };
  const handleFilterChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFilters((prevFilters) => ({
      ...prevFilters,
      [name]: type === "checkbox" ? checked : value,
    }));
  };

  const handleCountryInputChange = (e) => {
    setCountryInput(e.target.value);
  };
  const handleCityInputChange = (e) => {
    setCityInput(e.target.value);
  };
  const addCountryFilter = (country) => {
    if (country && !selectedCountries.includes(country)) {
      setSelectedCountries([...selectedCountries, country]);
      setCountryInput("");
      setShowCountrySuggestions(false);
    }
  };
  const addCityFilter = (city) => {
    if (city && !selectedCities.includes(city)) {
      setSelectedCities([...selectedCities, city]);
      setCityInput("");
      setShowCitySuggestions(false);
    }
  };

  const removeCountryFilter = (countryToRemove) => {
    setSelectedCountries(
      selectedCountries.filter((country) => country !== countryToRemove)
    );
  };
  const removeCityFilter = (cityToRemove) => {
    setSelectedCities(selectedCities.filter((city) => city !== cityToRemove));
  };
  const handleCountryInputKeyPress = (e) => {
    if (e.key === "Enter") {
      addCountryFilter(countryInput.trim());
    }
  };
  const handleCityInputKeyPress = (e) => {
    if (e.key === "Enter") {
      addCityFilter(cityInput.trim());
    }
  };

  const handleResetFilters = () => {
    setFilters({
      opening_hour: "",
      closing_hour: "",
      is_all_day_open: false,
    });
    setSelectedCountries([]);
    setSelectedCities([]);
    setCountryInput("");
    setCityInput("");
  };

  const handleStoreRowClick = (store) => {
    setSelectedStoreForEdit(store);
    setActiveRoute("/edit-store-workflow");
  };
  const closeStoreDetailsModal = () => {
    setShowStoreDetailsModal(false);
    setSelectedStoreLocal(null);
  };
  const uniqueCountries = useMemo(() => {
    const countries = [...new Set(stores.map((store) => store.country))];
    return countries.sort();
  }, [stores]);
  const uniqueCities = useMemo(() => {
    let cities = [];
    if (selectedCountries.length > 0) {
      cities = stores
        .filter((store) => selectedCountries.includes(store.country))
        .map((store) => store.city);
    } else {
      cities = stores.map((store) => store.city);
    }
    return [...new Set(cities)].sort();
  }, [stores, selectedCountries]);
  const filteredStores = stores.filter((store) => {
    const countryMatch =
      selectedCountries.length === 0 ||
      selectedCountries.includes(store.country);
    const cityMatch =
      selectedCities.length === 0 || selectedCities.includes(store.city);

    let hoursMatch = true;
    if (filters.is_all_day_open) {
      hoursMatch = store.working_hours === "24/7";
    } else {
      const [storeOpen, storeClose] = store.working_hours
        .split("-")
        .map((s) => s.trim());
      if (filters.opening_hour && storeOpen) {
        hoursMatch = hoursMatch && storeOpen === filters.opening_hour;
      }
      if (filters.closing_hour && storeClose) {
        hoursMatch = hoursMatch && storeClose === filters.closing_hour;
      }
    }

    return countryMatch && cityMatch && hoursMatch;
  });
  return (
    <div
      className="p-8 rounded-lg shadow-md"
      style={{
        backgroundColor: colors.pureWhite,
        color: colors.darkText,
      }}>
      <h1
        className="text-3xl font-semibold mb-6"
        style={{ color: colors.darkText }}>
        {translations.editStoreInfoTitle}
      </h1>

      <div className="flex flex-wrap items-start gap-4 mb-4">
        <div className="flex-1 min-w-[150px]">
          <label
            htmlFor="filter-country"
            className="block text-sm font-medium mb-1"
            style={{ color: colors.darkText }}>
            {translations.country}
          </label>
          <div className="relative">
            <input
              type="text"
              id="filter-country"
              name="country"
              value={countryInput}
              onChange={handleCountryInputChange}
              onFocus={() => setShowCountrySuggestions(true)}
              onBlur={() =>
                setTimeout(() => setShowCountrySuggestions(false), 100)
              }
              onKeyPress={handleCountryInputKeyPress}
              placeholder={translations.countryPlaceholder}
              className="w-full p-2 pr-10 rounded-md border cursor-pointer"
              style={{
                borderColor: colors.mediumGrayText,
                backgroundColor: colors.lightGrayBg,
                color: colors.darkText,
                outlineColor: colors.logoPrimaryBlue,
              }}
              ref={countryInputRef}
            />
            {showCountrySuggestions && (
              <ul
                className="absolute z-10 w-full rounded-md shadow-lg py-1 mt-1 max-h-40 overflow-y-auto"
                style={{
                  backgroundColor: colors.pureWhite,
                  border: `1px solid ${colors.mediumGrayText}`,
                }}>
                {uniqueCountries
                  .filter((c) =>
                    c.toLowerCase().includes(countryInput.toLowerCase())
                  )
                  .map((country) => (
                    <li
                      key={country}
                      className="px-3 py-2 cursor-pointer hover:bg-gray-100"
                      style={{ color: colors.darkText }}
                      onMouseDown={() => {
                        addCountryFilter(country);
                        countryInputRef.current.focus();
                      }}>
                      {country}
                    </li>
                  ))}
                {uniqueCountries.filter((c) =>
                  c.toLowerCase().includes(countryInput.toLowerCase())
                ).length === 0 &&
                  countryInput && (
                    <li
                      className="px-3 py-2 text-sm"
                      style={{ color: colors.mediumGrayText }}>
                      {translations.noSuggestions}
                    </li>
                  )}
              </ul>
            )}
            <ChevronDown
              className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
              size={18}
            />
          </div>
        </div>
        <div className="flex-1 min-w-[150px]">
          <label
            htmlFor="filter-city"
            className="block text-sm font-medium mb-1"
            style={{ color: colors.darkText }}>
            {translations.city}
          </label>
          <div className="relative">
            <input
              type="text"
              id="filter-city"
              name="city"
              value={cityInput}
              onChange={handleCityInputChange}
              onFocus={() => setShowCitySuggestions(true)}
              onBlur={() =>
                setTimeout(() => setShowCitySuggestions(false), 100)
              }
              onKeyPress={handleCityInputKeyPress}
              placeholder={translations.cityPlaceholder}
              className="w-full p-2 pr-10 rounded-md border cursor-pointer"
              style={{
                borderColor: colors.mediumGrayText,
                backgroundColor: colors.lightGrayBg,
                color: colors.darkText,
                outlineColor: colors.logoPrimaryBlue,
              }}
              ref={cityInputRef}
            />
            {showCitySuggestions && (
              <ul
                className="absolute z-10 w-full rounded-md shadow-lg py-1 mt-1 max-h-40 overflow-y-auto"
                style={{
                  backgroundColor: colors.pureWhite,
                  border: `1px solid ${colors.mediumGrayText}`,
                }}>
                {uniqueCities
                  .filter((c) =>
                    c.toLowerCase().includes(cityInput.toLowerCase())
                  )
                  .map((city) => (
                    <li
                      key={city}
                      className="px-3 py-2 cursor-pointer hover:bg-gray-100"
                      style={{ color: colors.darkText }}
                      onMouseDown={() => {
                        addCityFilter(city);
                        cityInputRef.current.focus();
                      }}>
                      {city}
                    </li>
                  ))}
                {uniqueCities.filter((c) =>
                  c.toLowerCase().includes(cityInput.toLowerCase())
                ).length === 0 &&
                  cityInput && (
                    <li
                      className="px-3 py-2 text-sm"
                      style={{ color: colors.mediumGrayText }}>
                      {translations.noSuggestions}
                    </li>
                  )}
              </ul>
            )}
            <ChevronDown
              className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
              size={18}
            />
          </div>
        </div>
        <div className="flex-1 min-w-[150px]">
          <label
            htmlFor="filter-opening-hour"
            className="block text-sm font-medium mb-1"
            style={{ color: colors.darkText }}>
            {translations.openingHour}
          </label>
          <select
            id="filter-opening-hour"
            name="opening_hour"
            value={filters.opening_hour}
            onChange={handleFilterChange}
            className="w-full p-2 rounded-md border cursor-pointer"
            style={{
              borderColor: colors.mediumGrayText,
              backgroundColor: colors.lightGrayBg,
              color: colors.darkText,
              outlineColor: colors.logoPrimaryBlue,
            }}
            disabled={filters.is_all_day_open}>
            <option value="">{translations.selectHour}</option>
            {hoursOptions.map((hour) => (
              <option key={hour} value={hour}>
                {hour}
              </option>
            ))}
          </select>
        </div>
        <div className="flex-1 min-w-[150px]">
          <label
            htmlFor="filter-closing-hour"
            className="block text-sm font-medium mb-1"
            style={{ color: colors.darkText }}>
            {translations.closingHour}
          </label>
          <select
            id="filter-closing-hour"
            name="closing_hour"
            value={filters.closing_hour}
            onChange={handleFilterChange}
            className="w-full p-2 rounded-md border cursor-pointer"
            style={{
              borderColor: colors.mediumGrayText,
              backgroundColor: colors.lightGrayBg,
              color: colors.darkText,
              outlineColor: colors.logoPrimaryBlue,
            }}
            disabled={filters.is_all_day_open}>
            <option value="">{translations.selectHour}</option>
            {hoursOptions.map((hour) => (
              <option key={hour} value={hour}>
                {hour}
              </option>
            ))}
          </select>
        </div>
        <div className="flex items-center self-end min-w-[150px] h-full pb-1">
          <input
            type="checkbox"
            id="filter-all-day-open"
            name="is_all_day_open"
            checked={filters.is_all_day_open}
            onChange={handleFilterChange}
            className="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500 cursor-pointer"
            style={{ borderColor: colors.mediumGrayText }}
          />
          <label
            htmlFor="filter-all-day-open"
            className="ml-2 block text-sm font-medium cursor-pointer"
            style={{ color: colors.darkText }}>
            {translations.allDayOpen}
          </label>
        </div>
      </div>

      <div className="w-full text-right mb-4">
        <button
          onClick={handleResetFilters}
          className="px-4 py-2 rounded-md font-medium flex items-center justify-center transition-colors duration-200 cursor-pointer inline-flex"
          style={{
            backgroundColor: colors.logoPrimaryBlue,
            color: colors.whiteText,
          }}>
          <RotateCcw size={18} className="mr-2" />
          {translations.resetFilters}
        </button>
      </div>

      {(selectedCountries.length > 0 || selectedCities.length > 0) && (
        <div className="flex flex-nowrap gap-2 mb-4 overflow-x-auto pb-2">
          {selectedCountries.map((country) => (
            <span
              key={`country-${country}`}
              className="flex-shrink-0 flex items-center bg-blue-100 text-blue-800 text-sm font-medium px-2.5 py-0.5 rounded-full"
              style={{
                backgroundColor: colors.logoPrimaryBlue + "20",
                color: colors.logoPrimaryBlue,
              }}>
              {country}
              <button
                onClick={() => removeCountryFilter(country)}
                className="ml-1 text-blue-800 hover:text-blue-900 rounded-full p-0.5 transition-colors cursor-pointer"
                style={{ color: colors.logoPrimaryBlue }}>
                <X size={14} />
              </button>
            </span>
          ))}
          {selectedCities.map((city) => (
            <span
              key={`city-${city}`}
              className="flex-shrink-0 flex items-center bg-green-100 text-green-800 text-sm font-medium px-2.5 py-0.5 rounded-full"
              style={{
                backgroundColor: colors.successGreen + "20",
                color: colors.successGreen,
              }}>
              {city}
              <button
                onClick={() => removeCityFilter(city)}
                className="ml-1 text-green-800 hover:text-green-900 rounded-full p-0.5 transition-colors cursor-pointer"
                style={{ color: colors.successGreen }}>
                <X size={14} />
              </button>
            </span>
          ))}
        </div>
      )}

      <div
        className="overflow-x-auto rounded-lg border"
        style={{ borderColor: colors.mediumGrayText }}>
        <table
          className="min-w-full divide-y divide-gray-200"
          style={{ borderColor: colors.mediumGrayText }}>
          <thead style={{ backgroundColor: colors.lightGrayBg }}>
            <tr>
              <th
                className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                style={{ color: colors.mediumGrayText }}>
                {translations.nameHeader}
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                style={{ color: colors.mediumGrayText }}>
                {translations.countryHeader}
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                style={{ color: colors.mediumGrayText }}>
                {translations.cityHeader}
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                style={{ color: colors.mediumGrayText }}>
                {translations.branchHeader}
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                style={{ color: colors.mediumGrayText }}>
                {translations.workingHoursHeader}
              </th>
            </tr>
          </thead>
          <tbody
            style={{
              backgroundColor: colors.pureWhite,
              color: colors.darkText,
            }}>
            {filteredStores.length > 0 ? (
              filteredStores.map((store) => (
                <tr
                  key={store.id}
                  className="border-t cursor-pointer hover:bg-gray-50 transition-colors duration-150"
                  style={{ borderColor: colors.lightGrayBg }}
                  onClick={() => handleStoreRowClick(store)}>
                  <td className="px-6 py-4 text-sm font-medium break-words">
                    {store.name}
                  </td>
                  <td className="px-6 py-4 text-sm whitespace-nowrap">
                    {store.country}
                  </td>
                  <td className="px-6 py-4 text-sm whitespace-nowrap">
                    {store.city}
                  </td>
                  <td className="px-6 py-4 text-sm break-words">
                    {store.branch || "-"}
                  </td>
                  <td className="px-6 py-4 text-sm whitespace-nowrap">
                    {store.working_hours}
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td
                  colSpan={5}
                  className="px-6 py-4 whitespace-nowrap text-sm text-center"
                  style={{ color: colors.mediumGrayText }}>
                  {translations.noStoresFound}
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
      {showStoreDetailsModal && selectedStoreLocal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div
            className="bg-white rounded-lg shadow-xl p-6 w-full max-w-lg mx-auto"
            style={{
              backgroundColor: colors.pureWhite,
              color: colors.darkText,
            }}>
            <div className="flex justify-between items-center mb-4">
              <h3
                className="text-xl font-semibold"
                style={{ color: colors.darkText }}>
                {translations.storeDetailsTitle}: {selectedStoreLocal.name}
              </h3>
              <button
                onClick={closeStoreDetailsModal}
                className="text-gray-500 hover:text-gray-700 p-1 rounded-full hover:bg-gray-100 transition-colors cursor-pointer">
                <X size={24} />
              </button>
            </div>
            <div className="space-y-2 text-sm">
              <p>
                <strong>ID:</strong> {selectedStoreLocal.id}
              </p>
              <p>
                <strong>{translations.countryHeader}:</strong>{" "}
                {selectedStoreLocal.country}
              </p>
              <p>
                <strong>{translations.cityHeader}:</strong>{" "}
                {selectedStoreLocal.city}
              </p>
              <p>
                <strong>{translations.branchHeader}:</strong>{" "}
                {selectedStoreLocal.branch || "-"}
              </p>
              <p>
                <strong>{translations.addressHeader}:</strong>{" "}
                {selectedStoreLocal.address || "-"}
              </p>
              <p>
                <strong>{translations.statusHeader}:</strong>{" "}
                {selectedStoreLocal.status}
              </p>
              <p>
                <strong>{translations.tokenHeader}:</strong>
                <span className="font-mono break-all ml-1">
                  {selectedStoreLocal.server_token}
                </span>
                <button
                  onClick={() =>
                    handleCopyToClipboard(selectedStoreLocal.server_token)
                  }
                  className="ml-2 p-1 rounded-full text-gray-500 hover:bg-gray-200 cursor-pointer"
                  title="Copy token">
                  <Copy size={16} />
                </button>
              </p>
              <p>
                <strong>{translations.workingHoursHeader}:</strong>{" "}
                {selectedStoreLocal.working_hours}
              </p>
              <p>
                <strong>{translations.createdAtHeader}:</strong>{" "}
                {new Date(selectedStoreLocal.created_at).toLocaleString()}
              </p>
            </div>
            <div className="mt-6 text-right">
              <button
                onClick={closeStoreDetailsModal}
                className="px-4 py-2 rounded-md font-medium transition-colors duration-200 cursor-pointer"
                style={{
                  backgroundColor: colors.logoPrimaryBlue,
                  color: colors.whiteText,
                }}>
                {translations.dialogClose}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

// Store Editing Workflow Page
function StoreEditingWorkflow({
  selectedStore,
  colors,
  translations,
  setShowDialog,
  setDialogTitle,
  setDialogMessage,
  setDialogType,
  setDialogCallback,
  installedDevices,
  setInstalledDevices,
  fontSizes,
  screenSizes,
  timeOptions,
  setActiveRoute,
  setStores,
}) {
  const [currentEditStep, setCurrentEditStep] = useState(1);
  const [editableStoreForm, setEditableStoreForm] = useState(selectedStore);

  const countryOptions = [
    { value: "Poland", label: "Poland" },
    { value: "Azerbaijan", label: "Azerbaijan" },
    { value: "USA", label: "USA" },
    { value: "Turkey", label: "Turkey" },
    { value: "Germany", label: "Germany" },
  ];
  const [formErrors, setFormErrors] = useState({});

  const [citiesOptions, setCitiesOptions] = useState(() => {
    if (selectedStore?.country === "Poland") {
      return [
        { value: "Warsaw", label: "Warsaw" },
        { value: "Krakow", label: "Krakow" },
        { value: "Gdansk", label: "Gdansk" },
      ];
    } else if (selectedStore?.country === "Azerbaijan") {
      return [
        { value: "Baku", label: "Baku" },
        { value: "Ganja", label: "Ganja" },
        { value: "Sumgait", label: "Sumgait" },
      ];
    } else if (selectedStore?.country === "USA") {
      return [
        { value: "New York", label: "New York" },
        { value: "Los Angeles", label: "Los Angeles" },
      ];
    } else if (selectedStore?.country === "Turkey") {
      return [
        { value: "Istanbul", label: "Istanbul" },
        { value: "Ankara", label: "Ankara" },
      ];
    } else if (selectedStore?.country === "Germany") {
      return [{ value: "Berlin", label: "Berlin" }];
    }
    return [];
  });
  const [currentStoreDevices, setCurrentStoreDevices] = useState(() =>
    installedDevices.filter((device) => device.storeId === selectedStore.id)
  );
  const [currentInstallingDevice, setCurrentInstallingDevice] = useState(null);
  const [bluetoothConnectedDevice, setBluetoothConnectedDevice] =
    useState(null);

  const generateEsp32Token = () =>
    "ESP-" + Math.random().toString(36).substring(2, 8).toUpperCase();
  const [deviceForm, setDeviceForm] = useState({
    id:
      currentStoreDevices.length > 0
        ? Math.max(...currentStoreDevices.map((d) => d.id)) + 1
        : 1,
    storeId: selectedStore.id,
    country: selectedStore.country,
    city: selectedStore.city,
    token: generateEsp32Token(),
    allDayWork: selectedStore.allDayOpen,
    awakeTime: selectedStore.openingHour,
    sleepTime: selectedStore.closingHour,
    productNameFontSize: 14,
    productPriceFontSizeBeforeDiscount: 14,
    productPriceFontSizeAfterDiscount: 14,
    productBarcodeFontSize: 14,
    productBarcodeNumbersFontSize: 14,
    screenSize: "",
  });
  const [isDeviceFormActive, setIsDeviceFormActive] = useState(false);
  const [deviceFormErrors, setDeviceFormErrors] = useState({});

  const newDeviceFormSectionRef = useRef(null);
  const installedDevicesSectionRef = useRef(null);
  useEffect(() => {
    if (!isDeviceFormActive) {
      setDeviceForm({
        id:
          currentStoreDevices.length > 0
            ? Math.max(...currentStoreDevices.map((d) => d.id)) + 1
            : 1,
        storeId: selectedStore.id,
        country: selectedStore.country,
        city: selectedStore.city,
        token: generateEsp32Token(),
        allDayWork: editableStoreForm.allDayOpen,
        awakeTime: editableStoreForm.openingHour,
        sleepTime: editableStoreForm.closingHour,
        productNameFontSize: 14,
        productPriceFontSizeBeforeDiscount: 14,
        productPriceFontSizeAfterDiscount: 14,
        productBarcodeFontSize: 14,
        productBarcodeNumbersFontSize: 14,
        screenSize: "",
      });
      setCurrentInstallingDevice(null);
      setBluetoothConnectedDevice(null);
      setDeviceFormErrors({});
    }
  }, [
    isDeviceFormActive,
    currentStoreDevices,
    selectedStore.id,
    selectedStore.country,
    selectedStore.city,
    editableStoreForm.allDayOpen,
    editableStoreForm.openingHour,
    editableStoreForm.closingHour,
  ]);
  const handleStoreFormChange = (e) => {
    const { name, value, type, checked } = e.target;
    setEditableStoreForm((prevData) => ({
      ...prevData,
      [name]: type === "checkbox" ? checked : value,
    }));
    if (name === "country") {
      if (value === "Poland") {
        setCitiesOptions([
          { value: "Warsaw", label: "Warsaw" },
          { value: "Krakow", label: "Krakow" },
          { value: "Gdansk", label: "Gdansk" },
        ]);
        setEditableStoreForm((prev) => ({ ...prev, city: "" }));
      } else if (value === "Azerbaijan") {
        setCitiesOptions([
          { value: "Baku", label: "Baku" },
          { value: "Ganja", label: "Ganja" },
          { value: "Sumgait", label: "Sumgait" },
        ]);
        setEditableStoreForm((prev) => ({ ...prev, city: "" }));
      } else if (value === "USA") {
        setCitiesOptions([
          { value: "New York", label: "New York" },
          { value: "Los Angeles", label: "Los Angeles" },
        ]);
        setEditableStoreForm((prev) => ({ ...prev, city: "" }));
      } else if (value === "Turkey") {
        setCitiesOptions([
          { value: "Istanbul", label: "Istanbul" },
          { value: "Ankara", label: "Ankara" },
        ]);
        setEditableStoreForm((prev) => ({ ...prev, city: "" }));
      } else if (value === "Germany") {
        setCitiesOptions([{ value: "Berlin", label: "Berlin" }]);
        setEditableStoreForm((prev) => ({ ...prev, city: "" }));
      } else {
        setCitiesOptions([]);
        setEditableStoreForm((prev) => ({ ...prev, city: "" }));
      }
    }
  };
  const handleStoreInfoNext = () => {
    let isValid = true;
    const newErrors = {};
    let firstInvalidFieldElement = null;

    const requiredFields = [
      "country",
      "city",
      "name",
      "address",
      "ownerName",
      "ownerSurname",
      "installerName",
      "installerSurname",
    ];
    if (!editableStoreForm.allDayOpen) {
      requiredFields.push("openingHour", "closingHour");
    }
    if (editableStoreForm.addBranch) {
      requiredFields.push("branch");
    }

    for (const field of requiredFields) {
      if (!editableStoreForm[field]) {
        isValid = false;
        newErrors[field] = translations?.requiredFieldWarning;
        if (!firstInvalidFieldElement) {
          firstInvalidFieldElement = document.getElementById(field);
        }
      }
    }
    setFormErrors(newErrors);
    if (isValid) {
      setCurrentEditStep(2);
    } else {
      if (firstInvalidFieldElement) {
        firstInvalidFieldElement.scrollIntoView({
          behavior: "smooth",
          block: "center",
        });
      }
    }
  };

  const handleDeviceFormChange = (e) => {
    const { name, value, type, checked } = e.target;
    if (name === "id") {
      const parsedValue = parseInt(value);
      if (isNaN(parsedValue) && value !== "") {
        setDeviceFormErrors((prev) => ({
          ...prev,
          id: translations?.invalidID,
        }));
        return;
      } else {
        setDeviceFormErrors((prev) => ({ ...prev, id: "" }));
      }

      if (
        value !== "" &&
        currentStoreDevices.some(
          (d) =>
            d.id === parsedValue &&
            d.id !== (currentInstallingDevice?.id || null)
        )
      ) {
        setDeviceFormErrors((prev) => ({
          ...prev,
          id: translations?.deviceIdExists,
        }));
      } else {
        setDeviceFormErrors((prev) => ({ ...prev, id: "" }));
      }
    }

    setDeviceForm((prevData) => ({
      ...prevData,
      [name]: type === "checkbox" ? checked : value,
    }));
  };

  const handleBluetoothConnect = async () => {
    if (currentInstallingDevice) {
      setDialogTitle("Installation in Progress");
      setDialogMessage(translations.currentInstallationWarning);
      setDialogType("alert");
      setDialogCallback(() => () => setShowDialog(false));
      setShowDialog(true);
      return;
    }

    try {
      setBluetoothConnectedDevice({ name: "ESP32_Device_123" });
      setIsDeviceFormActive(true);
      setDeviceForm((prev) => ({
        ...prev,
        id:
          currentStoreDevices.length > 0
            ? Math.max(...currentStoreDevices.map((d) => d.id)) + 1
            : 1,
        storeId: selectedStore.id,
        country: selectedStore.country,
        city: selectedStore.city,
        token: generateEsp32Token(),
        allDayWork: editableStoreForm.allDayOpen,
        awakeTime: editableStoreForm.openingHour,
        sleepTime: editableStoreForm.closingHour,
      }));
      setCurrentInstallingDevice(null);
      setDeviceFormErrors({});
    } catch (error) {
      console.error("Bluetooth connection error:", error);
      setDialogTitle("Bluetooth Connection Error");
      setDialogMessage("Bluetooth connection error: " + error.message);
      setDialogType("alert");
      setDialogCallback(() => () => setShowDialog(false));
      setShowDialog(true);
    }
  };
  const handleSaveDevice = () => {
    let isValid = true;
    const newErrors = {};
    if (!bluetoothConnectedDevice && !currentInstallingDevice) {
      setDialogTitle("Device Connection Required");
      setDialogMessage(translations.bluetoothNoDeviceSelected);
      setDialogType("alert");
      setDialogCallback(() => () => setShowDialog(false));
      setShowDialog(true);
      return;
    }

    const requiredDeviceFields = ["screenSize"];
    if (!deviceForm.allDayWork) {
      requiredDeviceFields.push("awakeTime", "sleepTime");
    }

    for (const field of requiredDeviceFields) {
      if (!deviceForm[field]) {
        isValid = false;
        newErrors[field] = translations.requiredFieldWarning;
      }
    }

    const parsedId = parseInt(deviceForm.id);
    if (isNaN(parsedId)) {
      isValid = false;
      newErrors.id = translations.invalidID;
    } else if (
      currentStoreDevices.some(
        (d) =>
          d.id === parsedId && d.id !== (currentInstallingDevice?.id || null)
      )
    ) {
      isValid = false;
      newErrors.id = translations.deviceIdExists;
    }
    setDeviceFormErrors(newErrors);

    if (!isValid) {
      const firstErrorField = Object.keys(newErrors)[0];
      if (firstErrorField) {
        document
          .getElementById(firstErrorField)
          ?.scrollIntoView({ behavior: "smooth", block: "center" });
      }
      return;
    }

    const newInstalledDevice = {
      ...deviceForm,
      id: parsedId,
      storeId: selectedStore.id,
    };
    setCurrentStoreDevices((prev) => {
      let updatedDevices = [...prev];
      if (currentInstallingDevice) {
        updatedDevices = updatedDevices.filter(
          (d) => d.id !== currentInstallingDevice.id
        );
      }
      updatedDevices.push(newInstalledDevice);
      return updatedDevices;
    });
    setIsDeviceFormActive(false);
    setCurrentInstallingDevice(null);
    setBluetoothConnectedDevice(null);
    setDeviceForm({
      id:
        currentStoreDevices.length > 0
          ? Math.max(...currentStoreDevices.map((d) => d.id)) + 1
          : 1,
      storeId: selectedStore.id,
      country: selectedStore.country,
      city: selectedStore.city,
      token: generateEsp32Token(),
      allDayWork: editableStoreForm.allDayOpen,
      awakeTime: editableStoreForm.openingHour,
      sleepTime: editableStoreForm.closingHour,
      productNameFontSize: 14,
      productPriceFontSizeBeforeDiscount: 14,
      productPriceFontSizeAfterDiscount: 14,
      productBarcodeFontSize: 14,
      productBarcodeNumbersFontSize: 14,
      screenSize: "",
    });
    setDeviceFormErrors({});
    if (installedDevicesSectionRef.current) {
      installedDevicesSectionRef.current.scrollIntoView({
        behavior: "smooth",
        block: "start",
      });
    }
  };
  const handleRemoveDevice = (idToRemove) => {
    setCurrentStoreDevices((prev) =>
      prev.filter((device) => device.id !== idToRemove)
    );
    setIsDeviceFormActive(false);
    setCurrentInstallingDevice(null);
    setBluetoothConnectedDevice(null);
    setDeviceForm({
      id:
        currentStoreDevices.length > 0
          ? Math.max(...currentStoreDevices.map((d) => d.id)) + 1
          : 1,
      storeId: selectedStore.id,
      country: selectedStore.country,
      city: selectedStore.city,
      token: generateEsp32Token(),
      allDayWork: editableStoreForm.allDayOpen,
      awakeTime: editableStoreForm.openingHour,
      sleepTime: editableStoreForm.closingHour,
      productNameFontSize: 14,
      productPriceFontSizeBeforeDiscount: 14,
      productPriceFontSizeAfterDiscount: 14,
      productBarcodeFontSize: 14,
      productBarcodeNumbersFontSize: 14,
      screenSize: "",
    });
    setDeviceFormErrors({});
    if (installedDevicesSectionRef.current) {
      installedDevicesSectionRef.current.scrollIntoView({
        behavior: "smooth",
        block: "start",
      });
    }
  };
  const handleEditDevice = (deviceToEdit) => {
    if (isDeviceFormActive) {
      setDialogTitle("Installation in Progress");
      setDialogMessage(translations.currentInstallationWarning);
      setDialogType("alert");
      setDialogCallback(() => () => setShowDialog(false));
      setShowDialog(true);
      return;
    }
    setDeviceForm({ ...deviceToEdit });
    setIsDeviceFormActive(true);
    setBluetoothConnectedDevice({ name: "ESP32" });
    setCurrentInstallingDevice(deviceToEdit);
    setDeviceFormErrors({});

    const newDeviceFormSection = document.getElementById(
      "new-device-form-section"
    );
    if (newDeviceFormSection) {
      newDeviceFormSection.scrollIntoView({
        behavior: "smooth",
        block: "start",
      });
    }
  };
  const handleAddNewDevice = () => {
    if (isDeviceFormActive) {
      setDialogTitle("Installation in Progress");
      setDialogMessage(translations.currentInstallationWarning);
      setDialogType("alert");
      setDialogCallback(() => () => setShowDialog(false));
      setShowDialog(true);
      return;
    }
    setIsDeviceFormActive(true);
    setBluetoothConnectedDevice(null);
    setDeviceForm({
      id:
        currentStoreDevices.length > 0
          ? Math.max(...currentStoreDevices.map((d) => d.id)) + 1
          : 1,
      storeId: selectedStore.id,
      country: selectedStore.country,
      city: selectedStore.city,
      token: generateEsp32Token(),
      allDayWork: editableStoreForm.allDayOpen,
      awakeTime: editableStoreForm.openingHour,
      sleepTime: editableStoreForm.closingHour,
      productNameFontSize: 14,
      productPriceFontSizeBeforeDiscount: 14,
      productPriceFontSizeAfterDiscount: 14,
      productBarcodeFontSize: 14,
      productBarcodeNumbersFontSize: 14,
      screenSize: "",
    });
    setCurrentInstallingDevice(null);
    setDeviceFormErrors({});

    const newDeviceFormSection = document.getElementById(
      "new-device-form-section"
    );
    if (newDeviceFormSection) {
      newDeviceFormSection.scrollIntoView({
        behavior: "smooth",
        block: "start",
      });
    }
  };
  const handleSaveAllChanges = () => {
    setDialogTitle(translations.confirmSaveTitle);
    setDialogMessage(translations.confirmSaveMessage);
    setDialogType("confirm");
    setDialogCallback(() => () => {
      setInstalledDevices((prevAllDevices) => {
        const devicesWithoutCurrentStore = prevAllDevices.filter(
          (d) => d.storeId !== selectedStore.id
        );
        return [...devicesWithoutCurrentStore, ...currentStoreDevices];
      });
      setStores((prevStores) => {
        const updatedStores = prevStores.map((store) =>
          store.id === editableStoreForm.id
            ? {
                ...editableStoreForm,
                working_hours: editableStoreForm.allDayOpen
                  ? "24/7"
                  : `${editableStoreForm.openingHour}-${editableStoreForm.closingHour}`,
              }
            : store
        );
        return updatedStores;
      });

      setShowDialog(false);
      setActiveRoute("/edit-store-details");
    });
    setShowDialog(true);
  };

  const handleBackToStoreInfo = () => {
    setCurrentEditStep(1);
  };
  const handleBackToSelectStore = () => {
    setActiveRoute("/edit-store-details");
  };
  return (
    <div
      className="p-8 rounded-lg shadow-md"
      style={{ backgroundColor: colors.pureWhite, color: colors.darkText }}>
      <h1
        className="text-3xl font-semibold mb-6"
        style={{ color: colors.darkText }}>
        {translations.editStoreInfoTitle}: {selectedStore?.name}
      </h1>

      <div className="flex justify-center items-center my-8 space-x-4">
        <div
          className={`relative flex flex-col items-center transition-all duration-300 ease-in-out`}>
          <div
            className={`w-8 h-8 rounded-full flex items-center justify-center border-2 transition-all duration-300 ease-in-out`}
            style={{
              backgroundColor:
                currentEditStep > 1 ? colors?.progressBarActive : "transparent",
              borderColor:
                currentEditStep === 1
                  ? colors?.logoPrimaryBlue
                  : colors?.progressBarBorder,
            }}>
            {currentEditStep > 1 ? (
              <CheckCircle size={18} style={{ color: colors?.whiteText }} />
            ) : (
              <span
                className="font-semibold"
                style={{
                  color:
                    currentEditStep === 1
                      ? colors?.logoPrimaryBlue
                      : colors?.darkText,
                }}>
                1
              </span>
            )}
          </div>
          <div
            className={`absolute h-0.5 top-1/2 left-full -translate-y-1/2 transition-all duration-300 ease-in-out`}
            style={{
              width: "calc(100% + 1rem)",
              backgroundColor:
                currentEditStep > 1
                  ? colors?.progressBarActive
                  : colors?.progressBarLine,
              zIndex: -1,
            }}></div>
        </div>

        <div
          className={`relative flex flex-col items-center transition-all duration-300 ease-in-out`}>
          <div
            className={`w-8 h-8 rounded-full flex items-center justify-center border-2 transition-all duration-300 ease-in-out`}
            style={{
              backgroundColor:
                currentEditStep > 2 ? colors?.progressBarActive : "transparent",
              borderColor:
                currentEditStep === 2
                  ? colors?.logoPrimaryBlue
                  : colors?.progressBarBorder,
            }}>
            {currentEditStep > 2 ? (
              <CheckCircle size={18} style={{ color: colors?.whiteText }} />
            ) : (
              <span
                className="font-semibold"
                style={{
                  color:
                    currentEditStep === 2
                      ? colors?.logoPrimaryBlue
                      : colors?.darkText,
                }}>
                2
              </span>
            )}
          </div>
        </div>
      </div>

      {currentEditStep === 1 && (
        <div
          className="bg-white p-6 rounded-lg shadow-md max-w-2xl mx-auto"
          style={{ backgroundColor: colors.pureWhite, color: colors.darkText }}>
          <h2
            className="text-xl font-semibold text-gray-800 mb-6"
            style={{ color: colors.darkText }}>
            {translations.editStoreDetailsStep1Title}
          </h2>
          <form>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <label
                  htmlFor="country"
                  className="block text-gray-700 text-sm font-bold mb-2"
                  style={{ color: colors.darkText }}>
                  {translations.countryLabel}{" "}
                  <span className="text-red-500">*</span>
                </label>
                <div className="relative">
                  <select
                    id="country"
                    name="country"
                    value={editableStoreForm.country}
                    onChange={handleStoreFormChange}
                    className={`shadow appearance-none border rounded-md w-full py-2 px-3 pr-10 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                      formErrors.country ? "border-red-500" : ""
                    }`}
                    required
                    style={{
                      backgroundColor: colors.pureWhite,
                      color: colors.darkText,
                      borderColor: colors.mediumGrayText,
                      cursor: "pointer",
                    }}>
                    <option value="">{translations.countryPlaceholder}</option>
                    {countryOptions.map((option) => (
                      <option key={option.value} value={option.value}>
                        {option.label}
                      </option>
                    ))}
                  </select>
                  <ChevronDown
                    className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                    size={18}
                  />
                </div>
                {formErrors.country && (
                  <p className="text-red-500 text-xs italic mt-1">
                    {formErrors.country}
                  </p>
                )}
              </div>
              <div>
                <label
                  htmlFor="city"
                  className="block text-gray-700 text-sm font-bold mb-2"
                  style={{ color: colors.darkText }}>
                  {translations.cityLabel}{" "}
                  <span className="text-red-500">*</span>
                </label>
                <div className="relative">
                  <select
                    id="city"
                    name="city"
                    value={editableStoreForm.city}
                    onChange={handleStoreFormChange}
                    className={`shadow appearance-none border rounded-md w-full py-2 px-3 pr-10 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                      formErrors.city ? "border-red-500" : ""
                    }`}
                    disabled={!editableStoreForm.country}
                    required
                    style={{
                      backgroundColor: colors.pureWhite,
                      color: colors.darkText,
                      borderColor: colors.mediumGrayText,
                      cursor: editableStoreForm.country ? "pointer" : "default",
                    }}>
                    <option value="">{translations.cityPlaceholder}</option>
                    {citiesOptions.map((option) => (
                      <option key={option.value} value={option.value}>
                        {option.label}
                      </option>
                    ))}
                  </select>
                  <ChevronDown
                    className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                    size={18}
                  />
                </div>
                {formErrors.city && (
                  <p className="text-red-500 text-xs italic mt-1">
                    {formErrors.city}
                  </p>
                )}
              </div>
            </div>
            <div className="mb-4">
              <label
                htmlFor="name"
                className="block text-gray-700 text-sm font-bold mb-2"
                style={{ color: colors.darkText }}>
                {translations.storeNameLabel}{" "}
                <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                id="name"
                name="name"
                value={editableStoreForm.name}
                onChange={handleStoreFormChange}
                className={`shadow appearance-none border rounded-md w-full py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                  formErrors.name ? "border-red-500" : ""
                }`}
                required
                style={{
                  backgroundColor: colors.pureWhite,
                  color: colors.darkText,
                  borderColor: colors.mediumGrayText,
                }}
              />
              {formErrors.name && (
                <p className="text-red-500 text-xs italic mt-1">
                  {formErrors.name}
                </p>
              )}
            </div>
            <div className="mb-4 flex items-center">
              <input
                type="checkbox"
                id="addBranch"
                name="addBranch"
                checked={
                  editableStoreForm.addBranch || !!editableStoreForm.branch
                }
                onChange={(e) =>
                  setEditableStoreForm((prev) => ({
                    ...prev,
                    addBranch: e.target.checked,
                    branch: e.target.checked ? prev.branch : "",
                  }))
                }
                className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                style={{
                  backgroundColor: colors.pureWhite,
                  borderColor: colors.mediumGrayText,
                }}
              />
              <label
                htmlFor="addBranch"
                className="text-gray-700 text-sm"
                style={{ color: colors.darkText }}>
                {translations.addBranchLabel}
              </label>
            </div>
            {(editableStoreForm.addBranch || editableStoreForm.branch) && (
              <div className="mb-4">
                <label
                  htmlFor="branch"
                  className="block text-gray-700 text-sm font-bold mb-2"
                  style={{ color: colors.darkText }}>
                  {translations.branchNameLabel}{" "}
                  <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  id="branch"
                  name="branch"
                  value={editableStoreForm.branch}
                  onChange={handleStoreFormChange}
                  className={`shadow appearance-none border rounded-md w-full py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                    formErrors.branch ? "border-red-500" : ""
                  }`}
                  required
                  style={{
                    backgroundColor: colors.pureWhite,
                    color: colors.darkText,
                    borderColor: colors.mediumGrayText,
                  }}
                />
                {formErrors.branch && (
                  <p className="text-red-500 text-xs italic mt-1">
                    {formErrors.branch}
                  </p>
                )}
              </div>
            )}
            <div className="mb-4">
              <label
                htmlFor="address"
                className="block text-gray-700 text-sm font-bold mb-2"
                style={{ color: colors.darkText }}>
                {translations.storeBranchAddressLabel}{" "}
                <span className="text-red-500">*</span>
              </label>
              <textarea
                id="address"
                name="address"
                rows="3"
                value={editableStoreForm.address}
                onChange={handleStoreFormChange}
                className={`shadow appearance-none border rounded-md w-full py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 resize-y ${
                  formErrors.address ? "border-red-500" : ""
                }`}
                required
                style={{
                  backgroundColor: colors.pureWhite,
                  color: colors.darkText,
                  borderColor: colors.mediumGrayText,
                }}></textarea>
              {formErrors.address && (
                <p className="text-red-500 text-xs italic mt-1">
                  {formErrors.address}
                </p>
              )}
            </div>

            <div className="mb-4 flex items-center">
              <input
                type="checkbox"
                id="allDayOpen"
                name="allDayOpen"
                checked={editableStoreForm.allDayOpen}
                onChange={handleStoreFormChange}
                className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                style={{
                  backgroundColor: colors.pureWhite,
                  borderColor: colors.mediumGrayText,
                }}
              />
              <label
                htmlFor="allDayOpen"
                className="text-gray-700 text-sm"
                style={{ color: colors.darkText }}>
                {translations.allDayOpenLabel}
              </label>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <label
                  htmlFor="openingHour"
                  className="block text-gray-700 text-sm font-bold mb-2"
                  style={{ color: colors.darkText }}>
                  {translations.openingHourLabel}{" "}
                  {!editableStoreForm.allDayOpen && (
                    <span className="text-red-500">*</span>
                  )}
                </label>
                <div className="relative">
                  <select
                    id="openingHour"
                    name="openingHour"
                    value={editableStoreForm.openingHour}
                    onChange={handleStoreFormChange}
                    className={`shadow appearance-none border rounded-md w-full py-2 px-3 pr-10 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                      editableStoreForm.allDayOpen ? "bg-gray-200" : ""
                    } ${formErrors.openingHour ? "border-red-500" : ""}`}
                    disabled={editableStoreForm.allDayOpen}
                    required={!editableStoreForm.allDayOpen}
                    style={{
                      backgroundColor: editableStoreForm.allDayOpen
                        ? colors.lightGrayBg
                        : colors.pureWhite,
                      color: colors.darkText,
                      borderColor: colors.mediumGrayText,
                      cursor:
                        editableStoreForm.allDayOpen || !isDeviceFormActive
                          ? "default"
                          : "pointer",
                    }}>
                    <option value="">{translations.selectHour}</option>
                    {timeOptions.map((time) => (
                      <option key={time} value={time}>
                        {time}
                      </option>
                    ))}
                  </select>
                  <ChevronDown
                    className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                    size={18}
                  />
                </div>
                {formErrors.openingHour && (
                  <p className="text-red-500 text-xs italic mt-1">
                    {formErrors.openingHour}
                  </p>
                )}
              </div>
              <div>
                <label
                  htmlFor="closingHour"
                  className="block text-gray-700 text-sm font-bold mb-2"
                  style={{ color: colors.darkText }}>
                  {translations.closingHourLabel}{" "}
                  {!editableStoreForm.allDayOpen && (
                    <span className="text-red-500">*</span>
                  )}
                </label>
                <div className="relative">
                  <select
                    id="closingHour"
                    name="closingHour"
                    value={editableStoreForm.closingHour}
                    onChange={handleStoreFormChange}
                    disabled={editableStoreForm.allDayOpen}
                    required={!editableStoreForm.allDayOpen}
                    className={`shadow appearance-none border rounded-md w-full py-2 px-3 pr-10 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                      editableStoreForm.allDayOpen ? "bg-gray-200" : ""
                    } ${formErrors.closingHour ? "border-red-500" : ""}`}
                    style={{
                      backgroundColor: editableStoreForm.allDayOpen
                        ? colors.lightGrayBg
                        : colors.pureWhite,
                      color: colors.darkText,
                      borderColor: colors.mediumGrayText,
                      cursor:
                        editableStoreForm.allDayOpen || !isDeviceFormActive
                          ? "default"
                          : "pointer",
                    }}>
                    <option value="">{translations.selectHour}</option>
                    {timeOptions.map((time) => (
                      <option key={time} value={time}>
                        {time}
                      </option>
                    ))}
                  </select>
                  <ChevronDown
                    className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                    size={18}
                  />
                </div>
                {formErrors.closingHour && (
                  <p className="text-red-500 text-xs italic mt-1">
                    {formErrors.closingHour}
                  </p>
                )}
              </div>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <label
                  htmlFor="ownerName"
                  className="block text-gray-700 text-sm font-bold mb-2"
                  style={{ color: colors.darkText }}>
                  {translations.ownerNameLabel}{" "}
                  <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  id="ownerName"
                  name="ownerName"
                  value={editableStoreForm.ownerName}
                  onChange={handleStoreFormChange}
                  className={`shadow appearance-none border rounded-md w-full py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                    formErrors.ownerName ? "border-red-500" : ""
                  }`}
                  required
                  style={{
                    backgroundColor: colors.pureWhite,
                    color: colors.darkText,
                    borderColor: colors.mediumGrayText,
                  }}
                />
                {formErrors.ownerName && (
                  <p className="text-red-500 text-xs italic mt-1">
                    {formErrors.ownerName}
                  </p>
                )}
              </div>
              <div>
                <label
                  htmlFor="ownerSurname"
                  className="block text-gray-700 text-sm font-bold mb-2"
                  style={{ color: colors.darkText }}>
                  {translations.ownerSurnameLabel}{" "}
                  <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  id="ownerSurname"
                  name="ownerSurname"
                  value={editableStoreForm.ownerSurname}
                  onChange={handleStoreFormChange}
                  className={`shadow appearance-none border rounded-md w-full py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                    formErrors.ownerSurname ? "border-red-500" : ""
                  }`}
                  required
                  style={{
                    backgroundColor: colors.pureWhite,
                    color: colors.darkText,
                    borderColor: colors.mediumGrayText,
                  }}
                />
                {formErrors.ownerSurname && (
                  <p className="text-red-500 text-xs italic mt-1">
                    {formErrors.ownerSurname}
                  </p>
                )}
              </div>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
              <div>
                <label
                  htmlFor="installerName"
                  className="block text-gray-700 text-sm font-bold mb-2"
                  style={{ color: colors.darkText }}>
                  {translations.installerNameLabel}{" "}
                  <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  id="installerName"
                  name="installerName"
                  value={editableStoreForm.installerName}
                  onChange={handleStoreFormChange}
                  className={`shadow appearance-none border rounded-md w-full py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                    formErrors.installerName ? "border-red-500" : ""
                  }`}
                  required
                  style={{
                    backgroundColor: colors.pureWhite,
                    color: colors.darkText,
                    borderColor: colors.mediumGrayText,
                  }}
                />
                {formErrors.installerName && (
                  <p className="text-red-500 text-xs italic mt-1">
                    {formErrors.installerName}
                  </p>
                )}
              </div>
              <div>
                <label
                  htmlFor="installerSurname"
                  className="block text-gray-700 text-sm font-bold mb-2"
                  style={{ color: colors.darkText }}>
                  {translations.installerSurnameLabel}{" "}
                  <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  id="installerSurname"
                  name="installerSurname"
                  value={editableStoreForm.installerSurname}
                  onChange={handleStoreFormChange}
                  className={`shadow appearance-none border rounded-md w-full py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                    formErrors.installerSurname ? "border-red-500" : ""
                  }`}
                  required
                  style={{
                    backgroundColor: colors.pureWhite,
                    color: colors.darkText,
                    borderColor: colors.mediumGrayText,
                  }}
                />
                {formErrors.installerSurname && (
                  <p className="text-red-500 text-xs italic mt-1">
                    {formErrors.installerSurname}
                  </p>
                )}
              </div>
            </div>
          </form>
          <div className="flex justify-end p-4 bg-transparent">
            <button
              onClick={handleStoreInfoNext}
              className={`bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-6 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors duration-200`}
              style={{ backgroundColor: colors.nextButtonBg }}>
              {translations.nextButton}
            </button>
          </div>
        </div>
      )}

      {currentEditStep === 2 && (
        <div
          className="bg-white p-6 rounded-lg shadow-md max-w-2xl mx-auto"
          style={{ backgroundColor: colors.pureWhite, color: colors.darkText }}>
          <h2
            className="text-xl font-semibold text-gray-800 mb-6"
            style={{ color: colors.darkText }}>
            {translations.editStoreDetailsStep2Title}
          </h2>

          <div
            id="installed-devices-section"
            ref={installedDevicesSectionRef}
            className="mb-6">
            <h3
              className="text-lg font-semibold mb-4"
              style={{ color: colors.darkText }}>
              {translations.installedDevicesTitle}
            </h3>
            {currentStoreDevices.length === 0 ? (
              <p
                className="text-gray-600"
                style={{ color: colors.mediumGrayText }}>
                No devices installed yet for this store.
              </p>
            ) : (
              <ul className="space-y-2">
                {currentStoreDevices.map((device) => (
                  <li
                    key={device.id}
                    className="flex justify-between items-center bg-gray-100 p-3 rounded-md"
                    style={{
                      backgroundColor: colors.lightGrayBg,
                      color: colors.darkText,
                    }}>
                    <span>
                      ID: {device.id} - Screen: {device.screenSize} - Token:{" "}
                      {device.token?.substring(0, 8)}...
                    </span>
                    <button
                      onClick={() => handleEditDevice(device)}
                      className="bg-yellow-500 hover:bg-yellow-600 text-white text-sm font-bold py-1 px-3 rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2 transition-colors duration-200">
                      {translations.editButton}
                    </button>
                  </li>
                ))}
              </ul>
            )}
          </div>

          {isDeviceFormActive && (
            <div
              id="new-device-form-section"
              ref={newDeviceFormSectionRef}
              className="border-t border-gray-200 pt-6 mt-6 grid grid-cols-1 gap-4 md:grid-cols-2">
              <h3
                className="text-lg font-semibold text-gray-800 mb-4 col-span-full"
                style={{ color: colors.darkText }}>
                {currentInstallingDevice
                  ? `Edit Device ID: ${currentInstallingDevice.id}`
                  : `New Device Installation`}
              </h3>
              <div className="col-span-full text-center mb-4">
                <button
                  onClick={handleBluetoothConnect}
                  className={`bg-blue-600 hover:bg-blue-700 text-white font-bold w-full py-4 rounded-md flex items-center justify-center border-2 border-blue-700 transition-colors duration-200 shadow-lg ${
                    bluetoothConnectedDevice || currentInstallingDevice
                      ? "opacity-50 cursor-default"
                      : ""
                  }`}
                  disabled={
                    bluetoothConnectedDevice !== null ||
                    currentInstallingDevice !== null
                  }
                  title={translations.bluetoothConnectButton}>
                  <Bluetooth size={28} className="mr-3" />
                  <span>{translations.bluetoothConnectButton}</span>
                </button>
                {bluetoothConnectedDevice && (
                  <p
                    className="mt-2 text-green-600"
                    style={{ color: colors.successGreen }}>
                    Connected to {bluetoothConnectedDevice.name}
                  </p>
                )}
                {!bluetoothConnectedDevice && !currentInstallingDevice && (
                  <p
                    className="mt-2 text-gray-500 text-sm"
                    style={{ color: colors.mediumGrayText }}>
                    {translations.bluetoothNoDeviceSelected}
                  </p>
                )}
              </div>

              <div className="col-span-1">
                <label
                  htmlFor="id"
                  className="block text-gray-700 text-sm font-bold mb-2"
                  style={{ color: colors.darkText }}>
                  {translations.idLabel}
                </label>
                <input
                  type="text"
                  id="id"
                  name="id"
                  value={deviceForm.id}
                  onChange={handleDeviceFormChange}
                  className={`shadow appearance-none border rounded-md w-full py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                    deviceFormErrors.id ? "border-red-500" : ""
                  }`}
                  disabled={!isDeviceFormActive}
                  style={{
                    backgroundColor: !isDeviceFormActive
                      ? colors.lightGrayBg
                      : colors.pureWhite,
                    color: colors.darkText,
                    borderColor: colors.mediumGrayText,
                    cursor: !isDeviceFormActive ? "default" : "text",
                  }}
                />
                {deviceFormErrors.id && (
                  <p className="text-red-500 text-xs italic mt-1">
                    {deviceFormErrors.id}
                  </p>
                )}
              </div>
              <div className="col-span-1">
                <label
                  htmlFor="deviceCountry"
                  className="block text-gray-700 text-sm font-bold mb-2"
                  style={{ color: colors.darkText }}>
                  {translations.countryLabel}
                </label>
                <input
                  type="text"
                  id="deviceCountry"
                  name="country"
                  value={deviceForm.country}
                  readOnly
                  className="shadow appearance-none border rounded-md w-full py-2 px-3 text-gray-700 bg-gray-100"
                  style={{
                    backgroundColor: colors.lightGrayBg,
                    color: colors.darkText,
                    borderColor: colors.mediumGrayText,
                    cursor: "default",
                  }}
                />
              </div>
              <div className="col-span-1">
                <label
                  htmlFor="deviceCity"
                  className="block text-gray-700 text-sm font-bold mb-2"
                  style={{ color: colors.darkText }}>
                  {translations.cityLabel}
                </label>
                <input
                  type="text"
                  id="deviceCity"
                  name="city"
                  value={deviceForm.city}
                  readOnly
                  className="shadow appearance-none border rounded-md w-full py-2 px-3 text-gray-700 bg-gray-100"
                  style={{
                    backgroundColor: colors.lightGrayBg,
                    color: colors.darkText,
                    borderColor: colors.mediumGrayText,
                    cursor: "default",
                  }}
                />
              </div>
              <div className="col-span-1">
                <label
                  htmlFor="deviceToken"
                  className="block text-gray-700 text-sm font-bold mb-2"
                  style={{ color: colors.darkText }}>
                  {translations.tokenLabel}
                </label>
                <input
                  type="text"
                  id="deviceToken"
                  name="token"
                  value={deviceForm.token}
                  readOnly
                  className="shadow appearance-none border rounded-md w-full py-2 px-3 text-gray-700 bg-gray-100"
                  style={{
                    backgroundColor: colors.lightGrayBg,
                    color: colors.darkText,
                    borderColor: colors.mediumGrayText,
                    cursor: "default",
                  }}
                />
              </div>

              <div className="col-span-1">
                <label
                  htmlFor="storeNameDisplay"
                  className="block text-gray-700 text-sm font-bold mb-2"
                  style={{ color: colors.darkText }}>
                  {translations.storeNameLabel}
                </label>
                <input
                  type="text"
                  id="storeNameDisplay"
                  value={editableStoreForm.name}
                  readOnly
                  className="shadow appearance-none border rounded-md w-full py-2 px-3 text-gray-700 bg-gray-100"
                  style={{
                    backgroundColor: colors.lightGrayBg,
                    color: colors.darkText,
                    borderColor: colors.mediumGrayText,
                    cursor: "default",
                  }}
                />
              </div>
              {(editableStoreForm.addBranch || editableStoreForm.branch) && (
                <div className="col-span-1">
                  <label
                    htmlFor="branchNameDisplay"
                    className="block text-gray-700 text-sm font-bold mb-2"
                    style={{ color: colors.darkText }}>
                    {translations.branchNameLabel}
                  </label>
                  <input
                    type="text"
                    id="branchNameDisplay"
                    value={editableStoreForm.branch}
                    readOnly
                    className="shadow appearance-none border rounded-md w-full py-2 px-3 text-gray-700 bg-gray-100"
                    style={{
                      backgroundColor: colors.lightGrayBg,
                      color: colors.darkText,
                      borderColor: colors.mediumGrayText,
                      cursor: "default",
                    }}
                  />
                </div>
              )}

              <div className="col-span-full mb-4 flex items-center">
                <input
                  type="checkbox"
                  id="allDayWork"
                  name="allDayWork"
                  checked={deviceForm.allDayWork}
                  onChange={handleDeviceFormChange}
                  disabled={!isDeviceFormActive}
                  className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  style={{
                    backgroundColor: colors.pureWhite,
                    borderColor: colors.mediumGrayText,
                  }}
                />
                <label
                  htmlFor="allDayWork"
                  className="text-gray-700 text-sm"
                  style={{ color: colors.darkText }}>
                  {translations.allDayWorkLabel}
                </label>
              </div>

              <div className="col-span-1">
                <label
                  htmlFor="awakeTime"
                  className="block text-gray-700 text-sm font-bold mb-2"
                  style={{ color: colors.darkText }}>
                  {translations.awakeTimeLabel}{" "}
                  {!deviceForm.allDayWork && (
                    <span className="text-red-500">*</span>
                  )}
                </label>
                <div className="relative">
                  <select
                    id="awakeTime"
                    name="awakeTime"
                    value={deviceForm.awakeTime}
                    onChange={handleDeviceFormChange}
                    disabled={deviceForm.allDayWork || !isDeviceFormActive}
                    className={`shadow appearance-none border rounded-md w-full py-2 px-3 pr-10 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                      deviceForm.allDayWork ? "bg-gray-200" : ""
                    } ${deviceFormErrors.awakeTime ? "border-red-500" : ""}`}
                    required={!deviceForm.allDayWork}
                    style={{
                      backgroundColor: deviceForm.allDayWork
                        ? colors.lightGrayBg
                        : colors.pureWhite,
                      color: colors.darkText,
                      borderColor: colors.mediumGrayText,
                      cursor:
                        deviceForm.allDayWork || !isDeviceFormActive
                          ? "default"
                          : "pointer",
                    }}>
                    <option value="">Select Time</option>
                    {timeOptions.map((time) => (
                      <option key={time} value={time}>
                        {time}
                      </option>
                    ))}
                  </select>
                  <ChevronDown
                    className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                    size={18}
                  />
                </div>
                {deviceFormErrors.awakeTime && (
                  <p className="text-red-500 text-xs italic mt-1">
                    {deviceFormErrors.awakeTime}
                  </p>
                )}
              </div>
              <div className="col-span-1">
                <label
                  htmlFor="sleepTime"
                  className="block text-gray-700 text-sm font-bold mb-2"
                  style={{ color: colors.darkText }}>
                  {translations.sleepTimeLabel}{" "}
                  {!deviceForm.allDayWork && (
                    <span className="text-red-500">*</span>
                  )}
                </label>
                <div className="relative">
                  <select
                    id="sleepTime"
                    name="sleepTime"
                    value={deviceForm.sleepTime}
                    onChange={handleDeviceFormChange}
                    disabled={deviceForm.allDayWork || !isDeviceFormActive}
                    className={`shadow appearance-none border rounded-md w-full py-2 px-3 pr-10 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                      deviceForm.allDayWork ? "bg-gray-200" : ""
                    } ${deviceFormErrors.sleepTime ? "border-red-500" : ""}`}
                    required={!deviceForm.allDayWork}
                    style={{
                      backgroundColor: deviceForm.allDayWork
                        ? colors.lightGrayBg
                        : colors.pureWhite,
                      color: colors.darkText,
                      borderColor: colors.mediumGrayText,
                      cursor:
                        deviceForm.allDayWork || !isDeviceFormActive
                          ? "default"
                          : "pointer",
                    }}>
                    <option value="">Select Time</option>
                    {timeOptions.map((time) => (
                      <option key={time} value={time}>
                        {time}
                      </option>
                    ))}
                  </select>
                  <ChevronDown
                    className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                    size={18}
                  />
                </div>
                {deviceFormErrors.sleepTime && (
                  <p className="text-red-500 text-xs italic mt-1">
                    {deviceFormErrors.sleepTime}
                  </p>
                )}
              </div>

              <div className="col-span-1">
                <label
                  htmlFor="productNameFontSize"
                  className="block text-gray-700 text-sm font-bold mb-2"
                  style={{ color: colors.darkText }}>
                  {translations.productNameFontSizeLabel}
                </label>
                <div className="relative">
                  <select
                    id="productNameFontSize"
                    name="productNameFontSize"
                    value={deviceForm.productNameFontSize}
                    onChange={handleDeviceFormChange}
                    disabled={!isDeviceFormActive}
                    className="shadow appearance-none border rounded-md w-full py-2 px-3 pr-10 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                    style={{
                      backgroundColor: colors.pureWhite,
                      color: colors.darkText,
                      borderColor: colors.mediumGrayText,
                      cursor: !isDeviceFormActive ? "default" : "pointer",
                    }}>
                    <option value="">Select Font Size</option>
                    {fontSizes.map((size) => (
                      <option key={size} value={size}>
                        {size}px
                      </option>
                    ))}
                  </select>
                  <ChevronDown
                    className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                    size={18}
                  />
                </div>
              </div>
              <div className="col-span-1">
                <label
                  htmlFor="productPriceFontSizeBeforeDiscount"
                  className="block text-gray-700 text-sm font-bold mb-2"
                  style={{ color: colors.darkText }}>
                  {translations.productPriceFontSizeBeforeDiscountLabel}
                </label>
                <div className="relative">
                  <select
                    id="productPriceFontSizeBeforeDiscount"
                    name="productPriceFontSizeBeforeDiscount"
                    value={deviceForm.productPriceFontSizeBeforeDiscount}
                    onChange={handleDeviceFormChange}
                    disabled={!isDeviceFormActive}
                    className="shadow appearance-none border rounded-md w-full py-2 px-3 pr-10 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                    style={{
                      backgroundColor: colors.pureWhite,
                      color: colors.darkText,
                      borderColor: colors.mediumGrayText,
                    }}>
                    <option value="">Select Font Size</option>
                    {fontSizes.map((size) => (
                      <option key={size} value={size}>
                        {size}px
                      </option>
                    ))}
                  </select>
                  <ChevronDown
                    className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                    size={18}
                  />
                </div>
              </div>
              <div className="col-span-1">
                <label
                  htmlFor="productPriceFontSizeAfterDiscount"
                  className="block text-gray-700 text-sm font-bold mb-2"
                  style={{ color: colors.darkText }}>
                  {translations.productPriceFontSizeAfterDiscountLabel}
                </label>
                <div className="relative">
                  <select
                    id="productPriceFontSizeAfterDiscount"
                    name="productPriceFontSizeAfterDiscount"
                    value={deviceForm.productPriceFontSizeAfterDiscount}
                    onChange={handleDeviceFormChange}
                    disabled={!isDeviceFormActive}
                    className="shadow appearance-none border rounded-md w-full py-2 px-3 pr-10 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                    style={{
                      backgroundColor: colors.pureWhite,
                      color: colors.darkText,
                      borderColor: colors.mediumGrayText,
                    }}>
                    <option value="">Select Font Size</option>
                    {fontSizes.map((size) => (
                      <option key={size} value={size}>
                        {size}px
                      </option>
                    ))}
                  </select>
                  <ChevronDown
                    className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                    size={18}
                  />
                </div>
              </div>
              <div className="col-span-1">
                <label
                  htmlFor="productBarcodeFontSize"
                  className="block text-gray-700 text-sm font-bold mb-2"
                  style={{ color: colors.darkText }}>
                  {translations.productBarcodeFontSizeLabel}
                </label>
                <div className="relative">
                  <select
                    id="productBarcodeFontSize"
                    name="productBarcodeFontSize"
                    value={deviceForm.productBarcodeFontSize}
                    onChange={handleDeviceFormChange}
                    disabled={!isDeviceFormActive}
                    className="shadow appearance-none border rounded-md w-full py-2 px-3 pr-10 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                    style={{
                      backgroundColor: colors.pureWhite,
                      color: colors.darkText,
                      borderColor: colors.mediumGrayText,
                    }}>
                    <option value="">Select Font Size</option>
                    {fontSizes.map((size) => (
                      <option key={size} value={size}>
                        {size}px
                      </option>
                    ))}
                  </select>
                  <ChevronDown
                    className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                    size={18}
                  />
                </div>
              </div>
              <div className="col-span-1">
                <label
                  htmlFor="productBarcodeNumbersFontSize"
                  className="block text-gray-700 text-sm font-bold mb-2"
                  style={{ color: colors.darkText }}>
                  {translations.productBarcodeNumbersFontSizeLabel}
                </label>
                <div className="relative">
                  <select
                    id="productBarcodeNumbersFontSize"
                    name="productBarcodeNumbersFontSize"
                    value={deviceForm.productBarcodeNumbersFontSize}
                    onChange={handleDeviceFormChange}
                    disabled={!isDeviceFormActive}
                    className="shadow appearance-none border rounded-md w-full py-2 px-3 pr-10 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                    style={{
                      backgroundColor: colors.pureWhite,
                      color: colors.darkText,
                      borderColor: colors.mediumGrayText,
                    }}>
                    <option value="">Select Font Size</option>
                    {fontSizes.map((size) => (
                      <option key={size} value={size}>
                        {size}px
                      </option>
                    ))}
                  </select>
                  <ChevronDown
                    className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                    size={18}
                  />
                </div>
              </div>
              <div className="col-span-1">
                <label
                  htmlFor="screenSize"
                  className="block text-gray-700 text-sm font-bold mb-2"
                  style={{ color: colors.darkText }}>
                  {translations.screenSizeLabel}{" "}
                  <span className="text-red-500">*</span>
                </label>
                <div className="relative">
                  <select
                    id="screenSize"
                    name="screenSize"
                    value={deviceForm.screenSize}
                    onChange={handleDeviceFormChange}
                    disabled={!isDeviceFormActive}
                    className={`shadow appearance-none border rounded-md w-full py-2 px-3 pr-10 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
                      deviceFormErrors.screenSize ? "border-red-500" : ""
                    }`}
                    required
                    style={{
                      backgroundColor: colors.pureWhite,
                      color: colors.darkText,
                      borderColor: colors.mediumGrayText,
                      cursor: !isDeviceFormActive ? "default" : "pointer",
                    }}>
                    <option value="">Select Screen Size</option>
                    {screenSizes.map((size) => (
                      <option key={size} value={size}>
                        {size}
                      </option>
                    ))}
                  </select>
                  <ChevronDown
                    className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
                    size={18}
                  />
                </div>
                {deviceFormErrors.screenSize && (
                  <p className="text-red-500 text-xs italic mt-1">
                    {deviceFormErrors.screenSize}
                  </p>
                )}
              </div>
              <div className="flex justify-between mt-6 col-span-full">
                {!(
                  currentStoreDevices.length === 0 && !currentInstallingDevice
                ) && (
                  <button
                    onClick={() =>
                      handleRemoveDevice(
                        currentInstallingDevice?.id || deviceForm.id
                      )
                    }
                    className="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-colors duration-200">
                    {translations.removeDeviceButton}
                  </button>
                )}
                <button
                  onClick={handleSaveDevice}
                  className={`bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors duration-200 ${
                    currentStoreDevices.length === 0 && !currentInstallingDevice
                      ? "mx-auto"
                      : ""
                  }`}
                  style={{
                    marginLeft:
                      currentStoreDevices.length === 0 &&
                      !currentInstallingDevice
                        ? "auto"
                        : "0",
                  }}>
                  {translations.saveButton}
                </button>
              </div>
            </div>
          )}

          {!isDeviceFormActive && (
            <div className="mb-6 mt-6">
              <button
                onClick={handleAddNewDevice}
                className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors duration-200 block mx-auto">
                {translations.addNewDeviceButton}
              </button>
            </div>
          )}
          <div className="flex justify-between p-4 bg-transparent mt-4">
            <button
              onClick={handleBackToStoreInfo}
              className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-6 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors duration-200"
              style={{ backgroundColor: colors.prevButtonBg }}>
              {translations.previousButton}
            </button>
            <button
              onClick={handleSaveAllChanges}
              className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-6 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors duration-200"
              style={{ backgroundColor: colors.nextButtonBg }}>
              {translations.saveChangesButton}
            </button>
          </div>
        </div>
      )}

      <div className="flex justify-start p-4 bg-transparent mt-4">
        <button
          onClick={handleBackToSelectStore}
          className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-6 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors duration-200"
          style={{ backgroundColor: colors.prevButtonBg }}>
          {translations.backToStoreList}
        </button>
      </div>
    </div>
  );
}

// View Logs Page
function ViewLogsPage({
  colors,
  translations,
  stores,
  setActiveRoute,
  setSelectedStoreForLogs,
}) {
  const [selectedCountries, setSelectedCountries] = useState([]);
  const [selectedCities, setSelectedCities] = useState([]);

  const [countryInput, setCountryInput] = useState("");
  const [cityInput, setCityInput] = useState("");

  const [showCountrySuggestions, setShowCountrySuggestions] = useState(false);
  const [showCitySuggestions, setShowCitySuggestions] = useState(false);

  const countryInputRef = useRef(null);
  const cityInputRef = useRef(null);
  const handleCountryInputChange = (e) => {
    setCountryInput(e.target.value);
  };
  const handleCityInputChange = (e) => {
    setCityInput(e.target.value);
  };
  const addCountryFilter = (country) => {
    if (country && !selectedCountries.includes(country)) {
      setSelectedCountries([...selectedCountries, country]);
      setCountryInput("");
      setShowCountrySuggestions(false);
    }
  };
  const addCityFilter = (city) => {
    if (city && !selectedCities.includes(city)) {
      setSelectedCities([...selectedCities, city]);
      setCityInput("");
      setShowCitySuggestions(false);
    }
  };

  const removeCountryFilter = (countryToRemove) => {
    setSelectedCountries(
      selectedCountries.filter((country) => country !== countryToRemove)
    );
  };
  const removeCityFilter = (cityToRemove) => {
    setSelectedCities(selectedCities.filter((city) => city !== cityToRemove));
  };
  const handleCountryInputKeyPress = (e) => {
    if (e.key === "Enter") {
      addCountryFilter(countryInput.trim());
    }
  };
  const handleCityInputKeyPress = (e) => {
    if (e.key === "Enter") {
      addCityFilter(cityInput.trim());
    }
  };

  const handleResetFilters = () => {
    setSelectedCountries([]);
    setSelectedCities([]);
    setCountryInput("");
    setCityInput("");
  };
  const handleStoreRowClick = (store) => {
    setSelectedStoreForLogs(store);
    setActiveRoute(`/store-log-details/${store.id}`);
  };
  const uniqueCountries = useMemo(() => {
    const countries = [...new Set(stores.map((store) => store.country))];
    return countries.sort();
  }, [stores]);
  const uniqueCities = useMemo(() => {
    let cities = [];
    if (selectedCountries.length > 0) {
      cities = stores
        .filter((store) => selectedCountries.includes(store.country))
        .map((store) => store.city);
    } else {
      cities = stores.map((store) => store.city);
    }
    return [...new Set(cities)].sort();
  }, [stores, selectedCountries]);
  const filteredStores = stores.filter((store) => {
    const countryMatch =
      selectedCountries.length === 0 ||
      selectedCountries.includes(store.country);
    const cityMatch =
      selectedCities.length === 0 || selectedCities.includes(store.city);
    return countryMatch && cityMatch;
  });
  return (
    <div
      className="p-8 rounded-lg shadow-md"
      style={{ backgroundColor: colors.pureWhite, color: colors.darkText }}>
      <h1
        className="text-3xl font-semibold mb-6"
        style={{ color: colors.darkText }}>
        {translations.viewLogsTitle}
      </h1>

      <div className="flex flex-wrap items-start gap-4 mb-4">
        <div className="flex-1 min-w-[150px]">
          <label
            htmlFor="filter-country"
            className="block text-sm font-medium mb-1"
            style={{ color: colors.darkText }}>
            {translations.country}
          </label>
          <div className="relative">
            <input
              type="text"
              id="filter-country"
              name="country"
              value={countryInput}
              onChange={handleCountryInputChange}
              onFocus={() => setShowCountrySuggestions(true)}
              onBlur={() =>
                setTimeout(() => setShowCountrySuggestions(false), 100)
              }
              onKeyPress={handleCountryInputKeyPress}
              placeholder={translations.countryPlaceholder}
              className="w-full p-2 pr-10 rounded-md border cursor-pointer"
              style={{
                borderColor: colors.mediumGrayText,
                backgroundColor: colors.lightGrayBg,
                color: colors.darkText,
                outlineColor: colors.logoPrimaryBlue,
              }}
              ref={countryInputRef}
            />
            {showCountrySuggestions && (
              <ul
                className="absolute z-10 w-full rounded-md shadow-lg py-1 mt-1 max-h-40 overflow-y-auto"
                style={{
                  backgroundColor: colors.pureWhite,
                  border: `1px solid ${colors.mediumGrayText}`,
                }}>
                {uniqueCountries
                  .filter((c) =>
                    c.toLowerCase().includes(countryInput.toLowerCase())
                  )
                  .map((country) => (
                    <li
                      key={country}
                      className="px-3 py-2 cursor-pointer hover:bg-gray-100"
                      style={{ color: colors.darkText }}
                      onMouseDown={() => {
                        addCountryFilter(country);
                        countryInputRef.current.focus();
                      }}>
                      {country}
                    </li>
                  ))}
                {uniqueCountries.filter((c) =>
                  c.toLowerCase().includes(countryInput.toLowerCase())
                ).length === 0 &&
                  countryInput && (
                    <li
                      className="px-3 py-2 text-sm"
                      style={{ color: colors.mediumGrayText }}>
                      {translations.noSuggestions}
                    </li>
                  )}
              </ul>
            )}
            <ChevronDown
              className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
              size={18}
            />
          </div>
        </div>
        <div className="flex-1 min-w-[150px]">
          <label
            htmlFor="filter-city"
            className="block text-sm font-medium mb-1"
            style={{ color: colors.darkText }}>
            {translations.city}
          </label>
          <div className="relative">
            <input
              type="text"
              id="filter-city"
              name="city"
              value={cityInput}
              onChange={handleCityInputChange}
              onFocus={() => setShowCitySuggestions(true)}
              onBlur={() =>
                setTimeout(() => setShowCitySuggestions(false), 100)
              }
              onKeyPress={handleCityInputKeyPress}
              placeholder={translations.cityPlaceholder}
              className="w-full p-2 pr-10 rounded-md border cursor-pointer"
              style={{
                borderColor: colors.mediumGrayText,
                backgroundColor: colors.lightGrayBg,
                color: colors.darkText,
                outlineColor: colors.logoPrimaryBlue,
              }}
              ref={cityInputRef}
            />
            {showCitySuggestions && (
              <ul
                className="absolute z-10 w-full rounded-md shadow-lg py-1 mt-1 max-h-40 overflow-y-auto"
                style={{
                  backgroundColor: colors.pureWhite,
                  border: `1px solid ${colors.mediumGrayText}`,
                }}>
                {uniqueCities
                  .filter((c) =>
                    c.toLowerCase().includes(cityInput.toLowerCase())
                  )
                  .map((city) => (
                    <li
                      key={city}
                      className="px-3 py-2 cursor-pointer hover:bg-gray-100"
                      style={{ color: colors.darkText }}
                      onMouseDown={() => {
                        addCityFilter(city);
                        cityInputRef.current.focus();
                      }}>
                      {city}
                    </li>
                  ))}
                {uniqueCities.filter((c) =>
                  c.toLowerCase().includes(cityInput.toLowerCase())
                ).length === 0 &&
                  cityInput && (
                    <li
                      className="px-3 py-2 text-sm"
                      style={{ color: colors.mediumGrayText }}>
                      {translations.noSuggestions}
                    </li>
                  )}
              </ul>
            )}
            <ChevronDown
              className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none"
              size={18}
            />
          </div>
        </div>
      </div>

      <div className="w-full text-right mb-4">
        <button
          onClick={handleResetFilters}
          className="px-4 py-2 rounded-md font-medium flex items-center justify-center transition-colors duration-200 cursor-pointer inline-flex"
          style={{
            backgroundColor: colors.logoPrimaryBlue,
            color: colors.whiteText,
          }}>
          <RotateCcw size={18} className="mr-2" />
          {translations.resetFilters}
        </button>
      </div>

      {(selectedCountries.length > 0 || selectedCities.length > 0) && (
        <div className="flex flex-nowrap gap-2 mb-4 overflow-x-auto pb-2">
          {selectedCountries.map((country) => (
            <span
              key={`country-${country}`}
              className="flex-shrink-0 flex items-center bg-blue-100 text-blue-800 text-sm font-medium px-2.5 py-0.5 rounded-full"
              style={{
                backgroundColor: colors.logoPrimaryBlue + "20",
                color: colors.logoPrimaryBlue,
              }}>
              {country}
              <button
                onClick={() => removeCountryFilter(country)}
                className="ml-1 text-blue-800 hover:text-blue-900 rounded-full p-0.5 transition-colors cursor-pointer"
                style={{ color: colors.logoPrimaryBlue }}>
                <X size={14} />
              </button>
            </span>
          ))}
          {selectedCities.map((city) => (
            <span
              key={`city-${city}`}
              className="flex-shrink-0 flex items-center bg-green-100 text-green-800 text-sm font-medium px-2.5 py-0.5 rounded-full"
              style={{
                backgroundColor: colors.successGreen + "20",
                color: colors.successGreen,
              }}>
              {city}
              <button
                onClick={() => removeCityFilter(city)}
                className="ml-1 text-green-800 hover:text-green-900 rounded-full p-0.5 transition-colors cursor-pointer"
                style={{ color: colors.successGreen }}>
                <X size={14} />
              </button>
            </span>
          ))}
        </div>
      )}

      <div
        className="overflow-x-auto rounded-lg border"
        style={{ borderColor: colors.mediumGrayText }}>
        <table
          className="min-w-full divide-y divide-gray-200"
          style={{ borderColor: colors.mediumGrayText }}>
          <thead style={{ backgroundColor: colors.lightGrayBg }}>
            <tr>
              <th
                className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                style={{ color: colors.mediumGrayText }}>
                {translations.nameHeader}
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                style={{ color: colors.mediumGrayText }}>
                {translations.countryHeader}
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                style={{ color: colors.mediumGrayText }}>
                {translations.cityHeader}
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                style={{ color: colors.mediumGrayText }}>
                {translations.branchHeader}
              </th>
            </tr>
          </thead>
          <tbody
            style={{
              backgroundColor: colors.pureWhite,
              color: colors.darkText,
            }}>
            {filteredStores.length > 0 ? (
              filteredStores.map((store) => (
                <tr
                  key={store.id}
                  className="border-t cursor-pointer hover:bg-gray-50 transition-colors duration-150"
                  style={{ borderColor: colors.lightGrayBg }}
                  onClick={() => handleStoreRowClick(store)}>
                  <td className="px-6 py-4 text-sm font-medium break-words">
                    {store.name}
                  </td>
                  <td className="px-6 py-4 text-sm whitespace-nowrap">
                    {store.country}
                  </td>
                  <td className="px-6 py-4 text-sm whitespace-nowrap">
                    {store.city}
                  </td>
                  <td className="px-6 py-4 text-sm break-words">
                    {store.branch || "-"}
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td
                  colSpan={4}
                  className="px-6 py-4 whitespace-nowrap text-sm text-center"
                  style={{ color: colors.mediumGrayText }}>
                  {translations.noStoresFound}
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}

// Store Log Details Page
function StoreLogDetailsPage({
  colors,
  translations,
  selectedStoreForLogs,
  setActiveRoute,
  installedDevices,
}) {
  if (!selectedStoreForLogs) {
    return (
      <div
        className="p-8 rounded-lg shadow-md"
        style={{ backgroundColor: colors.pureWhite, color: colors.darkText }}>
        <h1
          className="text-3xl font-semibold mb-6"
          style={{ color: colors.darkText }}>
          {translations.logDetailsTitle}
        </h1>
        <p className="text-red-500">{translations.noStoreSelectedForLogs}</p>
        <div className="mt-6">
          <button
            onClick={() => setActiveRoute("/view-logs")}
            className="px-4 py-2 rounded-md font-medium transition-colors duration-200 cursor-pointer"
            style={{
              backgroundColor: colors.logoPrimaryBlue,
              color: colors.whiteText,
            }}>
            {translations.backToStoreList}
          </button>
        </div>
      </div>
    );
  }

  return (
    <div
      className="p-8 rounded-lg shadow-md"
      style={{ backgroundColor: colors.pureWhite, color: colors.darkText }}>
      <h1
        className="text-3xl font-semibold mb-6"
        style={{ color: colors.darkText }}>
        {translations.logDetailsTitle}: {selectedStoreForLogs.name}
      </h1>

      <div className="flex justify-start mb-6">
        <button
          onClick={() => setActiveRoute("/view-logs")}
          className="px-4 py-2 rounded-md font-medium flex items-center transition-colors duration-200 cursor-pointer"
          style={{
            backgroundColor: colors.prevButtonBg,
            color: colors.whiteText,
          }}>
          <ArrowLeft size={20} className="mr-2" /> {translations.backToLogsList}
        </button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div
          className="p-6 rounded-lg shadow-md flex flex-col items-center text-center transition-transform transform hover:scale-105 cursor-pointer"
          style={{ backgroundColor: colors.pureWhite, color: colors.darkText }}
          onClick={() =>
            setActiveRoute(`/server-logs/${selectedStoreForLogs.id}`)
          }>
          <List
            size={48}
            className="mb-4"
            style={{ color: colors.logoPrimaryBlue }}
          />
          <h2
            className="text-xl font-semibold mb-2"
            style={{ color: colors.darkText }}>
            {translations.serverLogsTitle}
          </h2>
          <p className="text-sm" style={{ color: colors.mediumGrayText }}>
            {translations.serverLogsDesc}
          </p>
        </div>

        <div
          className="p-6 rounded-lg shadow-md flex flex-col items-center text-center transition-transform transform hover:scale-105 cursor-pointer"
          style={{ backgroundColor: colors.pureWhite, color: colors.darkText }}
          onClick={() =>
            setActiveRoute(`/esp32-logs/${selectedStoreForLogs.id}`)
          }>
          <Bluetooth
            size={48}
            className="mb-4"
            style={{ color: colors.logoPrimaryBlue }}
          />
          <h2
            className="text-xl font-semibold mb-2"
            style={{ color: colors.darkText }}>
            {translations.esp32LogsTitle}
          </h2>
          <p className="text-sm" style={{ color: colors.mediumGrayText }}>
            {translations.esp32LogsDesc}
          </p>
        </div>
      </div>
    </div>
  );
}

// Server Logs Page
function ServerLogsPage({
  colors,
  translations,
  selectedStoreForLogs,
  setActiveRoute,
}) {
  if (!selectedStoreForLogs) {
    return (
      <div
        className="p-8 rounded-lg shadow-md"
        style={{ backgroundColor: colors.pureWhite, color: colors.darkText }}>
        <h1
          className="text-3xl font-semibold mb-6"
          style={{ color: colors.darkText }}>
          {translations.serverLogsTitle}
        </h1>
        <p className="text-red-500">{translations.noStoreSelectedForLogs}</p>
        <div className="mt-6">
          <button
            onClick={() => setActiveRoute("/view-logs")}
            className="px-4 py-2 rounded-md font-medium transition-colors duration-200 cursor-pointer"
            style={{
              backgroundColor: colors.logoPrimaryBlue,
              color: colors.whiteText,
            }}>
            {translations.backToLogsList}
          </button>
        </div>
      </div>
    );
  }

  return (
    <div
      className="p-8 rounded-lg shadow-md"
      style={{ backgroundColor: colors.pureWhite, color: colors.darkText }}>
      <div className="flex justify-start mb-6">
        <button
          onClick={() =>
            setActiveRoute(`/store-log-details/${selectedStoreForLogs.id}`)
          }
          className="px-4 py-2 rounded-md font-medium flex items-center transition-colors duration-200 cursor-pointer"
          style={{
            backgroundColor: colors.prevButtonBg,
            color: colors.whiteText,
          }}>
          <ArrowLeft size={20} className="mr-2" />{" "}
          {translations.backToStoreLogDetails}
        </button>
      </div>

      <h1
        className="text-3xl font-semibold mb-6"
        style={{ color: colors.darkText }}>
        {translations.serverLogsTitle}: {selectedStoreForLogs.name}
      </h1>

      <div className="space-y-4 text-lg">
        <p>
          <strong>{translations.serverSoftwareVersion}:</strong>{" "}
          {selectedStoreForLogs.server_software_version}
        </p>
        <p>
          <strong>{translations.lastUpdateDate}:</strong>{" "}
          {formatDateTime(selectedStoreForLogs.last_update_date, translations)}
        </p>
        <p>
          <strong>{translations.connectedEsp32Count}:</strong>{" "}
          {selectedStoreForLogs.num_esp32_connected}
        </p>
        <p>
          <strong>{translations.serverToken}:</strong>
          <span className="font-mono break-all ml-2">
            {selectedStoreForLogs.server_token}
          </span>
        </p>
        <p>
          <strong>{translations.storeName}:</strong> {selectedStoreForLogs.name}
          {selectedStoreForLogs.branch && (
            <span> ({selectedStoreForLogs.branch})</span>
          )}
        </p>
        <p>
          <strong>{translations.registeredByName}:</strong>{" "}
          {selectedStoreForLogs.installerName}{" "}
          {selectedStoreForLogs.installerSurname}
        </p>
      </div>
    </div>
  );
}

// ESP32 Logs Page
function ESP32LogsPage({
  colors,
  translations,
  selectedStoreForLogs,
  setActiveRoute,
  installedDevices,
}) {
  // Move hooks to the top, before any early return
  const [selectedDate, setSelectedDate] = useState("");
  const [selectedVersion, setSelectedVersion] = useState("");
  const [selectedBatteryRange, setSelectedBatteryRange] = useState("");

  const hasUserSelectedDateRef = useRef(false);

  const today = useMemo(() => {
    const d = new Date();
    d.setHours(0, 0, 0, 0);
    return d;
  }, []);
  const maxDateISO = today.toISOString().split("T")[0];
  const thirtyDaysAgo = useMemo(() => {
    const d = new Date(today);
    d.setDate(today.getDate() - 29);
    return d;
  }, [today]);
  const minDateISO = thirtyDaysAgo.toISOString().split("T")[0];

  // Always call useMemo, even if selectedStoreForLogs is null
  const devicesForThisStoreAndLast30Days = useMemo(() => {
    if (!selectedStoreForLogs) return [];
    return installedDevices.filter((device) => {
      const deviceDate = new Date(device.last_update_date);
      deviceDate.setHours(0, 0, 0, 0);
      return (
        device.storeId === selectedStoreForLogs.id &&
        deviceDate >= thirtyDaysAgo &&
        deviceDate <= today
      );
    });
  }, [installedDevices, selectedStoreForLogs, thirtyDaysAgo, today]);

  useEffect(() => {
    if (!hasUserSelectedDateRef.current) {
      if (devicesForThisStoreAndLast30Days.length > 0) {
        const latestDateIn30Days = devicesForThisStoreAndLast30Days.reduce(
          (latest, device) => {
            const deviceDate = new Date(device.last_update_date);
            return deviceDate > latest ? deviceDate : latest;
          },
          new Date(0)
        );
        setSelectedDate(latestDateIn30Days.toISOString().split("T")[0]);
      } else {
        setSelectedDate(maxDateISO);
      }
    }
  }, [selectedStoreForLogs?.id, devicesForThisStoreAndLast30Days, maxDateISO]);

  const uniqueVersions = useMemo(() => {
    const versions = [
      ...new Set(
        devicesForThisStoreAndLast30Days.map((device) => device.softwareVersion)
      ),
    ].filter(Boolean);
    return versions.sort();
  }, [devicesForThisStoreAndLast30Days]);

  // Always call useMemo for filteredDevices, even if selectedStoreForLogs is null
  const filteredDevices = useMemo(() => {
    return devicesForThisStoreAndLast30Days.filter((device) => {
      let dateMatch = true;
      let versionMatch = true;
      let batteryMatch = true;

      if (selectedDate) {
        const deviceDate = new Date(device.last_update_date)
          .toISOString()
          .split("T")[0];
        dateMatch = deviceDate === selectedDate;
      }

      if (selectedVersion) {
        versionMatch = device.softwareVersion === selectedVersion;
      }

      if (selectedBatteryRange) {
        const percentage = device.batteryStatus;
        if (selectedBatteryRange === "<25") {
          batteryMatch = percentage < 25;
        } else if (selectedBatteryRange === "25-50") {
          batteryMatch = percentage >= 25 && percentage <= 50;
        } else if (selectedBatteryRange === ">50") {
          batteryMatch = percentage > 50;
        }
      }
      return dateMatch && versionMatch && batteryMatch;
    });
  }, [
    devicesForThisStoreAndLast30Days,
    selectedDate,
    selectedVersion,
    selectedBatteryRange,
  ]);

  if (!selectedStoreForLogs) {
    return (
      <div
        className="p-8 rounded-lg shadow-md"
        style={{ backgroundColor: colors.pureWhite, color: colors.darkText }}>
        <h1
          className="text-3xl font-semibold mb-6"
          style={{ color: colors.darkText }}>
          {translations.esp32LogsTitle}
        </h1>
        <p className="text-red-500">{translations.noStoreSelectedForLogs}</p>
        <div className="mt-6">
          <button
            onClick={() => setActiveRoute("/view-logs")}
            className="px-4 py-2 rounded-md font-medium transition-colors duration-200 cursor-pointer"
            style={{
              backgroundColor: colors.logoPrimaryBlue,
              color: colors.whiteText,
            }}>
            {translations.backToLogsList}
          </button>
        </div>
      </div>
    );
  }
  const handleDateChange = (e) => {
    setSelectedDate(e.target.value);
    hasUserSelectedDateRef.current = true;
  };
  const handleResetFilters = () => {
    hasUserSelectedDateRef.current = false;
    setSelectedVersion("");
    setSelectedBatteryRange("");
  };
  const BatteryIndicator = ({ percentage, colors }) => {
    const batteryColor =
      percentage < 20 ? colors.errorRed : colors.successGreen;
    const innerWidth = `${percentage}%`;

    return (
      <div
        className="relative w-16 h-8 border-2 rounded-md flex items-center justify-center text-xs font-semibold overflow-hidden"
        style={{
          borderColor: colors.darkText,
          backgroundColor: colors.lightGrayBg,
        }}>
        <div
          className="h-full absolute left-0 top-0 rounded-sm"
          style={{
            width: innerWidth,
            backgroundColor: batteryColor,
            transition: "width 0.3s ease-in-out",
          }}></div>
        <span
          className="relative z-10"
          style={{
            color: percentage < 50 ? colors.darkText : colors.whiteText,
          }}>
          {percentage}%
        </span>
      </div>
    );
  };

  return (
    <div
      className="p-8 rounded-lg shadow-md"
      style={{ backgroundColor: colors.pureWhite, color: colors.darkText }}>
      <div className="flex justify-start mb-6">
        <button
          onClick={() =>
            setActiveRoute(`/store-log-details/${selectedStoreForLogs.id}`)
          }
          className="px-4 py-2 rounded-md font-medium flex items-center transition-colors duration-200 cursor-pointer"
          style={{
            backgroundColor: colors.prevButtonBg,
            color: colors.whiteText,
          }}>
          <ArrowLeft size={20} className="mr-2" />{" "}
          {translations.backToStoreLogDetails}
        </button>
      </div>

      <h1
        className="text-3xl font-semibold mb-6"
        style={{ color: colors.darkText }}>
        {translations.esp32LogsTitle}: {selectedStoreForLogs.name}
      </h1>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div>
          <label
            htmlFor="log-date"
            className="block text-sm font-medium mb-1"
            style={{ color: colors.darkText }}>
            {translations.logDate}
          </label>
          <input
            type="date"
            id="log-date"
            name="log-date"
            value={selectedDate}
            onChange={handleDateChange}
            min={minDateISO}
            max={maxDateISO}
            className="w-full p-2 rounded-md border cursor-pointer"
            style={{
              borderColor: colors.mediumGrayText,
              backgroundColor: colors.lightGrayBg,
              color: colors.darkText,
              outlineColor: colors.logoPrimaryBlue,
            }}
          />
        </div>

        <div>
          <label
            htmlFor="software-version-filter"
            className="block text-sm font-medium mb-1"
            style={{ color: colors.darkText }}>
            {translations.softwareVersion}
          </label>
          <select
            id="software-version-filter"
            name="software-version-filter"
            value={selectedVersion}
            onChange={(e) => setSelectedVersion(e.target.value)}
            className="w-full p-2 rounded-md border cursor-pointer"
            style={{
              borderColor: colors.mediumGrayText,
              backgroundColor: colors.lightGrayBg,
              color: colors.darkText,
              outlineColor: colors.logoPrimaryBlue,
            }}>
            <option value="">{translations.allVersions}</option>
            {uniqueVersions.map((version) => (
              <option key={version} value={version}>
                {version}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label
            htmlFor="battery-status-filter"
            className="block text-sm font-medium mb-1"
            style={{ color: colors.darkText }}>
            {translations.batteryStatus}
          </label>
          <select
            id="battery-status-filter"
            name="battery-status-filter"
            value={selectedBatteryRange}
            onChange={(e) => setSelectedBatteryRange(e.target.value)}
            className="w-full p-2 rounded-md border cursor-pointer"
            style={{
              borderColor: colors.mediumGrayText,
              backgroundColor: colors.lightGrayBg,
              color: colors.darkText,
              outlineColor: colors.logoPrimaryBlue,
            }}>
            <option value="">{translations.allBatteryLevels}</option>
            <option value="<25">{translations.batteryLessThan25}</option>
            <option value="25-50">{translations.battery25To50}</option>
            <option value=">50">{translations.batteryGreaterThan50}</option>
          </select>
        </div>
      </div>

      <div className="w-full text-right mb-6">
        <button
          onClick={handleResetFilters}
          className="px-4 py-2 rounded-md font-medium flex items-center justify-center transition-colors duration-200 cursor-pointer inline-flex"
          style={{
            backgroundColor: colors.logoPrimaryBlue,
            color: colors.whiteText,
          }}>
          <RotateCcw size={18} className="mr-2" />
          {translations.resetFilters}
        </button>
      </div>

      <div
        className="overflow-x-auto rounded-lg border"
        style={{ borderColor: colors.mediumGrayText }}>
        <table
          className="min-w-full divide-y divide-gray-200"
          style={{ borderColor: colors.mediumGrayText }}>
          <thead style={{ backgroundColor: colors.lightGrayBg }}>
            <tr>
              <th
                className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                style={{ color: colors.mediumGrayText }}>
                {translations.esp32LogId}
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                style={{ color: colors.mediumGrayText }}>
                {translations.dataRefreshRate}
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                style={{ color: colors.mediumGrayText }}>
                {translations.mosfetStatus}
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                style={{ color: colors.mediumGrayText }}>
                {translations.softwareVersion}
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                style={{ color: colors.mediumGrayText }}>
                {translations.batteryStatus}
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                style={{ color: colors.mediumGrayText }}>
                {translations.sleepTime}
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                style={{ color: colors.mediumGrayText }}>
                {translations.awakeTime}
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                style={{ color: colors.mediumGrayText }}>
                {translations.lastUpdateDate}
              </th>
            </tr>
          </thead>
          <tbody
            style={{
              backgroundColor: colors.pureWhite,
              color: colors.darkText,
            }}>
            {filteredDevices.length > 0 ? (
              filteredDevices.map((device) => (
                <tr
                  key={device.id}
                  className="border-t hover:bg-gray-50 transition-colors duration-150"
                  style={{ borderColor: colors.lightGrayBg }}>
                  <td className="px-6 py-4 text-sm font-medium whitespace-nowrap">
                    {device.id}
                  </td>
                  <td className="px-6 py-4 text-sm whitespace-nowrap">
                    {device.dataRefreshRate || "10 s"}
                  </td>
                  <td className="px-6 py-4 text-sm whitespace-nowrap">
                    {device.mosfetStatus || "Active"}
                  </td>
                  <td className="px-6 py-4 text-sm whitespace-nowrap">
                    {device.softwareVersion || "2.1.0"}
                  </td>
                  <td className="px-6 py-4 text-sm whitespace-nowrap flex items-center justify-center">
                    <BatteryIndicator
                      percentage={
                        device.batteryStatus || Math.floor(Math.random() * 100)
                      }
                      colors={colors}
                    />
                  </td>
                  <td className="px-6 py-4 text-sm whitespace-nowrap">
                    {device.sleepTime || "23:00"}
                  </td>
                  <td className="px-6 py-4 text-sm whitespace-nowrap">
                    {device.awakeTime || "07:00"}
                  </td>
                  <td className="px-6 py-4 text-sm whitespace-nowrap">
                    {formatDateTime(
                      device.last_update_date || Date.now(),
                      translations
                    )}
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td
                  colSpan={8}
                  className="px-6 py-4 whitespace-nowrap text-sm text-center"
                  style={{ color: colors.mediumGrayText }}>
                  {translations.noEsp32DevicesFound}
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}

function App() {
  const [isSidebarExpanded, setIsSidebarExpanded] = useState(true);
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [language, setLanguage] = useState("en");
  const [activeRoute, setActiveRoute] = useState("/new-installation");

  const [showDialog, setShowDialog] = useState(false);
  const [dialogTitle, setDialogTitle] = useState("");
  const [dialogMessage, setDialogMessage] = useState("");
  const [dialogType, setDialogType] = useState("alert");
  const [dialogCallback, setDialogCallback] = useState(null);

  const [stores, setStores] = useState([
    {
      id: 1,
      name: "EilSense Market A",
      country: "USA",
      city: "New York",
      branch: "Downtown",
      address: "123 Main St, New York, NY 10001",
      server_token: "SRV_XYZ123ABCDEFGHIJKLMN",
      status: "active",
      created_at: "2023-01-15T10:00:00Z",
      working_hours: "09:00-21:00",
      allDayOpen: false,
      openingHour: "09:00",
      closingHour: "21:00",
      ownerName: "Alice",
      ownerSurname: "Smith",
      installerName: "Bob",
      installerSurname: "Johnson",
      addBranch: true,
      server_software_version: "1.0.5",
      last_update_date: "2025-06-10T14:30:00Z",
      num_esp32_connected: 5,
    },
    {
      id: 2,
      name: "EilSense Hypermarket B",
      country: "Turkey",
      city: "Istanbul",
      branch: "Kadıköy",
      address: "Bağdat Cd. No: 1, Kadıköy, İstanbul",
      server_token: "SRV_DEF456GHIJKLMNOPQRST",
      status: "active",
      created_at: "2023-02-20T11:30:00Z",
      working_hours: "08:00-22:00",
      allDayOpen: false,
      openingHour: "08:00",
      closingHour: "22:00",
      ownerName: "Can",
      ownerSurname: "Yilmaz",
      installerName: "Deniz",
      installerSurname: "Aslan",
      addBranch: true,
      server_software_version: "1.0.6",
      last_update_date: "2025-06-11T10:00:00Z",
      num_esp32_connected: 8,
    },
    {
      id: 3,
      name: "EilSense Express C",
      country: "Germany",
      city: "Berlin",
      branch: "Mitte",
      address: "Friedrichstr. 45, 10117 Berlin",
      server_token: "SRV_JKL789MNOPQRSTUVWXYZAB",
      status: "inactive",
      created_at: "2023-03-01T09:15:00Z",
      working_hours: "10:00-20:00",
      allDayOpen: false,
      openingHour: "10:00",
      closingHour: "20:00",
      ownerName: "Lena",
      ownerSurname: "Müller",
      installerName: "Max",
      installerSurname: "Schmidt",
      addBranch: true,
      server_software_version: "1.0.4",
      last_update_date: "2025-05-20T08:00:00Z",
      num_esp32_connected: 2,
    },
    {
      id: 4,
      name: "EilSense Mini P",
      country: "Poland",
      city: "Warsaw",
      branch: "Wola",
      address: "Prosta 1, 00-838 Warsaw",
      server_token: "SRV_PQR012STUVWXYZABCDEF",
      status: "active",
      created_at: "2023-04-10T14:00:00Z",
      working_hours: "07:00-23:00",
      allDayOpen: false,
      openingHour: "07:00",
      closingHour: "23:00",
      ownerName: "Jan",
      ownerSurname: "Kowalski",
      installerName: "Piotr",
      installerSurname: "Nowak",
      addBranch: true,
      server_software_version: "1.0.7",
      last_update_date: "2025-06-12T09:45:00Z",
      num_esp32_connected: 10,
    },
    {
      id: 5,
      name: "EilSense Asia",
      country: "Turkey",
      city: "Ankara",
      branch: "Çankaya",
      address: "Atatürk Blv. 5, Çankaya, Ankara",
      server_token: "SRV_UVW345XYZABCDEFGHIJK",
      status: "active",
      created_at: "2023-05-05T16:45:00Z",
      working_hours: "09:00-21:00",
      allDayOpen: false,
      openingHour: "09:00",
      closingHour: "21:00",
      ownerName: "Ayşe",
      ownerSurname: "Demir",
      installerName: "Emre",
      installerSurname: "Kara",
      addBranch: true,
      server_software_version: "1.0.6",
      last_update_date: "2025-06-05T11:00:00Z",
      num_esp32_connected: 4,
    },
    {
      id: 6,
      name: "EilSense World",
      country: "USA",
      city: "Los Angeles",
      branch: "Hollywood",
      address: "Sunset Blvd. 100, Los Angeles, CA 90028",
      server_token: "SRV_ABCDEF1234567890ABCD",
      status: "inactive",
      created_at: "2023-06-01T12:00:00Z",
      working_hours: "24/7",
      allDayOpen: true,
      openingHour: "00:00",
      closingHour: "00:00",
      ownerName: "Chris",
      ownerSurname: "Evans",
      installerName: "Sarah",
      installerSurname: "Connor",
      addBranch: true,
      server_software_version: "1.0.7",
      last_update_date: "2025-06-13T18:00:00Z",
      num_esp32_connected: 12,
    },
    {
      id: 7,
      name: "EilSense Old Logs",
      country: "Poland",
      city: "Krakow",
      branch: "Old Town",
      address: "Rynek Główny 1, 31-042 Kraków",
      server_token: "SRV_OLDLOGS1234567890",
      status: "active",
      created_at: "2024-01-01T09:00:00Z",
      working_hours: "09:00-17:00",
      allDayOpen: false,
      openingHour: "09:00",
      closingHour: "17:00",
      ownerName: "Old",
      ownerSurname: "Log",
      installerName: "Log",
      installerSurname: "User",
      addBranch: true,
      server_software_version: "1.0.1",
      last_update_date: "2024-12-30T23:59:59Z",
      num_esp32_connected: 1,
    },
  ]);
  const [installedDevices, setInstalledDevices] = useState([
    {
      id: 101,
      storeId: 1,
      country: "USA",
      city: "New York",
      token: "ESP-NYC-001",
      allDayWork: true,
      screenSize: "130cm",
      productNameFontSize: 14,
      productPriceFontSizeBeforeDiscount: 14,
      productPriceFontSizeAfterDiscount: 14,
      productBarcodeFontSize: 14,
      productBarcodeNumbersFontSize: 14,
      awakeTime: "00:00",
      sleepTime: "00:00",
      dataRefreshRate: "10s",
      mosfetStatus: "Active",
      softwareVersion: "2.1.0",
      batteryStatus: 85,
      last_update_date: "2025-06-13T10:00:00Z",
    },
    {
      id: 102,
      storeId: 1,
      country: "USA",
      city: "New York",
      token: "ESP-NYC-002",
      allDayWork: false,
      awakeTime: "09:00",
      sleepTime: "17:00",
      screenSize: "80cm",
      productNameFontSize: 12,
      productPriceFontSizeBeforeDiscount: 12,
      productPriceFontSizeAfterDiscount: 12,
      productBarcodeFontSize: 12,
      productBarcodeNumbersFontSize: 12,
      dataRefreshRate: "5s",
      mosfetStatus: "Inactive",
      softwareVersion: "2.0.5",
      batteryStatus: 15,
      last_update_date: "2025-06-12T09:30:00Z",
    },
    {
      id: 103,
      storeId: 1,
      country: "USA",
      city: "New York",
      token: "ESP-NYC-003",
      allDayWork: true,
      screenSize: "110cm",
      productNameFontSize: 13,
      productPriceFontSizeBeforeDiscount: 13,
      productPriceFontSizeAfterDiscount: 13,
      productBarcodeFontSize: 13,
      productBarcodeNumbersFontSize: 13,
      awakeTime: "00:00",
      sleepTime: "00:00",
      dataRefreshRate: "8s",
      mosfetStatus: "Active",
      softwareVersion: "2.1.0",
      batteryStatus: 75,
      last_update_date: "2025-06-11T16:00:00Z",
    },

    {
      id: 201,
      storeId: 2,
      country: "Turkey",
      city: "Istanbul",
      token: "ESP-IST-001",
      allDayWork: true,
      screenSize: "110cm",
      productNameFontSize: 16,
      productPriceFontSizeBeforeDiscount: 16,
      productPriceFontSizeAfterDiscount: 16,
      productBarcodeFontSize: 16,
      productBarcodeNumbersFontSize: 16,
      awakeTime: "00:00",
      sleepTime: "00:00",
      dataRefreshRate: "15s",
      mosfetStatus: "Active",
      softwareVersion: "2.1.1",
      batteryStatus: 92,
      last_update_date: "2025-06-11T11:00:00Z",
    },
    {
      id: 202,
      storeId: 2,
      country: "Turkey",
      city: "Istanbul",
      token: "ESP-IST-002",
      allDayWork: false,
      awakeTime: "08:00",
      sleepTime: "22:00",
      screenSize: "130cm",
      productNameFontSize: 15,
      productPriceFontSizeBeforeDiscount: 15,
      productPriceFontSizeAfterDiscount: 15,
      productBarcodeFontSize: 15,
      productBarcodeNumbersFontSize: 15,
      dataRefreshRate: "12s",
      mosfetStatus: "Inactive",
      softwareVersion: "2.1.0",
      batteryStatus: 30,
      last_update_date: "2025-06-10T19:00:00Z",
    },
    {
      id: 203,
      storeId: 2,
      country: "Turkey",
      city: "Istanbul",
      token: "ESP-IST-003",
      allDayWork: true,
      screenSize: "80cm",
      productNameFontSize: 14,
      productPriceFontSizeBeforeDiscount: 14,
      productPriceFontSizeAfterDiscount: 14,
      productBarcodeFontSize: 14,
      productBarcodeNumbersFontSize: 14,
      awakeTime: "00:00",
      sleepTime: "00:00",
      dataRefreshRate: "10s",
      mosfetStatus: "Active",
      softwareVersion: "2.1.1",
      batteryStatus: 60,
      last_update_date: "2025-06-09T08:00:00Z",
    },

    {
      id: 301,
      storeId: 3,
      country: "Germany",
      city: "Berlin",
      token: "ESP-BER-001",
      allDayWork: false,
      awakeTime: "10:00",
      sleepTime: "20:00",
      screenSize: "130cm",
      productNameFontSize: 14,
      productPriceFontSizeBeforeDiscount: 14,
      productPriceFontSizeAfterDiscount: 14,
      productBarcodeFontSize: 14,
      productBarcodeNumbersFontSize: 14,
      dataRefreshRate: "10s",
      mosfetStatus: "Active",
      softwareVersion: "2.0.8",
      batteryStatus: 50,
      last_update_date: "2025-05-15T23:00:00Z",
    },
    {
      id: 302,
      storeId: 3,
      country: "Germany",
      city: "Berlin",
      token: "ESP-BER-002",
      allDayWork: false,
      awakeTime: "10:00",
      sleepTime: "20:00",
      screenSize: "110cm",
      productNameFontSize: 12,
      productPriceFontSizeBeforeDiscount: 12,
      productPriceFontSizeAfterDiscount: 12,
      productBarcodeFontSize: 12,
      productBarcodeNumbersFontSize: 12,
      dataRefreshRate: "10s",
      mosfetStatus: "Active",
      softwareVersion: "2.0.7",
      batteryStatus: 30,
      last_update_date: "2025-05-14T15:00:00Z",
    },
    {
      id: 303,
      storeId: 3,
      country: "Germany",
      city: "Berlin",
      token: "ESP-BER-003",
      allDayWork: true,
      screenSize: "80cm",
      productNameFontSize: 10,
      productPriceFontSizeBeforeDiscount: 10,
      productPriceFontSizeAfterDiscount: 10,
      productBarcodeFontSize: 10,
      productBarcodeNumbersFontSize: 10,
      awakeTime: "00:00",
      sleepTime: "00:00",
      dataRefreshRate: "7s",
      mosfetStatus: "Inactive",
      softwareVersion: "2.0.9",
      batteryStatus: 25,
      last_update_date: "2025-06-13T05:00:00Z",
    },

    {
      id: 401,
      storeId: 4,
      country: "Poland",
      city: "Warsaw",
      token: "ESP-WAW-001",
      allDayWork: false,
      awakeTime: "08:00",
      sleepTime: "20:00",
      screenSize: "130cm",
      productNameFontSize: 15,
      productPriceFontSizeBeforeDiscount: 15,
      productPriceFontSizeAfterDiscount: 15,
      productBarcodeFontSize: 15,
      productBarcodeNumbersFontSize: 15,
      dataRefreshRate: "10s",
      mosfetStatus: "Active",
      softwareVersion: "2.1.0",
      batteryStatus: 70,
      last_update_date: "2025-06-12T22:00:00Z",
    },
    {
      id: 402,
      storeId: 4,
      country: "Poland",
      city: "Warsaw",
      token: "ESP-WAW-002",
      allDayWork: false,
      awakeTime: "08:00",
      sleepTime: "20:00",
      screenSize: "110cm",
      productNameFontSize: 14,
      productPriceFontSizeBeforeDiscount: 14,
      productPriceFontSizeAfterDiscount: 14,
      productBarcodeFontSize: 14,
      productBarcodeNumbersFontSize: 14,
      dataRefreshRate: "10s",
      mosfetStatus: "Inactive",
      softwareVersion: "2.1.0",
      batteryStatus: 20,
      last_update_date: "2025-06-12T21:00:00Z",
    },
    {
      id: 403,
      storeId: 4,
      country: "Poland",
      city: "Warsaw",
      token: "ESP-WAW-003",
      allDayWork: false,
      awakeTime: "08:00",
      sleepTime: "20:00",
      screenSize: "80cm",
      productNameFontSize: 12,
      productPriceFontSizeBeforeDiscount: 12,
      productPriceFontSizeAfterDiscount: 12,
      productBarcodeFontSize: 12,
      productBarcodeNumbersFontSize: 12,
      dataRefreshRate: "10s",
      mosfetStatus: "Active",
      softwareVersion: "2.0.9",
      batteryStatus: 45,
      last_update_date: "2025-06-11T19:00:00Z",
    },

    {
      id: 501,
      storeId: 5,
      country: "Turkey",
      city: "Ankara",
      token: "ESP-ANK-001",
      allDayWork: true,
      screenSize: "130cm",
      productNameFontSize: 14,
      productPriceFontSizeBeforeDiscount: 14,
      productPriceFontSizeAfterDiscount: 14,
      productBarcodeFontSize: 14,
      productBarcodeNumbersFontSize: 14,
      awakeTime: "00:00",
      sleepTime: "00:00",
      dataRefreshRate: "10s",
      mosfetStatus: "Active",
      softwareVersion: "2.1.0",
      batteryStatus: 88,
      last_update_date: "2025-06-05T11:00:00Z",
    },
    {
      id: 502,
      storeId: 5,
      country: "Turkey",
      city: "Ankara",
      token: "ESP-ANK-002",
      allDayWork: false,
      awakeTime: "09:00",
      sleepTime: "21:00",
      screenSize: "110cm",
      productNameFontSize: 13,
      productPriceFontSizeBeforeDiscount: 13,
      productPriceFontSizeAfterDiscount: 13,
      productBarcodeFontSize: 13,
      productBarcodeNumbersFontSize: 13,
      dataRefreshRate: "8s",
      mosfetStatus: "Inactive",
      softwareVersion: "2.0.7",
      batteryStatus: 22,
      last_update_date: "2025-06-04T15:00:00Z",
    },
    {
      id: 503,
      storeId: 5,
      country: "Turkey",
      city: "Ankara",
      token: "ESP-ANK-003",
      allDayWork: false,
      awakeTime: "09:00",
      sleepTime: "21:00",
      screenSize: "80cm",
      productNameFontSize: 11,
      productPriceFontSizeBeforeDiscount: 11,
      productPriceFontSizeAfterDiscount: 11,
      productBarcodeFontSize: 11,
      productBarcodeNumbersFontSize: 11,
      dataRefreshRate: "6s",
      mosfetStatus: "Active",
      softwareVersion: "2.0.6",
      batteryStatus: 55,
      last_update_date: "2025-06-03T10:00:00Z",
    },

    {
      id: 601,
      storeId: 6,
      country: "USA",
      city: "Los Angeles",
      token: "ESP-LA-001",
      allDayWork: true,
      screenSize: "130cm",
      productNameFontSize: 16,
      productPriceFontSizeBeforeDiscount: 16,
      productPriceFontSizeAfterDiscount: 16,
      productBarcodeFontSize: 16,
      productBarcodeNumbersFontSize: 16,
      awakeTime: "00:00",
      sleepTime: "00:00",
      dataRefreshRate: "10s",
      mosfetStatus: "Active",
      softwareVersion: "2.1.0",
      batteryStatus: 95,
      last_update_date: "2025-06-13T18:00:00Z",
    },
    {
      id: 602,
      storeId: 6,
      country: "USA",
      city: "Los Angeles",
      token: "ESP-LA-002",
      allDayWork: true,
      screenSize: "110cm",
      productNameFontSize: 15,
      productPriceFontSizeBeforeDiscount: 15,
      productPriceFontSizeAfterDiscount: 15,
      productBarcodeFontSize: 15,
      productBarcodeNumbersFontSize: 15,
      awakeTime: "00:00",
      sleepTime: "00:00",
      dataRefreshRate: "10s",
      mosfetStatus: "Active",
      softwareVersion: "2.1.0",
      batteryStatus: 80,
      last_update_date: "2025-06-12T12:00:00Z",
    },
    {
      id: 603,
      storeId: 6,
      country: "USA",
      city: "Los Angeles",
      token: "ESP-LA-003",
      allDayWork: true,
      screenSize: "80cm",
      productNameFontSize: 14,
      productPriceFontSizeBeforeDiscount: 14,
      productPriceFontSizeAfterDiscount: 14,
      productBarcodeFontSize: 14,
      productBarcodeNumbersFontSize: 14,
      awakeTime: "00:00",
      sleepTime: "00:00",
      dataRefreshRate: "10s",
      mosfetStatus: "Active",
      softwareVersion: "2.0.9",
      batteryStatus: 70,
      last_update_date: "2025-06-11T10:00:00Z",
    },

    {
      id: 701,
      storeId: 7,
      country: "Poland",
      city: "Krakow",
      token: "ESP-KRA-001",
      allDayWork: false,
      awakeTime: "09:00",
      sleepTime: "17:00",
      screenSize: "130cm",
      productNameFontSize: 14,
      productPriceFontSizeBeforeDiscount: 14,
      productPriceFontSizeAfterDiscount: 14,
      productBarcodeFontSize: 14,
      productBarcodeNumbersFontSize: 14,
      dataRefreshRate: "10s",
      mosfetStatus: "Active",
      softwareVersion: "1.0.0",
      batteryStatus: 65,
      last_update_date: "2024-12-30T10:00:00Z",
    },
  ]);
  const [selectedStoreForEdit, setSelectedStoreForEdit] = useState(null);
  const [selectedStoreForLogs, setSelectedStoreForLogs] = useState(null);

  // Step 1 Form Alanları
  const [storeForm, setStoreForm] = useState({
    country: "",
    city: "",
    storeName: "",
    addBranch: false,
    branchName: "",
    address: "",
    allDayOpen: false,
    openingHour: "09:00",
    closingHour: "18:00",
    ownerName: "",
    ownerSurname: "",
    installerName: "",
    installerSurname: "",
  });
  const [citiesOptions, setCitiesOptions] = useState([]);
  const [countryOptions] = useState([
    { value: "Poland", label: "Poland" },
    { value: "Azerbaijan", label: "Azerbaijan" },
    { value: "USA", label: "USA" },
    { value: "Turkey", label: "Turkey" },
    { value: "Germany", label: "Germany" },
  ]);

  // Step 2 Form Alanları
  const [serverToken, setServerToken] = useState("");
  const [serverConnectionStatus, setServerConnectionStatus] = useState("");

  // Step 3 Form Alanları
  const [esp32Token, setEsp32Token] = useState("");

  // Step 4 Form Alanları
  const [currentInstallingDevice, setCurrentInstallingDevice] = useState(null);
  const [bluetoothConnectedDevice, setBluetoothConnectedDevice] =
    useState(null);
  const [deviceForm, setDeviceForm] = useState({
    id: 1,
    country: "",
    city: "",
    token: "",
    allDayWork: false,
    awakeTime: "", // Removed default
    sleepTime: "", // Removed default
    productNameFontSize: 14, // Set default to 14
    productPriceFontSizeBeforeDiscount: 14, // Set default to 14
    productPriceFontSizeAfterDiscount: 14, // Set default to 14
    productBarcodeFontSize: 14, // Set default to 14
    productBarcodeNumbersFontSize: 14, // Set default to 14
    screenSize: "", // Removed default
  });
  const [isDeviceFormActive, setIsDeviceFormActive] = useState(false); // Default to false, user clicks "Add New Device"
  const [fontSizes] = useState(Array.from({ length: 33 }, (_, i) => i + 8));
  const [screenSizes] = useState(["130cm", "110cm", "80cm"]);
  const [deviceFormErrors, setDeviceFormErrors] = useState({});

  // Step 5 Form Alanları
  const [logs, setLogs] = useState([]);

  const lightColors = {
    headerSidebarBg: "#212B36",
    logoPrimaryBlue: "#00CFFF",
    logoSecondaryBlue: "#007BFF",
    pureWhite: "#FFFFFF",
    lightGrayBg: "#F0F2F5",
    darkText: "#1F2937",
    mediumGrayText: "#6B7280",
    whiteText: "#FFFFFF",
    successGreen: "#28A745",
    warningOrange: "#FFC107",
    errorRed: "#DC3545",
    progressBarBorder: "#D1D5DB",
    progressBarLine: "#D1D5DB",
    progressBarActive: "#28A745",
    nextButtonBg: "#28A745",
    prevButtonBg: "#B0B0B0",
  };
  const darkColors = {
    headerSidebarBg: "#1A202C",
    logoPrimaryBlue: "#00CFFF",
    logoSecondaryBlue: "#007BFF",
    pureWhite: "#2D3748",
    lightGrayBg: "#1A202C",
    darkText: "#E2E8F0",
    mediumGrayText: "#A0AEC0",
    whiteText: "#FFFFFF",
    successGreen: "#48BB78",
    warningOrange: "#ECC94B",
    errorRed: "#FC8181",
    progressBarBorder: "#4B5563",
    progressBarLine: "#4B5563",
    progressBarActive: "#48BB78",
    nextButtonBg: "#48BB78",
    prevButtonBg: "#6B7280",
  };
  const currentColors = isDarkMode ? darkColors : lightColors;

  const appTranslations = React.useMemo(
    () => ({
      en: {
        dashboard: {
          title: "Dashboard",
          welcomeText: "Welcome to EilSense.io Management Panel!",
          instructionText:
            "This area will summarize the overall status of your system, store performance, and critical notifications. Please select the relevant sections from the left menu to perform detailed operations.",
          note: "Note: The logo in the header bar above is a representation of your EilSense.io name and logo's visual tones. Your actual logo (a transparent PNG/SVG file) will appear exactly as you want it when integrated here.",
        },
        stores: {
          step2Title: "Server Token Generation",
          generateTokenButton: "Generate Token",
          copyToClipboardButton: "Copy to Clipboard",
          copiedMessage: "Copied to clipboard!",
          checkConnectionButton: "Check Connection",
          connectionSuccess: "Connection successful!",
          connectionError: "Connection failed: ",
          cannotProceed:
            "Cannot proceed to the next step without a successful connection.",
          step3Title: "ESP32 Token Generation",

          // Step 5
          step5Title: "Complete Installation",
          getLogsButton: "Get Logs",
          logsServerConnection: "Connection established with Server.",
          logsDeviceStatus:
            "Device ID: {id}, Connection Status: {status}, Refresh Rate: {refreshRate}, Battery Status: {batteryStatus}",
          completeInstallationButton: "Complete Installation",
          confirmCompletionTitle: "Confirm Installation",
          confirmCompletionMessage:
            "Are you sure you want to finish the installation?",
          yesButton: "Yes",
          noButton: "No",
          title: "Stores & Branches",
          createStoreTitle: "Create New Store",
          createStoreDesc: "Add a new store or branch to the system.",
          createStoreAction: "Create New Store action triggered!",
          editStoreTitle: "Edit Store Information",
          editStoreDesc: "Update details of existing stores or branches.",
          editStoreAction:
            "Edit Store Information page loaded. You can select a store from the table to edit.",
          deleteStoreTitle: "Delete Store",
          deleteStoreDesc: "Remove a store or branch from the system.",
          deleteStoreAction:
            "This action will delete a store. Please select a store from the table and confirm deletion.",
          viewLogsTitle: "View Logs",
          viewLogsDesc: "Access logs related to store operations.",
          viewLogsAction:
            "This action will display logs for a selected store. Please select a store from the table.",
          storeListTitle: "Stores",
          filterBy: "Filter by:",
          city: "City",
          cityPlaceholder: "Enter city",
          country: "Country",
          countryPlaceholder: "Enter country",
          openingHour: "Opening Hour",
          closingHour: "Closing Hour",
          selectHour: "Select Hour",
          allDayOpen: "All Day Open (24/7)",
          resetFilters: "Reset Filters",
          nameHeader: "Store Name",
          countryHeader: "Country",
          cityHeader: "City",
          branchHeader: "Branch",
          addressHeader: "Address",
          statusHeader: "Status",
          tokenHeader: "Server Token",
          workingHoursHeader: "Working Hours",
          createdAtHeader: "Created At",
          noStoresFound: "No stores found matching your criteria.",
          futureFeatures:
            "Upcoming: Store listing, adding, and deleting forms will be placed here.",
          storeDetailsTitle: "Store Details",
          dialogClose: "Close",
          typeToFilter: "Type to filter or select",
          noSuggestions: "No suggestions",
          registrationSuccess: "Store registered successfully! Server Token: ",
          registrationError: "Error registering store: ",
          editStoreInfoTitle: "Edit Store Details",
          editStoreDetailsStep1Title: "Store Information",
          editStoreDetailsStep2Title: "Device Information",
          countryLabel: "Country",
          cityLabel: "City",
          storeNameLabel: "Store Name",
          addBranchLabel: "Add Branch",
          branchNameLabel: "Branch Name",
          storeBranchAddressLabel: "Store/Branch Address",
          allDayOpenLabel: "All Day Open (24/7)",
          openingHourLabel: "Opening Hour",
          closingHourLabel: "Closing Hour",
          ownerNameLabel: "Owner Name",
          ownerSurnameLabel: "Owner Surname",
          installerNameLabel: "Installer Name",
          installerSurnameLabel: "Installer Surname",
          nextButton: "Next",
          previousButton: "Previous",
          requiredFieldWarning: "This field cannot be left blank.",
          installedDevicesTitle: "Installed Devices",
          editButton: "Edit",
          currentInstallationWarning:
            "A device is currently being edited. Please save or cancel the current operation.",
          bluetoothConnectButton: "Connect via Bluetooth",
          bluetoothNoDeviceSelected: "Please connect to an ESP32 device first.",
          idLabel: "ID",
          tokenLabel: "Token",
          allDayWorkLabel: "All Day Work",
          awakeTimeLabel: "Awake Time",
          sleepTimeLabel: "Sleep Time",
          productNameFontSizeLabel: "Product Name Font-Size",
          productPriceFontSizeBeforeDiscountLabel:
            "Product Price Font-Size (Before Discount)",
          productPriceFontSizeAfterDiscountLabel:
            "Product Price Font-Size (After Discount)",
          productBarcodeFontSizeLabel: "Product Barcode Font-Size",
          productBarcodeNumbersFontSizeLabel:
            "Product Barcode Numbers Font-Size",
          screenSizeLabel: "Screen Size",
          removeDeviceButton: "Remove This Device",
          saveButton: "Save",
          addNewDeviceButton: "Add New Device",
          deviceIdExists:
            "This ID is already assigned to another device. Please choose a different ID.",
          invalidID: "ID must be a number.",
          saveChangesButton: "Save All Changes",
          backToStoreList: "Back to Store List",
          confirmSaveTitle: "Confirm Save",
          confirmSaveMessage: "Are you sure you want to save all changes?",
          deleteButton: "Delete",
          confirmDeleteTitle: "Confirm Deletion",
          confirmDeleteMessage: "Are you sure you want to delete the store",
          deleteSuccess: "deleted successfully!",
          deleteConfirmationPrompt:
            "Please type the store name to confirm deletion:",
          deleteConfirmationPlaceholder: "Type store name here",
          deleteConfirmationMismatch:
            "The typed store name does not match. Deletion cancelled.",
          logDetailsTitle: "Store Log Details",
          backToLogsList: "Back to Store List",
          noStoreSelectedForLogs:
            "No store selected. Please select a store from the list.",
          serverLogsTitle: "Server Logs",
          serverLogsDesc: "View detailed server activity and status.",
          esp32LogsTitle: "ESP32 Logs",
          esp32LogsDesc: "View detailed logs from connected ESP32 devices.",
          comingSoon: "Coming Soon",
          backToStoreLogDetails: "Back to Log Details",
          serverSoftwareVersion: "Software Version",
          lastUpdateDate: "Last Update Date",
          connectedEsp32Count: "Number of Connected ESP32s",
          serverToken: "Server Token",
          storeName: "Store Name",
          registeredByName: "Registered By",
          notAvailable: "N/A",
          esp32LogId: "ID",
          dataRefreshRate: "Data Refresh Rate",
          mosfetStatus: "Mosfet Status",
          softwareVersion: "Software Version",
          batteryStatus: "Battery Status",
          sleepTime: "Sleep Time",
          awakeTime: "Awake Time",
          noEsp32DevicesFound: "No ESP32 devices found for this store.",
          logDate: "Log Date",
          allVersions: "All Versions",
          allBatteryLevels: "All Battery Levels",
          batteryLessThan25: "<25%",
          battery25To50: "25% - 50%",
          batteryGreaterThan50: ">50%",
          newInstallationTitle: "New Store Installation",
          newInstallationPlaceholderText:
            "This page is currently under construction. Please check back later for the full installation wizard.",
        },
        firmware: {
          title: "Firmware Updates",
          introText: "This section is where you manage firmware updates.",
          instructionText:
            "You can distribute new software to devices from here.",
          futureFeatures:
            "Upcoming: Features to view current firmware versions and distribute new versions will be added.",
        },
        users: {
          title: "Users / Roles",
          introText:
            "This section is where you manage user accounts and roles.",
          instructionText:
            "You can add new users and define their permissions.",
          futureFeatures:
            "Upcoming: User listing, adding, editing, and deleting features will be added.",
        },
        menu: {
          dashboard: "Dashboard",
          stores: "Stores & Branches",
          newInstallation: "New Installation",
          firmware: "Firmware Updates",
          users: "Users / Roles",
        },
        profile: {
          userName: "John Doe",
        },
        footer: {
          rights: "All Rights Reserved.",
          address: "Example St. No: 123, Example City, Country.",
          email: "Email:",
          phone: "Phone:",
          privacy: "Privacy Policy",
          terms: "Terms of Use",
        },
      },
    }),
    []
  );
  const navItems = [
    { name: appTranslations.en.menu.dashboard, icon: Home, route: "/" },
    { name: appTranslations.en.menu.stores, icon: Store, route: "/stores" },
    {
      name: appTranslations.en.menu.newInstallation,
      icon: PlusCircle,
      route: "/new-installation",
    },
    {
      name: appTranslations.en.menu.firmware,
      icon: Settings,
      route: "/firmware",
    },
    { name: appTranslations.en.menu.users, icon: Users, route: "/users" },
  ];
  const logoPlaceholderUrl = `https://placehold.co/180x40/${currentColors.headerSidebarBg.substring(
    1
  )}/${currentColors.logoPrimaryBlue.substring(1)}?font=inter&text=EilSense.io`;
  const toggleTheme = () => {
    setIsDarkMode((prevMode) => !prevMode);
  };
  const generateTimeOptions = () => {
    const hours = [];
    for (let h = 0; h < 24; h++) {
      for (let m = 0; m < 60; m += 30) {
        const hour = h.toString().padStart(2, "0");
        const minute = m.toString().padStart(2, "0");
        // Düzeltilmiş satır
        hours.push(`${hour}:${minute}`);
      }
    }
    return hours;
  };
  const timeOptions = generateTimeOptions();

  // Hata mesajlarını göstermek için durum
  const [formErrors, setFormErrors] = useState({});

  // Step 2: Server Token Generation
  const handleGenerateServerToken = () => {
    const token =
      Math.random().toString(36).substring(2, 15) +
      Math.random().toString(36).substring(2, 15);
    setServerToken(token);
    setServerConnectionStatus("");
  };

  const handleCheckConnection = async () => {
    if (!serverToken) {
      setServerConnectionStatus(
        appTranslations.en.stores.connectionError + "Token is empty."
      );
      return;
    }
    try {
      setServerConnectionStatus(appTranslations.en.stores.connectionSuccess);
    } catch (error) {
      setServerConnectionStatus(
        appTranslations.en.stores.connectionError + error.message
      );
    }
  };

  // Step 3: ESP32 Token Generation
  const handleGenerateEsp32Token = useCallback(() => {
    const token =
      "ESP-" + Math.random().toString(36).substring(2, 8).toUpperCase();
    setEsp32Token(token);
    setDeviceForm((prev) => ({ ...prev, token: token }));
  }, [setEsp32Token, setDeviceForm]);

  // Step 4: ESP32 Installation
  const handleBluetoothConnect = useCallback(async () => {
    if (currentInstallingDevice) {
      setDialogTitle("Installation in Progress");
      setDialogMessage(appTranslations.en.stores.currentInstallationWarning);
      setDialogType("alert");
      setDialogCallback(() => () => setShowDialog(false));
      setShowDialog(true);
      return;
    }

    try {
      setBluetoothConnectedDevice({ name: "ESP32_Device_123" });
      setIsDeviceFormActive(true);
      setDeviceForm((prev) => ({
        ...prev,
        id:
          installedDevices.length > 0
            ? Math.max(...installedDevices.map((d) => d.id)) + 1
            : 1,
        country: storeForm.country,
        city: storeForm.city,
        token: esp32Token,
        allDayWork: storeForm.allDayOpen,
      }));
      setCurrentInstallingDevice(null);
      setDeviceFormErrors({});
    } catch (error) {
      console.error("Bluetooth connection error:", error);
      setDialogTitle("Bluetooth Connection Error");
      setDialogMessage("Bluetooth connection error: " + error.message);
      setDialogType("alert");
      setDialogCallback(() => () => setShowDialog(false));
      setShowDialog(true);
    }
  }, [
    currentInstallingDevice,
    setDialogTitle,
    setDialogMessage,
    setDialogType,
    setDialogCallback,
    appTranslations.en.stores.currentInstallationWarning,
    setBluetoothConnectedDevice,
    setIsDeviceFormActive,
    setDeviceForm,
    installedDevices,
    storeForm.country,
    storeForm.city,
    esp32Token,
    storeForm.allDayOpen,
    setCurrentInstallingDevice,
    setDeviceFormErrors,
  ]);

  const handleSaveDevice = useCallback(() => {
    let isValid = true;
    const newErrors = {};
    if (!bluetoothConnectedDevice && !currentInstallingDevice) {
      setDialogTitle("Device Connection Required");
      setDialogMessage(appTranslations.en.stores.bluetoothNoDeviceSelected);
      setDialogType("alert");
      setDialogCallback(() => () => setShowDialog(false));
      setShowDialog(true);
      return;
    }

    const requiredDeviceFields = ["screenSize"];
    if (!deviceForm.allDayWork) {
      requiredDeviceFields.push("awakeTime", "sleepTime");
    }

    for (const field of requiredDeviceFields) {
      if (!deviceForm[field]) {
        isValid = false;
        newErrors[field] = appTranslations.en.stores.requiredFieldWarning;
      }
    }

    const parsedId = parseInt(deviceForm.id);
    if (isNaN(parsedId)) {
      isValid = false;
      newErrors.id = appTranslations.en.stores.invalidID;
    } else if (
      installedDevices.some(
        (d) =>
          d.id === parsedId && d.id !== (currentInstallingDevice?.id || null)
      )
    ) {
      isValid = false;
      newErrors.id = appTranslations.en.stores.deviceIdExists;
    }
    setDeviceFormErrors(newErrors);

    if (!isValid) {
      const firstErrorField = Object.keys(newErrors)[0];
      if (firstErrorField) {
        document
          .getElementById(firstErrorField)
          ?.scrollIntoView({ behavior: "smooth", block: "center" });
      }
      return;
    }

    const newInstalledDevice = { ...deviceForm, id: parsedId };
    setInstalledDevices((prev) => {
      let updatedDevices = [...prev];
      if (currentInstallingDevice) {
        updatedDevices = updatedDevices.filter(
          (d) => d.id !== currentInstallingDevice.id
        );
      }
      updatedDevices.push(newInstalledDevice);
      return updatedDevices;
    });

    setIsDeviceFormActive(false);
    setCurrentInstallingDevice(null);
    setBluetoothConnectedDevice(null);
    setDeviceForm({
      id:
        installedDevices.length > 0
          ? Math.max(...installedDevices.map((d) => d.id)) + 1
          : 1,
      country: storeForm.country,
      city: storeForm.city,
      token: esp32Token,
      allDayWork: storeForm.allDayOpen,
      awakeTime: "",
      sleepTime: "",
      productNameFontSize: 14,
      productPriceFontSizeBeforeDiscount: 14,
      productPriceFontSizeAfterDiscount: 14,
      productBarcodeFontSize: 14,
      productBarcodeNumbersFontSize: 14,
      screenSize: "",
    });
    setDeviceFormErrors({});

    const installedDevicesSection = document.getElementById(
      "installed-devices-section"
    );
    if (installedDevicesSection) {
      installedDevicesSection.scrollIntoView({
        behavior: "smooth",
        block: "start",
      });
    }
  }, [
    // --- DÜZELTİLMİŞ BAĞIMLILIK DİZİSİ ---
    bluetoothConnectedDevice,
    currentInstallingDevice,
    setDialogTitle,
    setDialogMessage,
    setDialogType,
    setDialogCallback,
    appTranslations, // appTranslations objesinin tamamını eklemek daha güvenli
    deviceForm, // Hatanın ana sebebi: deviceForm nesnesinin tamamı eklenmeli
    installedDevices,
    setDeviceFormErrors,
    setInstalledDevices,
    setIsDeviceFormActive,
    setCurrentInstallingDevice,
    setBluetoothConnectedDevice,
    setDeviceForm,
    storeForm, // storeForm nesnesinin tamamını eklemek daha güvenli
    esp32Token,
  ]);

  const handleRemoveDevice = useCallback(
    (idToRemove) => {
      setInstalledDevices((prev) =>
        prev.filter((device) => device.id !== idToRemove)
      );
      setIsDeviceFormActive(false);
      setCurrentInstallingDevice(null);
      setBluetoothConnectedDevice(null);
      setDeviceForm({
        id:
          installedDevices.length > 0
            ? Math.max(...installedDevices.map((d) => d.id)) + 1
            : 1,
        country: storeForm.country,
        city: storeForm.city,
        token: esp32Token,
        allDayWork: storeForm.allDayOpen,
        awakeTime: "",
        sleepTime: "",
        productNameFontSize: 14,
        productPriceFontSizeBeforeDiscount: 14,
        productPriceFontSizeAfterDiscount: 14,
        productBarcodeFontSize: 14,
        productBarcodeNumbersFontSize: 14,
        screenSize: "",
      });
      setDeviceFormErrors({});

      const installedDevicesSection = document.getElementById(
        "installed-devices-section"
      );
      if (installedDevicesSection) {
        installedDevicesSection.scrollIntoView({
          behavior: "smooth",
          block: "start",
        });
      }
    },
    [
      setInstalledDevices,
      setIsDeviceFormActive,
      setCurrentInstallingDevice,
      setBluetoothConnectedDevice,
      setDeviceForm,
      installedDevices,
      storeForm.country,
      storeForm.city,
      esp32Token,
      storeForm.allDayOpen,
      setDeviceFormErrors,
    ]
  );

  const handleEditDevice = useCallback(
    (deviceToEdit) => {
      if (isDeviceFormActive) {
        setDialogTitle("Installation in Progress");
        setDialogMessage(appTranslations.en.stores.currentInstallationWarning);
        setDialogType("alert");
        setDialogCallback(() => () => setShowDialog(false));
        setShowDialog(true);
        return;
      }
      setDeviceForm({ ...deviceToEdit });
      setIsDeviceFormActive(true);
      setBluetoothConnectedDevice({ name: "ESP32" });
      setCurrentInstallingDevice(deviceToEdit);
      setDeviceFormErrors({});
      const newDeviceFormSection = document.getElementById(
        "new-device-form-section"
      );
      if (newDeviceFormSection) {
        newDeviceFormSection.scrollIntoView({
          behavior: "smooth",
          block: "start",
        });
      }
    },
    [
      isDeviceFormActive,
      setDialogTitle,
      setDialogMessage,
      setDialogType,
      setDialogCallback,
      appTranslations.en.stores.currentInstallationWarning,
      setDeviceForm,
      setIsDeviceFormActive,
      setBluetoothConnectedDevice,
      setCurrentInstallingDevice,
      setDeviceFormErrors,
    ]
  );

  const handleAddNewDevice = useCallback(() => {
    if (isDeviceFormActive) {
      setDialogTitle("Installation in Progress");
      setDialogMessage(appTranslations.en.stores.currentInstallationWarning);
      setDialogType("alert");
      setDialogCallback(() => () => setShowDialog(false));
      setShowDialog(true);
      return;
    }
    setIsDeviceFormActive(true);
    setBluetoothConnectedDevice(null);
    setDeviceForm({
      id:
        installedDevices.length > 0
          ? Math.max(...installedDevices.map((d) => d.id)) + 1
          : 1,
      country: storeForm.country,
      city: storeForm.city,
      token: esp32Token,
      allDayWork: storeForm.allDayOpen,
      awakeTime: "",
      sleepTime: "",
      productNameFontSize: 14,
      productPriceFontSizeBeforeDiscount: 14,
      productPriceFontSizeAfterDiscount: 14,
      productBarcodeFontSize: 14,
      productBarcodeNumbersFontSize: 14,
      screenSize: "",
    });
    setCurrentInstallingDevice(null);
    setDeviceFormErrors({});
    const newDeviceFormSection = document.getElementById(
      "new-device-form-section"
    );
    if (newDeviceFormSection) {
      newDeviceFormSection.scrollIntoView({
        behavior: "smooth",
        block: "start",
      });
    }
  }, [
    isDeviceFormActive,
    setDialogTitle,
    setDialogMessage,
    setDialogType,
    setDialogCallback,
    appTranslations.en.stores.currentInstallationWarning,
    setIsDeviceFormActive,
    setBluetoothConnectedDevice,
    setDeviceForm,
    installedDevices,
    storeForm.country,
    storeForm.city,
    esp32Token,
    storeForm.allDayOpen,
    setCurrentInstallingDevice,
    setDeviceFormErrors,
  ]);

  // Step 5: Complete Installation
  const handleGetLogs = useCallback(async () => {
    const mockLogs = [
      { id: 1, status: "Connected", refreshRate: "60Hz", batteryStatus: "85%" },
      {
        id: 2,
        status: "Disconnected",
        refreshRate: "0Hz",
        batteryStatus: "10%",
      },
      { id: 3, status: "Connected", refreshRate: "50Hz", batteryStatus: "60%" },
    ];
    setLogs(mockLogs);
  }, [setLogs]);

  const handleCompleteInstallation = useCallback(() => {
    setDialogTitle(appTranslations.en.stores.confirmCompletionTitle);
    setDialogMessage(appTranslations.en.stores.confirmCompletionMessage);
    setDialogType("confirm");
    setDialogCallback(() => () => {
      // Callback for 'Yes'
      console.log("--- Installation Complete ---");
      console.log("Store Data:", storeForm);
      console.log("Server Token:", serverToken);
      console.log("ESP32 Token:", esp32Token);
      console.log("Installed Devices:", installedDevices);
      console.log("Logs (Mock):", logs);
      console.log("----------------------------");

      // Register the new store in the stores array
      setStores((prevStores) => [
        ...prevStores,
        {
          id:
            prevStores.length > 0
              ? Math.max(...prevStores.map((s) => s.id)) + 1
              : 1,
          name: storeForm.storeName,
          country: storeForm.country,
          city: storeForm.city,
          branch: storeForm.addBranch ? storeForm.branchName : "",
          address: storeForm.address,
          server_token: serverToken,
          status: "active", // Default status for new stores
          created_at: new Date().toISOString(),
          working_hours: storeForm.allDayOpen
            ? "24/7"
            : `${storeForm.openingHour}-${storeForm.closingHour}`,
          allDayOpen: storeForm.allDayOpen,
          openingHour: storeForm.openingHour,
          closingHour: storeForm.closingHour,
          ownerName: storeForm.ownerName,
          ownerSurname: storeForm.ownerSurname,
          installerName: storeForm.installerName,
          installerSurname: storeForm.installerSurname,
          addBranch: storeForm.addBranch,
          server_software_version: "1.0.0", // Default
          last_update_date: new Date().toISOString(),
          num_esp32_connected: installedDevices.length,
        },
      ]);

      // Update installed devices to include storeId
      setInstalledDevices((prevDevices) =>
        prevDevices.map((device) => ({
          ...device,
          storeId:
            stores.length > 0 ? Math.max(...stores.map((s) => s.id)) + 1 : 1, // Assign the new store's ID
          last_update_date: new Date().toISOString(),
          dataRefreshRate: device.dataRefreshRate || "10s",
          mosfetStatus: device.mosfetStatus || "Active",
          softwareVersion: device.softwareVersion || "1.0.0",
          batteryStatus: device.batteryStatus || 100, // Default to 100%
        }))
      );

      // Reset all form states
      setStoreForm({
        country: "",
        city: "",
        storeName: "",
        addBranch: false,
        branchName: "",
        address: "",
        allDayOpen: false,
        openingHour: "09:00",
        closingHour: "18:00",
        ownerName: "",
        ownerSurname: "",
        installerName: "",
        installerSurname: "",
      });
      setServerToken("");
      setServerConnectionStatus("");
      setEsp32Token("");
      setInstalledDevices([]);
      setCurrentInstallingDevice(null);
      setBluetoothConnectedDevice(null);
      setDeviceForm({
        id: 1,
        country: "",
        city: "",
        token: "",
        allDayWork: false,
        awakeTime: "",
        sleepTime: "",
        productNameFontSize: 14,
        productPriceFontSizeBeforeDiscount: 14,
        productPriceFontSizeAfterDiscount: 14,
        productBarcodeFontSize: 14,
        productBarcodeNumbersFontSize: 14,
        screenSize: "",
      });
      setIsDeviceFormActive(false); // Reset form activity
      setLogs([]);
      // setCurrentStep(1); // Keep on the current route
      // setActiveRoute("/new-installation"); // Keep on the current route
      setShowDialog(false);
    });
    setShowDialog(true);
  }, [
    appTranslations.en.stores.confirmCompletionTitle,
    appTranslations.en.stores.confirmCompletionMessage,
    setDialogTitle,
    setDialogMessage,
    setDialogType,
    setDialogCallback,
    storeForm,
    serverToken,
    esp32Token,
    installedDevices,
    logs,
    setStores,
    setStoreForm,
    setServerToken,
    setServerConnectionStatus,
    setEsp32Token,
    setInstalledDevices,
    setCurrentInstallingDevice,
    setBluetoothConnectedDevice,
    setDeviceForm,
    setIsDeviceFormActive,
    setLogs,
    stores,
  ]);

  const renderMainContent = () => {
    const currentTranslations = appTranslations.en;
    if (activeRoute === "/") {
      return (
        <div
          className="p-8 rounded-lg shadow-md"
          style={{
            backgroundColor: currentColors.pureWhite,
            color: currentColors.darkText,
          }}>
          <h1
            className="text-3xl font-semibold mb-6"
            style={{ color: currentColors.darkText }}>
            {currentTranslations.dashboard.title}
          </h1>
          <p className="mb-4">{currentTranslations.dashboard.welcomeText}</p>
          <p className="mb-4">
            {currentTranslations.dashboard.instructionText}
          </p>
          <p
            className="text-sm italic"
            style={{ color: currentColors.mediumGrayText }}>
            {currentTranslations.dashboard.note}
          </p>
        </div>
      );
    } else if (activeRoute === "/stores") {
      return (
        <StoresPage
          colors={currentColors}
          translations={currentTranslations.stores}
          setShowDialog={setShowDialog}
          setDialogTitle={setDialogTitle}
          setDialogMessage={setDialogMessage}
          setDialogType={setDialogType}
          setDialogCallback={setDialogCallback}
          setActiveRoute={setActiveRoute}
        />
      );
    } else if (activeRoute === "/new-installation") {
      return (
        <NewInstallationPage
          colors={currentColors}
          translations={currentTranslations.stores}
          storeForm={storeForm}
          setStoreForm={setStoreForm}
          citiesOptions={citiesOptions}
          setCitiesOptions={setCitiesOptions}
          countryOptions={countryOptions}
          serverToken={serverToken}
          setServerToken={setServerToken}
          serverConnectionStatus={serverConnectionStatus}
          setServerConnectionStatus={setServerConnectionStatus}
          esp32Token={esp32Token}
          setEsp32Token={setEsp32Token}
          installedDevices={installedDevices}
          setInstalledDevices={setInstalledDevices}
          currentInstallingDevice={currentInstallingDevice}
          setCurrentInstallingDevice={setCurrentInstallingDevice}
          bluetoothConnectedDevice={bluetoothConnectedDevice}
          setBluetoothConnectedDevice={setBluetoothConnectedDevice}
          deviceForm={deviceForm}
          setDeviceForm={setDeviceForm}
          isDeviceFormActive={isDeviceFormActive}
          setIsDeviceFormActive={setIsDeviceFormActive}
          fontSizes={fontSizes}
          screenSizes={screenSizes}
          deviceFormErrors={deviceFormErrors}
          setDeviceFormErrors={setDeviceFormErrors}
          logs={logs}
          setLogs={setLogs}
          timeOptions={timeOptions}
          formErrors={formErrors}
          setFormErrors={setFormErrors}
          setShowDialog={setShowDialog}
          setDialogTitle={setDialogTitle}
          setDialogMessage={setDialogMessage}
          setDialogType={setDialogType}
          setDialogCallback={setDialogCallback}
          handleGenerateServerToken={handleGenerateServerToken}
          handleCheckConnection={handleCheckConnection}
          handleGenerateEsp32Token={handleGenerateEsp32Token}
          handleBluetoothConnect={handleBluetoothConnect}
          handleSaveDevice={handleSaveDevice}
          handleRemoveDevice={handleRemoveDevice}
          handleEditDevice={handleEditDevice}
          handleAddNewDevice={handleAddNewDevice}
          handleGetLogs={handleGetLogs}
          handleCompleteInstallation={handleCompleteInstallation}
        />
      );
    } else if (activeRoute === "/edit-store-details") {
      return (
        <EditStoreDetailsPage
          colors={currentColors}
          translations={currentTranslations.stores}
          setShowDialog={setShowDialog}
          setDialogTitle={setDialogTitle}
          setDialogMessage={setDialogMessage}
          setDialogType={setDialogType}
          setDialogCallback={setDialogCallback}
          setSelectedStoreForEdit={setSelectedStoreForEdit}
          setActiveRoute={setActiveRoute}
          stores={stores}
          setStores={setStores}
          installedDevices={installedDevices}
          setInstalledDevices={setInstalledDevices}
        />
      );
    } else if (activeRoute === "/edit-store-workflow" && selectedStoreForEdit) {
      return (
        <StoreEditingWorkflow
          selectedStore={selectedStoreForEdit}
          colors={currentColors}
          translations={currentTranslations.stores}
          setShowDialog={setShowDialog}
          setDialogTitle={setDialogTitle}
          setDialogMessage={setDialogMessage}
          setDialogType={setDialogType}
          setDialogCallback={setDialogCallback}
          installedDevices={installedDevices}
          setInstalledDevices={setInstalledDevices}
          fontSizes={fontSizes}
          screenSizes={screenSizes}
          timeOptions={timeOptions}
          setActiveRoute={setActiveRoute}
          setStores={setStores}
        />
      );
    } else if (activeRoute === "/delete-store") {
      return (
        <DeleteStorePage
          colors={currentColors}
          translations={currentTranslations.stores}
          setShowDialog={setShowDialog}
          setDialogTitle={setDialogTitle}
          setDialogMessage={setDialogMessage}
          setDialogType={setDialogType}
          setDialogCallback={setDialogCallback}
          stores={stores}
          setStores={setStores}
        />
      );
    } else if (activeRoute === "/view-logs") {
      return (
        <ViewLogsPage
          colors={currentColors}
          translations={currentTranslations.stores}
          stores={stores}
          setActiveRoute={setActiveRoute}
          setSelectedStoreForLogs={setSelectedStoreForLogs}
        />
      );
    } else if (activeRoute.startsWith("/store-log-details/")) {
      const storeId = parseInt(activeRoute.split("/").pop());
      const store =
        selectedStoreForLogs || stores.find((s) => s.id === storeId);
      return (
        <StoreLogDetailsPage
          colors={currentColors}
          translations={currentTranslations.stores}
          selectedStoreForLogs={store}
          setActiveRoute={setActiveRoute}
          installedDevices={installedDevices}
        />
      );
    } else if (activeRoute.startsWith("/server-logs/")) {
      const storeId = parseInt(activeRoute.split("/").pop());
      const store =
        selectedStoreForLogs || stores.find((s) => s.id === storeId);
      return (
        <ServerLogsPage
          colors={currentColors}
          translations={currentTranslations.stores}
          selectedStoreForLogs={store}
          setActiveRoute={setActiveRoute}
        />
      );
    } else if (activeRoute.startsWith("/esp32-logs/")) {
      const storeId = parseInt(activeRoute.split("/").pop());
      const store =
        selectedStoreForLogs || stores.find((s) => s.id === storeId);
      return (
        <ESP32LogsPage
          colors={currentColors}
          translations={currentTranslations.stores}
          selectedStoreForLogs={store}
          setActiveRoute={setActiveRoute}
          installedDevices={installedDevices}
        />
      );
    } else if (activeRoute === "/firmware") {
      return (
        <div
          className="p-8 rounded-lg shadow-md"
          style={{
            backgroundColor: currentColors.pureWhite,
            color: currentColors.darkText,
          }}>
          <h1
            className="text-3xl font-semibold mb-6"
            style={{ color: currentColors.darkText }}>
            {currentTranslations.firmware.title}
          </h1>
          <p className="mb-4">{currentTranslations.firmware.introText}</p>
          <p className="mb-4">{currentTranslations.firmware.instructionText}</p>
          <p className="mb-4">{currentTranslations.firmware.futureFeatures}</p>
        </div>
      );
    } else if (activeRoute === "/users") {
      return (
        <div
          className="p-8 rounded-lg shadow-md"
          style={{
            backgroundColor: currentColors.pureWhite,
            color: currentColors.darkText,
          }}>
          <h1
            className="text-3xl font-semibold mb-6"
            style={{ color: currentColors.darkText }}>
            {currentTranslations.users.title}
          </h1>
          <p className="mb-4">{currentTranslations.users.introText}</p>
          <p className="mb-4">{currentTranslations.users.instructionText}</p>
          <p className="mb-4">{currentTranslations.users.futureFeatures}</p>
        </div>
      );
    } else {
      return (
        <div
          className="p-8 rounded-lg shadow-md"
          style={{
            backgroundColor: currentColors.pureWhite,
            color: currentColors.darkText,
          }}>
          <h1
            className="text-3xl font-semibold mb-6"
            style={{ color: currentColors.darkText }}>
            {currentTranslations.dashboard.title}
          </h1>
          <p>{currentTranslations.dashboard.welcomeText}</p>
        </div>
      );
    }
  };

  return (
    <div
      className="min-h-screen flex flex-col"
      style={{ backgroundColor: currentColors.lightGrayBg }}>
      <header
        className="flex items-center p-4 shadow-md z-30 fixed w-full top-0 left-0"
        style={{ backgroundColor: currentColors.headerSidebarBg }}>
        <button
          onClick={() => setIsSidebarExpanded(!isSidebarExpanded)}
          className="text-white focus:outline-none p-2 rounded-full hover:bg-opacity-20 transition-colors duration-200 cursor-pointer">
          {isSidebarExpanded ? (
            <X size={24} style={{ color: currentColors.whiteText }} />
          ) : (
            <Menu size={24} style={{ color: currentColors.whiteText }} />
          )}{" "}
        </button>

        <div className="flex-grow flex justify-center">
          <img
            src={logoPlaceholderUrl}
            alt="EilSense.io Logo"
            className="h-10 w-auto rounded-md"
          />
        </div>

        <div className="flex items-center space-x-4">
          <button
            onClick={toggleTheme}
            className="relative text-white focus:outline-none p-2 rounded-full hover:bg-opacity-20 cursor-pointer">
            <Sun
              size={24}
              style={{ color: currentColors.whiteText }}
              className={`absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 transition-opacity duration-300 ease-in-out ${
                isDarkMode ? "opacity-100" : "opacity-0"
              }`}
            />
            <Moon
              size={24}
              style={{ color: currentColors.whiteText }}
              className={`absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 transition-opacity duration-300 ease-in-out ${
                isDarkMode ? "opacity-0" : "opacity-100"
              }`}
            />
          </button>
          <img
            src="https://placehold.co/40x40/c2c2c2/FFFFFF/png?text=JD"
            alt="Profile"
            className="w-10 h-10 rounded-full border-2 border-white"
          />
          <span
            className="font-medium hidden sm:block"
            style={{ color: currentColors.whiteText }}>
            {appTranslations.en.profile.userName}
          </span>
        </div>
      </header>

      <div className="flex flex-1" style={{ paddingTop: "64px" }}>
        <aside
          className={`fixed top-16 left-0 h-[calc(100vh-64px)] overflow-y-auto shadow-lg transition-all duration-300 ease-in-out z-20 flex flex-col`}
          style={{
            backgroundColor: currentColors.headerSidebarBg,
            width: isSidebarExpanded ? "250px" : "77px",
          }}>
          <nav className="flex-grow">
            <ul className="space-y-2 py-4">
              {navItems.map((item) => (
                <li key={item.route}>
                  <a
                    href="/"
                    onClick={(e) => {
                      e.preventDefault();
                      setActiveRoute(item.route);
                    }}
                    className={`flex items-center rounded-lg font-medium transition-colors duration-200 cursor-pointer
                      ${
                        isSidebarExpanded
                          ? "py-2 px-3"
                          : "py-2 px-2 justify-center"
                      }
                      ${activeRoute === item.route ? "mx-2" : ""}
                    `}
                    style={{
                      backgroundColor:
                        activeRoute === item.route
                          ? currentColors.logoPrimaryBlue
                          : "transparent",
                      color: currentColors.whiteText,
                    }}>
                    <item.icon
                      size={20}
                      style={{ color: currentColors.whiteText }}
                    />
                    <span
                      className={`ml-3 overflow-hidden whitespace-nowrap ${
                        !isSidebarExpanded && "hidden"
                      }`}>
                      {item.name}
                    </span>
                  </a>
                </li>
              ))}
            </ul>
          </nav>
          <div
            className={`w-full ${
              isSidebarExpanded ? "px-3 pb-4" : "pb-4 flex justify-center"
            }`}>
            <label htmlFor="language-select" className="sr-only">
              Dil Seç
            </label>
            <select
              id="language-select"
              value={language}
              onChange={(e) => setLanguage(e.target.value)}
              className={`rounded-md bg-gray-700 text-white border border-gray-600 focus:outline-none cursor-pointer
                ${
                  isSidebarExpanded
                    ? "w-full py-2 px-3 text-left"
                    : "w-16 py-2 text-center text-sm"
                }
              `}
              style={{
                backgroundColor: currentColors.headerSidebarBg,
                color: currentColors.whiteText,
                borderColor: currentColors.mediumGrayText,
              }}>
              <option value="en">{isSidebarExpanded ? "English" : "en"}</option>
              <option value="tr">{isSidebarExpanded ? "Türkçe" : "tr"}</option>
              <option value="ru">{isSidebarExpanded ? "Русский" : "ru"}</option>
              <option value="pl">{isSidebarExpanded ? "Polski" : "pl"}</option>
            </select>
          </div>
        </aside>
        <main
          className="flex-1 p-6 transition-all duration-300 ease-in-out overflow-x-hidden overflow-y-auto"
          style={{
            marginLeft: isSidebarExpanded ? "250px" : "77px",
            paddingTop: "24px",
            backgroundColor: currentColors.lightGrayBg,
            color: currentColors.darkText,
          }}>
          {renderMainContent()}
        </main>
      </div>

      <footer
        className="w-full p-6 text-center text-sm leading-relaxed"
        style={{
          backgroundColor: currentColors.headerSidebarBg,
          color: currentColors.whiteText,
        }}>
        <p className="mb-2">
          &copy;{new Date().getFullYear()} EilSense.io.{" "}
          {appTranslations.en.footer.rights}
        </p>
        <p className="mb-2">{appTranslations.en.footer.address}</p>
        <p className="mb-2">
          {appTranslations.en.footer.email} info@eilsense.io |{" "}
          {appTranslations.en.footer.phone} +90 555 123 45 67
        </p>
        <p>
          <a
            href="/privacy-policy"
            className="underline hover:text-gray-300 mx-2">
            {appTranslations.en.footer.privacy}
          </a>{" "}
          |
          <a
            href="/terms-of-use"
            className="underline hover:text-gray-300 mx-2">
            {appTranslations.en.footer.terms}
          </a>
        </p>
      </footer>

      {showDialog && (
        <CustomDialog
          title={dialogTitle}
          message={dialogMessage}
          type={dialogType}
          onConfirm={dialogCallback}
          onCancel={() => setShowDialog(false)}
          onClose={() => setShowDialog(false)}
          colors={currentColors}
          storeNameForConfirmation={
            dialogType === "confirm"
              ? dialogMessage.match(/'([^']+)'/)?.[1] || ""
              : ""
          }
          translations={appTranslations.en.stores}
        />
      )}
    </div>
  );
}

export default App;
