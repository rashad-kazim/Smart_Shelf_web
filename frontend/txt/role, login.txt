// App.js
import React, { useState, useRef, useMemo, useEffect, useCallback } from "react";
// Lucide React icons
import {
  Menu,
  X,
  Home,
  Store,
  PlusCircle,
  Settings,
  Users,
  Sun,
  Moon,
  CheckCircle,
  Eye,
  EyeOff,
  RotateCcw,
  ArrowLeft,
  Edit,
  Trash2,
  Camera,
  ChevronDown,
} from "lucide-react";

// Helper function for consistent date/time formatting (24-hour)
const formatDateTime = (dateString, translations) => {
  if (!dateString) return translations.notAvailable;
  const date = new Date(dateString);
  if (isNaN(date.getTime())) return translations.notAvailable;
  return date.toLocaleString('en-GB', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    hour12: false
  });
};

// Access Denied Component
function AccessDenied({ currentColors, translations, setShowDialog, setDialogTitle, setDialogMessage, setDialogType, setDialogCallback, goBack }) {
  const handleGoBack = () => {
    if (goBack) {
      goBack();
    } else {
      // Fallback if goBack prop is not provided
      setShowDialog(true);
      setDialogTitle("Navigation Error");
      setDialogMessage("Could not navigate back automatically.");
      setDialogType("alert");
      setDialogCallback(() => () => setShowDialog(false));
    }
  };

  return (
    <div
      className="p-8 rounded-lg shadow-md flex flex-col items-center justify-center text-center h-full min-h-[400px]"
      style={{ backgroundColor: currentColors.pureWhite, color: currentColors.errorRed }}
    >
      <X size={64} className="mb-4" />
      <h1 className="text-3xl font-semibold mb-4" style={{ color: currentColors.darkText }}>
        {translations.accessDeniedTitle}
      </h1>
      <p className="text-lg mb-6" style={{ color: currentColors.mediumGrayText }}>
        {translations.accessDeniedMessage}
      </p>
      <button
        onClick={handleGoBack}
        className="mt-6 px-6 py-3 rounded-md font-medium transition-colors duration-200 cursor-pointer"
        style={{ backgroundColor: currentColors.logoPrimaryBlue, color: currentColors.whiteText }}
      >
        {translations.goBackButton}
      </button>
    </div>
  );
}

// Login Page Component
function LoginPage({ currentColors, translations, onLoginSuccess, users, companyUsers }) {
  const [email, setEmail] = useState(() => localStorage.getItem('rememberedEmail') || "");
  const [password, setPassword] = useState(() => localStorage.getItem('rememberedPassword') || "");
  const [rememberMe, setRememberMe] = useState(() => localStorage.getItem('rememberMe') === 'true');
  const [error, setError] = useState("");
  const [showPassword, setShowPassword] = useState(false);

  useEffect(() => {
    if (rememberMe) {
      localStorage.setItem('rememberMe', 'true');
    } else {
      localStorage.removeItem('rememberMe');
    }
  }, [rememberMe]);


  const handleLogin = () => {
    setError("");
    // Admin Login
    if (email === "kresad555@gmail.com" && password === "Admin448.") {
      if (rememberMe) {
        localStorage.setItem('rememberedEmail', email);
        localStorage.setItem('rememberedPassword', password);
      } else {
        localStorage.removeItem('rememberedEmail');
        localStorage.removeItem('rememberedPassword');
      }
      onLoginSuccess({ email: email, role: "Admin", name: "Kresad", surname: "Developer", country: "Global", dob: "1990-01-01" });
      return;
    }

    // Supermarket User Login Attempt
    const supermarketUser = users.find(u => u.email === email && u.password === password);
    if (supermarketUser) {
      setError(translations.mobileOnlyAccess); // Use specific translation for mobile access
      return;
    }

    // Company User Login Attempt
    const companyUser = companyUsers.find(u => u.email === email && u.password === password);
    if (companyUser) {
      if (rememberMe) {
        localStorage.setItem('rememberedEmail', email);
        localStorage.setItem('rememberedPassword', password);
      } else {
        localStorage.removeItem('rememberedEmail');
        localStorage.removeItem('rememberedPassword');
      }
      onLoginSuccess({
        email: companyUser.email,
        role: companyUser.role,
        name: companyUser.name,
        surname: companyUser.surname,
        country: companyUser.country,
        dob: companyUser.dob,
        profilePicture: companyUser.profilePicture // Pass existing picture
      });
      return;
    }

    // General Invalid credentials
    setError(translations.loginError);
  };

  return (
    <div className="flex items-center justify-center min-h-screen" style={{ backgroundColor: currentColors.lightGrayBg }}>
      <div className="p-8 rounded-lg shadow-md w-full max-w-md" style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}>
        <h1 className="text-3xl font-semibold mb-6 text-center" style={{ color: currentColors.darkText }}>
          {translations.loginTitle}
        </h1>
        {error && <p className="text-red-500 text-center mb-4">{error}</p>}
        <div className="mb-4">
          <label htmlFor="email" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.mailLabel}
          </label>
          <input
            type="email"
            id="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="w-full p-2 rounded-md border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          />
        </div>
        <div className="mb-4 relative">
          <label htmlFor="password" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.passwordLabel}
          </label>
          <div className="flex items-center rounded-md border border-gray-300" style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}>
            <input
              type={showPassword ? "text" : "password"}
              id="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full p-2 focus:outline-none focus:ring-0 bg-transparent"
              style={{ color: currentColors.darkText }}
            />
            <span
              className="p-2 cursor-pointer"
              onClick={() => setShowPassword(!showPassword)}
              style={{ color: currentColors.mediumGrayText }}
            >
              {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}
            </span>
          </div>
        </div>
        <div className="mb-6 flex items-center">
          <input
            type="checkbox"
            id="rememberMe"
            checked={rememberMe}
            onChange={(e) => setRememberMe(e.target.checked)}
            className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            style={{ borderColor: currentColors.mediumGrayText }}
          />
          <label htmlFor="rememberMe" className="text-sm" style={{ color: currentColors.darkText }}>
            {translations.rememberMe}
          </label>
        </div>
        <button
          onClick={handleLogin}
          className="w-full py-2 px-4 rounded-md font-medium transition-colors duration-200 cursor-pointer"
          style={{ backgroundColor: currentColors.logoPrimaryBlue, color: currentColors.whiteText }}
        >
          {translations.loginButton}
        </button>
      </div>
    </div>
  );
}


// Placeholder for Stores & Branches Page (New)
function StoresPage({ currentColors, translations, profileUser, stores, setShowDialog, setDialogTitle, setDialogMessage, setDialogType, setDialogCallback }) {
  const isAdmin = profileUser?.role === "Admin";
  const isCountryChief = profileUser?.role === "Country Chief";
  const isAnalyst = profileUser?.role === "Analyst";

  const accessibleStores = useMemo(() => {
    if (isAdmin) {
      return stores;
    } else if (isCountryChief || isAnalyst) {
      return stores.filter(store => store.country === profileUser?.country);
    }
    return [];
  }, [stores, profileUser, isAdmin, isCountryChief, isAnalyst]);

  const handleEditStore = (storeId) => {
    setShowDialog(true);
    setDialogTitle(translations.comingSoon);
    setDialogMessage("Store editing functionality is coming soon!");
    setDialogType("alert");
    setDialogCallback(() => () => setShowDialog(false));
  };

  const handleDeleteStore = (storeId) => {
    setShowDialog(true);
    setDialogTitle(translations.comingSoon);
    setDialogMessage("Store deletion functionality is coming soon!");
    setDialogType("alert");
    setDialogCallback(() => () => setShowDialog(false));
  };


  return (
    <div className="p-8 rounded-lg shadow-md" style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}>
      <h1 className="text-3xl font-semibold mb-6" style={{ color: currentColors.darkText }}>
        {translations.title}
      </h1>
      <p className="mb-4" style={{ color: currentColors.mediumGrayText }}>
        {translations.storesPlaceholderText}
      </p>

      <div className="overflow-x-auto rounded-lg border" style={{ borderColor: currentColors.mediumGrayText }}>
        <table className="min-w-full divide-y divide-gray-200" style={{ borderColor: currentColors.mediumGrayText }}>
          <thead style={{ backgroundColor: currentColors.lightGrayBg }}>
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider" style={{ color: currentColors.mediumGrayText }}>
                {translations.storeNameHeader}
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider" style={{ color: currentColors.mediumGrayText }}>
                {translations.countryHeader}
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider" style={{ color: currentColors.mediumGrayText }}>
                {translations.cityHeader}
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider" style={{ color: currentColors.mediumGrayText }}>
                {translations.branchHeader}
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider" style={{ color: currentColors.mediumGrayText }}></th>
            </tr>
          </thead>
          <tbody style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}>
            {accessibleStores.length > 0 ? (
              accessibleStores.map((store) => (
                <tr key={store.id} className="border-t hover:bg-gray-50 transition-colors duration-150" style={{ borderColor: currentColors.lightGrayBg }}>
                  <td className="px-6 py-4 text-sm font-medium whitespace-nowrap">
                    {store.name}
                  </td>
                  <td className="px-6 py-4 text-sm whitespace-nowrap">
                    {store.country}
                  </td>
                  <td className="px-6 py-4 text-sm whitespace-nowrap">
                    {store.city}
                  </td>
                  <td className="px-6 py-4 text-sm whitespace-nowrap">
                    {store.branch || "-"}
                  </td>
                  <td className="px-6 py-4 text-sm text-right whitespace-nowrap">
                    <button
                      onClick={() => handleEditStore(store.id)}
                      className={`bg-blue-500 hover:bg-blue-600 text-white font-bold py-1.5 px-3 rounded-md transition-colors duration-200 mr-2
                      ${!(isAdmin || isAnalyst || isCountryChief) ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}
                      disabled={!(isAdmin || isAnalyst || isCountryChief)} // Admin, Analyst, and Country Chief can edit
                    >
                      {translations.editButton}
                    </button>
                    <button
                      onClick={() => handleDeleteStore(store.id)}
                      className={`bg-red-500 hover:bg-red-600 text-white font-bold py-1.5 px-3 rounded-md transition-colors duration-200
                      ${!(isAdmin || isCountryChief) ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}
                      disabled={!(isAdmin || isCountryChief)} // Admin and Country Chief can delete
                    >
                      {translations.deleteButton}
                    </button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan={5} className="px-6 py-4 whitespace-nowrap text-sm text-center" style={{ color: currentColors.mediumGrayText }}>
                  {translations.noStoresFound}
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}

// New Installation Component (Kept as it's a general installation, not specific to store management)
function NewInstallationPage({ currentColors, translations }) {
  return (
    <div className="p-8 rounded-lg shadow-md" style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}>
      <h1 className="text-3xl font-semibold mb-6" style={{ color: currentColors.darkText }}>
        {translations.newInstallationTitle}
      </h1>
      <p className="mb-4" style={{ color: currentColors.mediumGrayText }}>
        {translations.newInstallationPlaceholderText}
      </p>
    </div>
  );
}

// Users and Roles Main Page
function UsersAndRolesPage({ currentColors, translations, setActiveRoute, profileUser, setShowDialog, setDialogTitle, setDialogMessage, setDialogType, setDialogCallback }) {
  const isAdmin = profileUser?.role === "Admin";
  const isCountryChief = profileUser?.role === "Country Chief";
  const isAnalyst = profileUser?.role === "Analyst";
  const isEngineer = profileUser?.role === "Engineer";

  const cardData = [
    {
      title: translations.userForSupermarketTitle,
      description: translations.userForSupermarketDesc,
      icon: Users,
      route: "/users-supermarket",
      access: isAdmin || isCountryChief || isAnalyst || isEngineer, // Engineer can click this but will be limited inside
    },
    {
      title: translations.userForCompanyTitle,
      description: translations.userForCompanyDesc,
      icon: Users,
      route: "/users-company",
      access: isAdmin || isCountryChief,
    },
  ];

  return (
    <div className="p-8 rounded-lg shadow-md" style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}>
      <h1 className="text-3xl font-semibold mb-6" style={{ color: currentColors.darkText }}>
        {translations.usersRolesTitle}
      </h1>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {cardData.map((card, index) => ( // Render all cards
          <div
            key={index}
            className={`p-6 rounded-lg shadow-md flex flex-col items-center text-center transition-transform transform
              ${card.access ? 'hover:scale-105 cursor-pointer' : 'opacity-50 cursor-not-allowed'}
            `}
            style={{
              backgroundColor: currentColors.pureWhite,
              color: currentColors.darkText,
            }}
            onClick={card.access ? (() => setActiveRoute(card.route)) : () => { // Conditionally enable click
              setShowDialog(true);
              setDialogTitle(translations.accessDeniedTitle);
              setDialogMessage(translations.accessDeniedMessage);
              setDialogType("alert");
              setDialogCallback(() => () => setShowDialog(false));
            }}
          >
            <card.icon size={48} className="mb-4" style={{ color: currentColors.logoPrimaryBlue }} />
            <h2 className="text-xl font-semibold mb-2" style={{ color: currentColors.darkText }}>
              {card.title}
            </h2>
            <p className="text-sm" style={{ color: currentColors.mediumGrayText }}>
              {card.description}
            </p>
          </div>
        ))}
      </div>
    </div>
  );
}

// Users For Supermarket Page (Unchanged)
function UsersForSupermarketPage({ currentColors, translations, setActiveRoute, users, setUsers, stores, setShowDialog, setDialogTitle, setDialogMessage, setDialogType, setDialogCallback, profileUser }) {
  const [filters, setFilters] = useState({
    storeName: "",
    country: "",
    city: "",
  });
  const [selectedUserForDelete, setSelectedUserForDelete] = useState(null);

  const isAdmin = profileUser?.role === "Admin";
  const isCountryChief = profileUser?.role === "Country Chief";
  const isAnalyst = profileUser?.role === "Analyst";
  const isEngineer = profileUser?.role === "Engineer";

  useEffect(() => {
    // Set initial country filter based on profileUser's country if not Admin/Global Engineer
    if (!isAdmin && !(isEngineer && profileUser?.country === "Global") && profileUser?.country) {
      setFilters(prev => ({ ...prev, country: profileUser.country }));
    } else if (isAdmin || (isEngineer && profileUser?.country === "Global")) {
      // If Admin or Global Engineer, ensure country filter is cleared or "All Countries"
      setFilters(prev => ({ ...prev, country: "" }));
    }
  }, [profileUser, isAdmin, isEngineer]);


  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters((prev) => ({ ...prev, [name]: value }));
  };

  const handleClearFilters = () => {
    // Only clear country filter if the user is Admin or Global Engineer
    if (isAdmin || (isEngineer && profileUser?.country === "Global")) {
      setFilters({ storeName: "", country: "", city: "" });
    } else {
      // For restricted roles, only clear storeName and city, keep country fixed
      setFilters(prev => ({ ...prev, storeName: "", city: "" }));
    }
  };

  const uniqueCountries = useMemo(() => {
    let countries = [];
    if (isAdmin || (isEngineer && profileUser?.country === "Global")) { // Admin and Global Engineer can see all countries in filter
      countries = [...new Set(stores.map((store) => store.country))];
    } else if (isCountryChief || isAnalyst || (isEngineer && profileUser?.country !== "Global")) { // Country Chief, Analyst, and non-Global Engineer only see their country
      countries = [profileUser?.country];
    }
    return countries.filter(Boolean).sort();
  }, [stores, profileUser, isAdmin, isEngineer, isCountryChief, isAnalyst]);

  const uniqueCities = useMemo(() => {
    let cities = [];
    let relevantStores = stores;

    // Filter stores by the selected country filter first
    if (filters.country) {
      relevantStores = relevantStores.filter(store => store.country === filters.country);
    } else if (!isAdmin && !(isEngineer && profileUser?.country === "Global") && profileUser?.country) {
      // If no country filter selected, but user role is restricted by country, filter by user's country
      relevantStores = relevantStores.filter(store => store.country === profileUser?.country);
    }

    cities = relevantStores.map(store => store.city);
    return [...new Set(cities)].filter(Boolean).sort();
  }, [stores, filters.country, profileUser, isAdmin, isEngineer]);


  const uniqueStores = useMemo(() => {
    let storeNames = [];
    let relevantStores = stores;

    // Apply country filter
    if (filters.country) {
      relevantStores = relevantStores.filter(s => s.country === filters.country);
    } else if (!isAdmin && !(isEngineer && profileUser?.country === "Global") && profileUser?.country) {
      relevantStores = relevantStores.filter(s => s.country === profileUser?.country);
    }

    // Apply city filter
    if (filters.city) {
      relevantStores = relevantStores.filter(s => s.city === filters.city);
    }
    return [...new Set(relevantStores.map(s => s.name))].filter(Boolean).sort();
  }, [stores, filters.country, filters.city, isAdmin, isEngineer, profileUser]);


  const filteredUsers = useMemo(() => {
    let baseUsers = users;
    if (!isAdmin && !(isEngineer && profileUser?.country === "Global")) {
      baseUsers = users.filter(user => user.country === profileUser?.country);
    }

    return baseUsers.filter((user) => {
      const storeMatch = filters.storeName === "" || user.storeName === filters.storeName;
      const countryMatch = filters.country === "" || user.country === filters.country;
      const cityMatch = filters.city === "" || user.city === filters.city;
      return storeMatch && countryMatch && cityMatch;
    });
  }, [users, filters, profileUser, isAdmin, isEngineer]);


  const handleDeleteUser = (userToDelete) => {
    // Admin, Country Chief, and Analyst can delete
    if (!isAdmin && !isCountryChief && !isAnalyst) {
      setShowDialog(true);
      setDialogTitle(translations.accessDeniedTitle);
      setDialogMessage(translations.accessDeniedMessage);
      setDialogType("alert");
      setDialogCallback(() => () => setShowDialog(false));
      return;
    }

    setSelectedUserForDelete(userToDelete);
    setDialogTitle(translations.confirmDeleteUserTitle);
    setDialogMessage(`${translations.confirmDeleteUserMessage} '${userToDelete.name} ${userToDelete.surname}'?`);
    setDialogType("confirm");
    setDialogCallback(() => (confirmedName) => {
      if (confirmedName === `${userToDelete.name} ${userToDelete.surname}`) {
        setUsers(prevUsers => prevUsers.filter(user => user.id !== userToDelete.id));
        setShowDialog(false);
        setDialogTitle("Success");
        setDialogMessage(`User '${userToDelete.name} ${userToDelete.surname}' ${translations.deleteUserSuccess}`);
        setDialogType("alert");
        setDialogCallback(() => () => setShowDialog(false));
        setShowDialog(true);
      } else {
        setShowDialog(false);
        setDialogTitle("Error");
        setDialogMessage(translations.deleteConfirmationMismatch);
        setDialogType("alert");
        setDialogCallback(() => () => setShowDialog(false));
        setShowDialog(true);
      }
      setSelectedUserForDelete(null);
    });
    setShowDialog(true);
  };

  const handleEditUser = (userId) => {
    if (!isAdmin && !isAnalyst && !isCountryChief) { // Admin, Analyst, Country Chief can edit
      setShowDialog(true);
      setDialogTitle(translations.accessDeniedTitle);
      setDialogMessage(translations.accessDeniedMessage);
      setDialogType("alert");
      setDialogCallback(() => () => setShowDialog(false));
      return;
    }
    setActiveRoute(`/users-supermarket/edit/${userId}`);
  };


  return (
    <div className="p-8 rounded-lg shadow-md" style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}>
      <h1 className="text-3xl font-semibold mb-6" style={{ color: currentColors.darkText }}>
        {translations.usersForSupermarketTitle}
      </h1>

      {(isAdmin || isCountryChief || isEngineer) && ( // Admin, Country Chief, Engineer can add (this button navigates)
        <div className="flex justify-center mb-6">
          <button
            onClick={() => setActiveRoute("/users-supermarket/add")}
            className="px-6 py-3 rounded-md font-medium flex items-center justify-center transition-colors duration-200 cursor-pointer"
            style={{ backgroundColor: currentColors.logoPrimaryBlue, color: currentColors.whiteText }}
          >
            <PlusCircle size={20} className="mr-2" /> {translations.addNewUserButton}
          </button>
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
        <div>
          <label htmlFor="filter-store" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.store}
          </label>
          <select
            id="filter-store"
            name="storeName"
            value={filters.storeName}
            onChange={handleFilterChange}
            className="w-full p-2 rounded-md border cursor-pointer"
            style={{
              borderColor: currentColors.mediumGrayText,
              backgroundColor: currentColors.lightGrayBg,
              color: currentColors.darkText,
              outlineColor: currentColors.logoPrimaryBlue,
            }}
          >
            <option value="">{translations.allStores}</option>
            {uniqueStores.map((storeName) => (
              <option key={storeName} value={storeName}>{storeName}</option>
            ))}
          </select>
        </div>
        <div>
          <label htmlFor="filter-country" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.country}
          </label>
          <select
            id="filter-country"
            name="country"
            value={filters.country}
            onChange={handleFilterChange}
            className="w-full p-2 rounded-md border cursor-pointer"
            style={{
              borderColor: currentColors.mediumGrayText,
              backgroundColor: currentColors.lightGrayBg,
              color: currentColors.darkText,
              outlineColor: currentColors.logoPrimaryBlue,
            }}
            disabled={!isAdmin && !(isEngineer && profileUser?.country === "Global")} // Disable if not admin AND (not a Global Engineer)
          >
            <option value="">{translations.allCountries}</option>
            {uniqueCountries.map((country) => (
              <option key={country} value={country}>{country}</option>
            ))}
          </select>
        </div>
        <div>
          <label htmlFor="filter-city" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.city}
          </label>
          <select
            id="filter-city"
            name="city"
            value={filters.city}
            onChange={handleFilterChange}
            className="w-full p-2 rounded-md border cursor-pointer"
            style={{
              borderColor: currentColors.mediumGrayText,
              backgroundColor: currentColors.lightGrayBg,
              color: currentColors.darkText,
              outlineColor: currentColors.logoPrimaryBlue,
            }}
            disabled={!filters.country && (!isAdmin && !(isEngineer && profileUser?.country === "Global") && profileUser?.country)} // Disable if country is restricted and no country filter is selected
          >
            <option value="">{translations.allCities}</option>
            {uniqueCities.map((city) => (
              <option key={city} value={city}>{city}</option>
            ))}
          </select>
        </div>
      </div>
      <div className="w-full text-right mb-4">
        <button
          onClick={handleClearFilters}
          className="px-4 py-2 rounded-md font-medium flex items-center justify-center transition-colors duration-200 cursor-pointer inline-flex"
          style={{ backgroundColor: currentColors.logoPrimaryBlue, color: currentColors.whiteText }}
        >
          <RotateCcw size={18} className="mr-2" /> {translations.clearFilters}
        </button>
      </div>

      <div className="overflow-x-auto rounded-lg border" style={{ borderColor: currentColors.mediumGrayText }}>
        <table className="min-w-full divide-y divide-gray-200" style={{ borderColor: currentColors.mediumGrayText }}>
          <thead style={{ backgroundColor: currentColors.lightGrayBg }}>
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider" style={{ color: currentColors.mediumGrayText }}>
                {translations.nameSurnameHeader}
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider" style={{ color: currentColors.mediumGrayText }}>
                {translations.storeNameHeader}
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider" style={{ color: currentColors.mediumGrayText }}>
                {translations.branchHeader}
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider" style={{ color: currentColors.mediumGrayText }}>
                {translations.roleHeader}
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider" style={{ color: currentColors.mediumGrayText }}></th>
            </tr>
          </thead>
          <tbody style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}>
            {filteredUsers.length > 0 ? (
              filteredUsers.map((user) => (
                <tr key={user.id} className="border-t hover:bg-gray-50 transition-colors duration-150" style={{ borderColor: currentColors.lightGrayBg }}>
                  <td className="px-6 py-4 text-sm font-medium whitespace-nowrap">
                    {user.name} {user.surname}
                  </td>
                  <td className="px-6 py-4 text-sm whitespace-nowrap">
                    {user.storeName}
                  </td>
                  <td className="px-6 py-4 text-sm whitespace-nowrap">
                    {user.branch || "-"}
                  </td>
                  <td className="px-6 py-4 text-sm whitespace-nowrap">
                    {user.role}
                  </td>
                  <td className="px-6 py-4 text-sm text-right whitespace-nowrap">
                    <button
                      onClick={() => handleEditUser(user.id)}
                      className={`bg-blue-500 hover:bg-blue-600 text-white font-bold py-1.5 px-3 rounded-md transition-colors duration-200 mr-2
                      ${!(isAdmin || isAnalyst || isCountryChief) ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}
                      disabled={!(isAdmin || isAnalyst || isCountryChief)} // Admin, Analyst, Country Chief can edit
                    >
                      {translations.editButton}
                    </button>
                    <button
                      onClick={() => handleDeleteUser(user)}
                      className={`bg-red-500 hover:bg-red-600 text-white font-bold py-1.5 px-3 rounded-md transition-colors duration-200
                      ${!(isAdmin || isCountryChief || isAnalyst) ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}
                      disabled={!(isAdmin || isCountryChief || isAnalyst)} // Admin, Country Chief, and Analyst can delete
                    >
                      {translations.deleteButton}
                    </button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan={5} className="px-6 py-4 whitespace-nowrap text-sm text-center" style={{ color: currentColors.mediumGrayText }}>
                  {translations.noUsersFound}
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}

// New User Form Page (Supermarket) - Updated with profile picture
function NewUserFormPage({ currentColors, translations, setActiveRoute, users, setUsers, stores, setShowDialog, setDialogTitle, setDialogMessage, setDialogType, setDialogCallback, profileUser }) {
  const isAdmin = profileUser?.role === "Admin";
  const isCountryChief = profileUser?.role === "Country Chief";
  const isAnalyst = profileUser?.role === "Analyst"; // Added Analyst
  const isEngineer = profileUser?.role === "Engineer";

  const initialCountry = (isAdmin || (isEngineer && profileUser?.country === "Global")) ? "" : profileUser?.country || "";

  const [formData, setFormData] = useState({
    id: users.length > 0 ? Math.max(...users.map(u => u.id)) + 1 : 1,
    name: "",
    surname: "",
    dob: "",
    country: initialCountry,
    city: "",
    storeName: "",
    addBranch: false,
    branch: "",
    role: "Runner", // Default role
    email: "",
    password: "",
    repeatPassword: "",
    profilePicture: null, // New field for profile picture
  });

  const [formErrors, setFormErrors] = useState({});
  const [showPassword, setShowPassword] = useState(false);
  const [showRepeatPassword, setShowRepeatPassword] = useState(false);
  const fileInputRef = useRef(null); // Ref for hidden file input

  const countryOptions = useMemo(() => {
    if (isAdmin || (isEngineer && profileUser?.country === "Global")) {
      return [...new Set(stores.map(s => s.country))].map(c => ({ value: c, label: c })).sort((a,b) => a.label.localeCompare(b.label));
    } else if (isCountryChief || isAnalyst || (isEngineer && profileUser?.country !== "Global")) {
      return [{ value: profileUser?.country, label: profileUser?.country }];
    }
    return [];
  }, [stores, isAdmin, isCountryChief, isAnalyst, isEngineer, profileUser]);


  const cityOptions = useMemo(() => {
    if (formData.country) {
      return [...new Set(stores.filter(s => s.country === formData.country).map(s => s.city))].map(c => ({ value: c, label: c })).sort((a,b) => a.label.localeCompare(b.label));
    }
    return [];
  }, [formData.country, stores]);

  const storeNameOptions = useMemo(() => {
    if (formData.country && formData.city) {
      return [...new Set(stores.filter(s => s.country === formData.country && s.city === formData.city).map(s => s.name))].map(s => ({ value: s, label: s })).sort((a,b) => a.label.localeCompare(b.label));
    }
    // Fallback if no country/city selected, show all for Admin/Engineer, or filter by user's country for CountryChief/Analyst
    if (isAdmin || (isEngineer && profileUser?.country === "Global")) {
      return [...new Set(stores.map(s => s.name))].map(s => ({ value: s, label: s })).sort((a,b) => a.label.localeCompare(b.label));
    } else if ((isCountryChief || isAnalyst || (isEngineer && profileUser?.country !== "Global")) && profileUser?.country) {
      return [...new Set(stores.filter(s => s.country === profileUser.country).map(s => s.name))].map(s => ({ value: s, label: s })).sort((a,b) => a.label.localeCompare(b.label));
    }
    return [];
  }, [formData.country, formData.city, stores, isAdmin, isCountryChief, isAnalyst, isEngineer, profileUser]);


  const roleOptions = [{ value: "Runner", label: "Runner" }]; // Only Runner for now

  const handleFormChange = (e) => {
    const { name, value, type, checked, files } = e.target;

    if (name === "profilePicture" && files && files[0]) {
      const file = files[0];
      const reader = new FileReader();
      reader.onloadend = () => {
        setFormData((prev) => ({ ...prev, profilePicture: reader.result }));
      };
      reader.readAsDataURL(file);
      setFormErrors(prevErrors => ({ ...prevErrors, profilePicture: '' }));
    } else {
      setFormData((prev) => {
        const newState = {
          ...prev,
          [name]: type === "checkbox" ? checked : value,
        };
        if (name === "country") {
          newState.city = "";
          newState.storeName = "";
          newState.branch = "";
          newState.addBranch = false;
        }
        if (name === "city") {
          newState.storeName = "";
          newState.branch = "";
          newState.addBranch = false;
        }
        if (name === "addBranch" && !checked) {
          newState.branch = "";
        }
        if (name === "password" || name === "repeatPassword") {
          if (name === "password" && value !== newState.repeatPassword && newState.repeatPassword !== "") {
            setFormErrors(prevErrors => ({ ...prevErrors, repeatPassword: translations.passwordMismatch }));
          } else if (name === "repeatPassword" && value !== newState.password) {
            setFormErrors(prevErrors => ({ ...prevErrors, repeatPassword: translations.passwordMismatch }));
          } else {
            setFormErrors(prevErrors => ({ ...prevErrors, repeatPassword: '' }));
          }
        }
        return newState;
      });
      setFormErrors(prevErrors => ({ ...prevErrors, [name]: '' }));
    }
  };

  const validateForm = () => {
    let errors = {};
    let isValid = true;

    const requiredFields = [
      "name", "surname", "dob", "country", "city", "storeName",
      "role", "email", "password", "repeatPassword"
    ];

    if (formData.addBranch) {
      requiredFields.push("branch");
    }

    requiredFields.forEach(field => {
      if (!formData[field] || (typeof formData[field] === 'string' && formData[field].trim() === '')) {
        errors[field] = translations.requiredFieldWarning;
        isValid = false;
      }
    });

    if (formData.password !== formData.repeatPassword) {
      errors.repeatPassword = translations.passwordMismatch;
      isValid = false;
    }

    if (formData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      errors.email = translations.invalidEmail;
      isValid = false;
    }

    setFormErrors(errors);
    return isValid;
  };

  const handleSaveUser = () => {
    if (validateForm()) {
      setDialogTitle(translations.confirmSaveUserTitle);
      setDialogMessage(translations.confirmSaveUserMessage);
      setDialogType("confirm");
      setDialogCallback(() => () => {
        const newUser = { ...formData };
        delete newUser.repeatPassword;
        setUsers((prevUsers) => [...prevUsers, newUser]);
        setShowDialog(false);
        setActiveRoute("/users-supermarket");
      });
      setShowDialog(true);
    } else {
      const firstErrorField = Object.keys(formErrors).find(key => formErrors[key]);
      if (firstErrorField) {
        document.getElementById(firstErrorField)?.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    }
  };

  const handleProfilePictureClick = () => {
    fileInputRef.current.click();
  };

  return (
    <div className="p-8 rounded-lg shadow-md" style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}>
      <h1 className="text-3xl font-semibold mb-6" style={{ color: currentColors.darkText }}>
        {translations.addNewUserTitle}
      </h1>

      <form className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
        {/* Profile Picture Upload */}
        <div className="md:col-span-2 flex flex-col items-center mb-4">
          <label htmlFor="profilePicture" className="block text-sm font-medium mb-2" style={{ color: currentColors.darkText }}>
            {translations.profilePictureLabel}
          </label>
          <div
            className="w-32 h-32 rounded-full overflow-hidden border-2 border-gray-300 flex items-center justify-center mb-3 cursor-pointer hover:border-blue-500 transition-colors duration-200"
            style={{ borderColor: currentColors.mediumGrayText }}
            onClick={handleProfilePictureClick}
          >
            {formData.profilePicture ? (
              <img src={formData.profilePicture} alt="Profile" className="w-full h-full object-cover" />
            ) : (
              <Camera size={64} color={currentColors.mediumGrayText} />
            )}
          </div>
          <input
            type="file"
            id="profilePicture"
            name="profilePicture"
            accept="image/*"
            onChange={handleFormChange}
            ref={fileInputRef} // Assign ref
            className="hidden" // Hide the default file input
          />
          {formErrors.profilePicture && <p className="text-red-500 text-xs mt-1">{formErrors.profilePicture}</p>}
        </div>

        <div>
          <label htmlFor="name" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.employeeNameLabel} <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.name ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          />
          {formErrors.name && <p className="text-red-500 text-xs mt-1">{formErrors.name}</p>}
        </div>
        <div>
          <label htmlFor="surname" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.employeeSurnameLabel} <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="surname"
            name="surname"
            value={formData.surname}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.surname ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          />
          {formErrors.surname && <p className="text-red-500 text-xs mt-1">{formErrors.surname}</p>}
        </div>
        <div>
          <label htmlFor="dob" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.dobLabel} <span className="text-red-500">*</span>
          </label>
          <input
            type="date"
            id="dob"
            name="dob"
            value={formData.dob}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.dob ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          />
          {formErrors.dob && <p className="text-red-500 text-xs mt-1">{formErrors.dob}</p>}
        </div>
        <div>
          <label htmlFor="country" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.countryLabel} <span className="text-red-500">*</span>
          </label>
          <select
            id="country"
            name="country"
            value={formData.country}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.country ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
            disabled={!isAdmin && !(isEngineer && profileUser?.country === "Global")}
          >
            <option value="">{translations.selectCountry}</option>
            {countryOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)}
          </select>
          {formErrors.country && <p className="text-red-500 text-xs mt-1">{formErrors.country}</p>}
        </div>
        <div>
          <label htmlFor="city" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.cityLabel} <span className="text-red-500">*</span>
          </label>
          <select
            id="city"
            name="city"
            value={formData.city}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.city ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
            disabled={!formData.country}
          >
            <option value="">{translations.selectCity}</option>
            {cityOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)}
          </select>
          {formErrors.city && <p className="text-red-500 text-xs mt-1">{formErrors.city}</p>}
        </div>
        <div>
          <label htmlFor="storeName" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.storeNameLabel} <span className="text-red-500">*</span>
          </label>
          <select
            id="storeName"
            name="storeName"
            value={formData.storeName}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.storeName ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
            disabled={!formData.country || !formData.city}
          >
            <option value="">{translations.selectStore}</option>
            {storeNameOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)}
          </select>
          {formErrors.storeName && <p className="text-red-500 text-xs mt-1">{formErrors.storeName}</p>}
        </div>
        <div className="md:col-span-2 flex items-center">
          <input
            type="checkbox"
            id="addBranch"
            name="addBranch"
            checked={formData.addBranch}
            onChange={handleFormChange}
            className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            style={{ borderColor: currentColors.mediumGrayText }}
          />
          <label htmlFor="addBranch" className="text-sm" style={{ color: currentColors.darkText }}>
            {translations.addBranchLabel}
          </label>
        </div>
        {formData.addBranch && (
          <div>
            <label htmlFor="branch" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
              {translations.branchLabel} <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="branch"
              name="branch"
              value={formData.branch}
              onChange={handleFormChange}
              className={`w-full p-2 rounded-md border ${formErrors.branch ? 'border-red-500' : 'border-gray-300'}`}
              style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
            />
            {formErrors.branch && <p className="text-red-500 text-xs mt-1">{formErrors.branch}</p>}
          </div>
        )}
        <div>
          <label htmlFor="role" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.roleLabel} <span className="text-red-500">*</span>
          </label>
          <select
            id="role"
            name="role"
            value={formData.role}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.role ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          >
            {roleOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)}
          </select>
          {formErrors.role && <p className="text-red-500 text-xs mt-1">{formErrors.role}</p>}
        </div>
        <div>
          <label htmlFor="email" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.mailLabel} <span className="text-red-500">*</span>
          </label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.email ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          />
          {formErrors.email && <p className="text-red-500 text-xs mt-1">{formErrors.email}</p>}
        </div>
        <div className="relative">
          <label htmlFor="password" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.passwordLabel} <span className="text-red-500">*</span>
          </label>
          <div className={`flex items-center rounded-md border ${formErrors.password ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          >
            <input
              type={showPassword ? "text" : "password"}
              id="password"
              name="password"
              value={formData.password}
              onChange={handleFormChange}
              className="w-full p-2 focus:outline-none focus:ring-0 bg-transparent"
              style={{ color: currentColors.darkText }}
            />
            <span
              className="p-2 cursor-pointer"
              onClick={() => setShowPassword(!showPassword)}
              style={{ color: currentColors.mediumGrayText }}
            >
              {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}
            </span>
          </div>
          {formErrors.password && <p className="text-red-500 text-xs mt-1">{formErrors.password}</p>}
        </div>
        <div className="relative">
          <label htmlFor="repeatPassword" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.repeatPasswordLabel} <span className="text-red-500">*</span>
          </label>
          <div className={`flex items-center rounded-md border ${formErrors.repeatPassword ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          >
            <input
              type={showRepeatPassword ? "text" : "password"}
              id="repeatPassword"
              name="repeatPassword"
              value={formData.repeatPassword}
              onChange={handleFormChange}
              className="w-full p-2 focus:outline-none focus:ring-0 bg-transparent"
              style={{ color: currentColors.darkText }}
            />
            <span
              className="p-2 cursor-pointer"
              onClick={() => setShowRepeatPassword(!showRepeatPassword)}
              style={{ color: currentColors.mediumGrayText }}
            >
              {showRepeatPassword ? <EyeOff size={18} /> : <Eye size={18} />}
            </span>
          </div>
          {formErrors.repeatPassword && <p className="text-red-500 text-xs mt-1">{formErrors.repeatPassword}</p>}
        </div>
      </form>
      <div className="flex justify-between mt-6">
        <button
          onClick={() => setActiveRoute("/users-supermarket")}
          className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200"
          style={{ backgroundColor: currentColors.prevButtonBg }}
        >
          {translations.removeProcessButton}
        </button>
        <button
          onClick={handleSaveUser}
          className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200"
          style={{ backgroundColor: currentColors.nextButtonBg }}
        >
          {translations.saveButton}
        </button>
      </div>
    </div>
  );
}

// Edit User Form Page (Supermarket) - Updated with profile picture
function EditUserFormPage({ currentColors, translations, setActiveRoute, users, setUsers, stores, userId, setShowDialog, setDialogTitle, setDialogMessage, setDialogType, setDialogCallback, profileUser }) {
  const currentUser = users.find(user => user.id === userId);

  const isAdmin = profileUser?.role === "Admin";
  const isCountryChief = profileUser?.role === "Country Chief";
  const isAnalyst = profileUser?.role === "Analyst";
  const isEngineer = profileUser?.role === "Engineer";

  // Access check at the start
  if (!isAdmin && !isAnalyst && !isCountryChief) { // Only Admin, Analyst, Country Chief can access this page
    return (
      <AccessDenied
        currentColors={currentColors}
        translations={translations}
        setShowDialog={setShowDialog}
        setDialogTitle={setDialogTitle}
        setDialogMessage={setDialogMessage}
        setDialogType={setDialogType}
        setDialogCallback={setDialogCallback}
        goBack={() => setActiveRoute("/users-supermarket")}
      />
    );
  }

  // Ensure user can only edit users within their country if they are Country Chief or Analyst
  if (!isAdmin && (isCountryChief || isAnalyst || (isEngineer && profileUser?.country !== "Global")) && currentUser?.country !== profileUser?.country) {
    return (
      <AccessDenied
        currentColors={currentColors}
        translations={translations}
        setShowDialog={setShowDialog}
        setDialogTitle={setDialogTitle}
        setDialogMessage={setDialogMessage}
        setDialogType={setDialogType}
        setDialogCallback={setDialogCallback}
        goBack={() => setActiveRoute("/users-supermarket")}
      />
    );
  }

  const [formData, setFormData] = useState(currentUser ? { ...currentUser, repeatPassword: currentUser.password } : {});
  const [formErrors, setFormErrors] = useState({});
  const [showPassword, setShowPassword] = useState(false);
  const [showRepeatPassword, setShowRepeatPassword] = useState(false);
  const fileInputRef = useRef(null); // Ref for hidden file input

  useEffect(() => {
    if (!currentUser) {
      setActiveRoute("/users-supermarket");
      return;
    }
    setFormData(currentUser ? { ...currentUser, repeatPassword: currentUser.password } : {});
  }, [userId, users, setActiveRoute, currentUser]);

  const countryOptions = useMemo(() => {
    if (isAdmin || (isEngineer && profileUser?.country === "Global")) {
      return [...new Set(stores.map(s => s.country))].map(c => ({ value: c, label: c })).sort((a,b) => a.label.localeCompare(b.label));
    } else if (isCountryChief || isAnalyst || (isEngineer && profileUser?.country !== "Global")) {
      return [{ value: profileUser?.country, label: profileUser?.country }];
    }
    return [];
  }, [stores, isAdmin, isCountryChief, isAnalyst, isEngineer, profileUser]);

  const cityOptions = useMemo(() => {
    if (formData.country) {
      return [...new Set(stores.filter(s => s.country === formData.country).map(s => s.city))].map(c => ({ value: c, label: c })).sort((a,b) => a.label.localeCompare(b.label));
    }
    return [];
  }, [formData.country, stores]);

  const storeNameOptions = useMemo(() => {
    if (formData.country && formData.city) {
      return [...new Set(stores.filter(s => s.country === formData.country && s.city === formData.city).map(s => s.name))].map(s => ({ value: s, label: s })).sort((a,b) => a.label.localeCompare(b.label));
    }
    // Fallback if no country/city selected
    if (isAdmin || (isEngineer && profileUser?.country === "Global")) {
      return [...new Set(stores.map(s => s.name))].map(s => ({ value: s, label: s })).sort((a,b) => a.label.localeCompare(b.label));
    } else if ((isCountryChief || isAnalyst || (isEngineer && profileUser?.country !== "Global")) && profileUser?.country) {
      return [...new Set(stores.filter(s => s.country === profileUser?.country).map(s => s.name))].map(s => ({ value: s, label: s })).sort((a,b) => a.label.localeCompare(b.label));
    }
    return [];
  }, [formData.country, formData.city, stores, isAdmin, isCountryChief, isAnalyst, isEngineer, profileUser]);

  const roleOptions = [{ value: "Runner", label: "Runner" }]; // Only Runner for now

  const handleFormChange = (e) => {
    const { name, value, type, checked, files } = e.target;

    if (name === "profilePicture" && files && files[0]) {
      const file = files[0];
      const reader = new FileReader();
      reader.onloadend = () => {
        setFormData((prev) => ({ ...prev, profilePicture: reader.result }));
      };
      reader.readAsDataURL(file);
      setFormErrors(prevErrors => ({ ...prevErrors, profilePicture: '' }));
    } else {
      setFormData((prev) => {
        const newState = {
          ...prev,
          [name]: type === "checkbox" ? checked : value,
        };
        if (name === "country") {
          newState.city = "";
          newState.storeName = "";
          newState.branch = "";
          newState.addBranch = false;
        }
        if (name === "city") {
          newState.storeName = "";
          newState.branch = "";
          newState.addBranch = false;
        }
        if (name === "addBranch" && !checked) {
          newState.branch = "";
        }
        if (name === "password" || name === "repeatPassword") {
          if (name === "password" && value !== newState.repeatPassword && newState.repeatPassword !== "") {
            setFormErrors(prevErrors => ({ ...prevErrors, repeatPassword: translations.passwordMismatch }));
          } else if (name === "repeatPassword" && value !== newState.password) {
            setFormErrors(prevErrors => ({ ...prevErrors, repeatPassword: translations.passwordMismatch }));
          } else {
            setFormErrors(prevErrors => ({ ...prevErrors, repeatPassword: '' }));
          }
        }
        return newState;
      });
      setFormErrors(prevErrors => ({ ...prevErrors, [name]: '' }));
    }
  };

  const validateForm = () => {
    let errors = {};
    let isValid = true;

    const requiredFields = [
      "name", "surname", "dob", "country", "city", "storeName",
      "role", "email", "password", "repeatPassword"
    ];

    if (formData.addBranch) {
      requiredFields.push("branch");
    }

    requiredFields.forEach(field => {
      if (!formData[field] || (typeof formData[field] === 'string' && formData[field].trim() === '')) {
        errors[field] = translations.requiredFieldWarning;
        isValid = false;
      }
    });

    if (formData.password !== formData.repeatPassword) {
      errors.repeatPassword = translations.passwordMismatch;
      isValid = false;
    }

    if (formData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      errors.email = translations.invalidEmail;
      isValid = false;
    }

    setFormErrors(errors);
    return isValid;
  };

  const handleSaveUser = () => {
    if (!isAdmin && !isAnalyst && !isCountryChief) { // Re-check permission on save attempt
      setShowDialog(true);
      setDialogTitle(translations.accessDeniedTitle);
      setDialogMessage(translations.accessDeniedMessage);
      setDialogType("alert");
      setDialogCallback(() => () => setShowDialog(false));
      return;
    }
    if (validateForm()) {
      setDialogTitle(translations.confirmSaveUserTitle);
      setDialogMessage(translations.confirmSaveUserMessage);
      setDialogType("confirm");
      setDialogCallback(() => () => {
        setUsers((prevUsers) =>
          prevUsers.map((user) =>
            user.id === formData.id ? { ...formData, repeatPassword: undefined } : user
          )
        );
        setShowDialog(false);
        setActiveRoute("/users-supermarket");
      });
      setShowDialog(true);
    } else {
      const firstErrorField = Object.keys(formErrors).find(key => formErrors[key]);
      if (firstErrorField) {
        document.getElementById(firstErrorField)?.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    }
  };

  const handleDiscard = () => {
    setActiveRoute("/users-supermarket");
  };

  const handleProfilePictureClick = () => {
    fileInputRef.current.click();
  };

  if (!currentUser) {
    return (
      <div className="p-8 rounded-lg shadow-md" style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}>
        <h1 className="text-3xl font-semibold mb-6" style={{ color: currentColors.darkText }}>
          {translations.editUserTitle}
        </h1>
        <p className="text-red-500">{translations.userNotFound}</p>
        <div className="mt-6">
          <button
            onClick={() => setActiveRoute("/users-supermarket")}
            className="px-4 py-2 rounded-md font-medium transition-colors duration-200 cursor-pointer"
            style={{ backgroundColor: currentColors.logoPrimaryBlue, color: currentColors.whiteText }}
          >
            {translations.backToUserList}
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="p-8 rounded-lg shadow-md" style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}>
      <h1 className="text-3xl font-semibold mb-6" style={{ color: currentColors.darkText }}>
        {translations.editUserTitle}: {currentUser.name} {currentUser.surname}
      </h1>

      <form className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
        {/* Profile Picture Upload */}
        <div className="md:col-span-2 flex flex-col items-center mb-4">
          <label htmlFor="profilePicture" className="block text-sm font-medium mb-2" style={{ color: currentColors.darkText }}>
            {translations.profilePictureLabel}
          </label>
          <div
            className="w-32 h-32 rounded-full overflow-hidden border-2 border-gray-300 flex items-center justify-center mb-3 cursor-pointer hover:border-blue-500 transition-colors duration-200"
            style={{ borderColor: currentColors.mediumGrayText }}
            onClick={handleProfilePictureClick}
          >
            {formData.profilePicture ? (
              <img src={formData.profilePicture} alt="Profile" className="w-full h-full object-cover" />
            ) : (
              <Camera size={64} color={currentColors.mediumGrayText} />
            )}
          </div>
          <input
            type="file"
            id="profilePicture"
            name="profilePicture"
            accept="image/*"
            onChange={handleFormChange}
            ref={fileInputRef} // Assign ref
            className="hidden" // Hide the default file input
          />
          {formErrors.profilePicture && <p className="text-red-500 text-xs mt-1">{formErrors.profilePicture}</p>}
        </div>

        <div>
          <label htmlFor="name" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.employeeNameLabel} <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name || ''}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.name ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          />
          {formErrors.name && <p className="text-red-500 text-xs mt-1">{formErrors.name}</p>}
        </div>
        <div>
          <label htmlFor="surname" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.employeeSurnameLabel} <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="surname"
            name="surname"
            value={formData.surname || ''}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.surname ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          />
          {formErrors.surname && <p className="text-red-500 text-xs mt-1">{formErrors.surname}</p>}
        </div>
        <div>
          <label htmlFor="dob" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.dobLabel} <span className="text-red-500">*</span>
          </label>
          <input
            type="date"
            id="dob"
            name="dob"
            value={formData.dob || ''}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.dob ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          />
          {formErrors.dob && <p className="text-red-500 text-xs mt-1">{formErrors.dob}</p>}
        </div>
        <div>
          <label htmlFor="country" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.countryLabel} <span className="text-red-500">*</span>
          </label>
          <select
            id="country"
            name="country"
            value={formData.country}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.country ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
            disabled={!isAdmin && !(isEngineer && profileUser?.country === "Global")}
          >
            <option value="">{translations.selectCountry}</option>
            {countryOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)}
          </select>
          {formErrors.country && <p className="text-red-500 text-xs mt-1">{formErrors.country}</p>}
        </div>
        <div>
          <label htmlFor="city" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.cityLabel} <span className="text-red-500">*</span>
          </label>
          <select
            id="city"
            name="city"
            value={formData.city}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.city ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
            disabled={!formData.country}
          >
            <option value="">{translations.selectCity}</option>
            {cityOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)}
          </select>
          {formErrors.city && <p className="text-red-500 text-xs mt-1">{formErrors.city}</p>}
        </div>
        <div>
          <label htmlFor="storeName" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.storeNameLabel} <span className="text-red-500">*</span>
          </label>
          <select
            id="storeName"
            name="storeName"
            value={formData.storeName}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.storeName ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
            disabled={!formData.country || !formData.city}
          >
            <option value="">{translations.selectStore}</option>
            {storeNameOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)}
          </select>
          {formErrors.storeName && <p className="text-red-500 text-xs mt-1">{formErrors.storeName}</p>}
        </div>
        <div className="md:col-span-2 flex items-center">
          <input
            type="checkbox"
            id="addBranch"
            name="addBranch"
            checked={formData.addBranch}
            onChange={handleFormChange}
            className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            style={{ borderColor: currentColors.mediumGrayText }}
          />
          <label htmlFor="addBranch" className="text-sm" style={{ color: currentColors.darkText }}>
            {translations.addBranchLabel}
          </label>
        </div>
        {formData.addBranch && (
          <div>
            <label htmlFor="branch" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
              {translations.branchLabel} <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="branch"
              name="branch"
              value={formData.branch}
              onChange={handleFormChange}
              className={`w-full p-2 rounded-md border ${formErrors.branch ? 'border-red-500' : 'border-gray-300'}`}
              style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
            />
            {formErrors.branch && <p className="text-red-500 text-xs mt-1">{formErrors.branch}</p>}
          </div>
        )}
        <div>
          <label htmlFor="role" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.roleLabel} <span className="text-red-500">*</span>
          </label>
          <select
            id="role"
            name="role"
            value={formData.role}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.role ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          >
            {roleOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)}
          </select>
          {formErrors.role && <p className="text-red-500 text-xs mt-1">{formErrors.role}</p>}
        </div>
        <div>
          <label htmlFor="email" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.mailLabel} <span className="text-red-500">*</span>
          </label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.email ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          />
          {formErrors.email && <p className="text-red-500 text-xs mt-1">{formErrors.email}</p>}
        </div>
        <div className="relative">
          <label htmlFor="password" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.passwordLabel} <span className="text-red-500">*</span>
          </label>
          <div className={`flex items-center rounded-md border ${formErrors.password ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          >
            <input
              type={showPassword ? "text" : "password"}
              id="password"
              name="password"
              value={formData.password}
              onChange={handleFormChange}
              className="w-full p-2 focus:outline-none focus:ring-0 bg-transparent"
              style={{ color: currentColors.darkText }}
            />
            <span
              className="p-2 cursor-pointer"
              onClick={() => setShowPassword(!showPassword)}
              style={{ color: currentColors.mediumGrayText }}
            >
              {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}
            </span>
          </div>
          {formErrors.password && <p className="text-red-500 text-xs mt-1">{formErrors.password}</p>}
        </div>
        <div className="relative">
          <label htmlFor="repeatPassword" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.repeatPasswordLabel} <span className="text-red-500">*</span>
          </label>
          <div className={`flex items-center rounded-md border ${formErrors.repeatPassword ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          >
            <input
              type={showRepeatPassword ? "text" : "password"}
              id="repeatPassword"
              name="repeatPassword"
              value={formData.repeatPassword}
              onChange={handleFormChange}
              className="w-full p-2 focus:outline-none focus:ring-0 bg-transparent"
              style={{ color: currentColors.darkText }}
            />
            <span
              className="p-2 cursor-pointer"
              onClick={() => setShowRepeatPassword(!showRepeatPassword)}
              style={{ color: currentColors.mediumGrayText }}
            >
              {showRepeatPassword ? <EyeOff size={18} /> : <Eye size={18} />}
            </span>
          </div>
          {formErrors.repeatPassword && <p className="text-red-500 text-xs mt-1">{formErrors.repeatPassword}</p>}
        </div>
      </form>
      <div className="flex justify-between mt-6">
        <button
          onClick={() => setActiveRoute("/users-supermarket")}
          className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200"
          style={{ backgroundColor: currentColors.prevButtonBg }}
        >
          {translations.removeProcessButton}
        </button>
        <button
          onClick={handleSaveUser}
          className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200"
          style={{ backgroundColor: currentColors.nextButtonBg }}
        >
          {translations.saveButton}
        </button>
      </div>
    </div>
  );
}

// Users For Company Page (New)
function UsersForCompanyPage({ currentColors, translations, setActiveRoute, companyUsers, setCompanyUsers, stores, setShowDialog, setDialogTitle, setDialogMessage, setDialogType, setDialogCallback, profileUser }) {
  const [filters, setFilters] = useState({
    country: "",
    city: "",
  });
  const [selectedUserForDelete, setSelectedUserForDelete] = useState(null);

  const isAdmin = profileUser?.role === "Admin";
  const isCountryChief = profileUser?.role === "Country Chief";

  useEffect(() => {
    // Set initial country filter based on profileUser's country if not Admin
    if (!isAdmin && profileUser?.country) {
      setFilters(prev => ({ ...prev, country: profileUser.country }));
    } else if (isAdmin) {
      setFilters(prev => ({ ...prev, country: "" }));
    }
  }, [profileUser, isAdmin]);

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters((prev) => ({ ...prev, [name]: value }));
  };

  const handleClearFilters = () => {
    if (isAdmin) {
      setFilters({ country: "", city: "" });
    } else {
      setFilters(prev => ({ ...prev, city: "" }));
    }
  };

  const uniqueCountries = useMemo(() => {
    let countries = [];
    if (isAdmin) {
      countries = [...new Set(stores.map((store) => store.country))];
    } else if (isCountryChief) {
      countries = [profileUser?.country];
    }
    return countries.filter(Boolean).sort();
  }, [stores, isAdmin, isCountryChief, profileUser]);

  const uniqueCities = useMemo(() => {
    let cities = [];
    let relevantStores = stores;

    if (filters.country) {
      relevantStores = relevantStores.filter(store => store.country === filters.country);
    } else if (isCountryChief && profileUser?.country) {
      relevantStores = relevantStores.filter(store => store.country === profileUser?.country);
    }
    cities = relevantStores.map(store => store.city);
    return [...new Set(cities)].filter(Boolean).sort();
  }, [stores, filters.country, isCountryChief, profileUser]);


  const filteredUsers = useMemo(() => {
    let baseUsers = companyUsers;
    if (isCountryChief) {
      baseUsers = companyUsers.filter(user => user.country === profileUser?.country);
    }

    return baseUsers.filter((user) => {
      const countryMatch = filters.country === "" || user.country === filters.country;
      const cityMatch = filters.city === "" || user.city === filters.city;
      return countryMatch && cityMatch;
    });
  }, [companyUsers, filters, profileUser, isCountryChief]);


  const handleDeleteUser = (userToDelete) => {
    if (!isAdmin && !isCountryChief) { // Only Admin and Country Chief can delete
      setShowDialog(true);
      setDialogTitle(translations.accessDeniedTitle);
      setDialogMessage(translations.accessDeniedMessage);
      setDialogType("alert");
      setDialogCallback(() => () => setShowDialog(false));
      return;
    }

    setSelectedUserForDelete(userToDelete);
    setDialogTitle(translations.confirmDeleteUserTitle);
    setDialogMessage(`${translations.confirmDeleteUserMessage} '${userToDelete.name} ${userToDelete.surname}'?`);
    setDialogType("confirm");
    setDialogCallback(() => (confirmedName) => {
      if (confirmedName === `${userToDelete.name} ${userToDelete.surname}`) {
        setCompanyUsers(prevUsers => prevUsers.filter(user => user.id !== userToDelete.id));
        setShowDialog(false);
        setDialogTitle("Success");
        setDialogMessage(`User '${userToDelete.name} ${userToDelete.surname}' ${translations.deleteUserSuccess}`);
        setDialogType("alert");
        setDialogCallback(() => () => setShowDialog(false));
        setShowDialog(true);
      } else {
        setShowDialog(false);
        setDialogTitle("Error");
        setDialogMessage(translations.deleteConfirmationMismatch);
        setDialogType("alert");
        setDialogCallback(() => () => setShowDialog(false));
        setShowDialog(true);
      }
      setSelectedUserForDelete(null);
    });
    setShowDialog(true);
  };

  const handleEditUser = (userId) => {
    if (!isAdmin && !isCountryChief) { // Only Admin and Country Chief can edit
      setShowDialog(true);
      setDialogTitle(translations.accessDeniedTitle);
      setDialogMessage(translations.accessDeniedMessage);
      setDialogType("alert");
      setDialogCallback(() => () => setShowDialog(false));
      return;
    }
    setActiveRoute(`/users-company/edit/${userId}`);
  };


  return (
    <div className="p-8 rounded-lg shadow-md" style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}>
      <h1 className="text-3xl font-semibold mb-6" style={{ color: currentColors.darkText }}>
        {translations.usersForCompanyTitle}
      </h1>

      {(isAdmin || isCountryChief) && ( // Admin and Country Chief can add (this button navigates)
        <div className="flex justify-center mb-6">
          <button
            onClick={() => setActiveRoute("/users-company/add")}
            className="px-6 py-3 rounded-md font-medium flex items-center justify-center transition-colors duration-200 cursor-pointer"
            style={{ backgroundColor: currentColors.logoPrimaryBlue, color: currentColors.whiteText }}
          >
            <PlusCircle size={20} className="mr-2" /> {translations.addNewUserButton}
          </button>
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
        <div>
          <label htmlFor="filter-country" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.country}
          </label>
          <select
            id="filter-country"
            name="country"
            value={filters.country}
            onChange={handleFilterChange}
            className="w-full p-2 rounded-md border cursor-pointer"
            style={{
              borderColor: currentColors.mediumGrayText,
              backgroundColor: currentColors.lightGrayBg,
              color: currentColors.darkText,
              outlineColor: currentColors.logoPrimaryBlue,
            }}
            disabled={!isAdmin && isCountryChief} // Disable if not admin and is C.Chief
          >
            <option value="">{translations.allCountries}</option>
            {uniqueCountries.map((country) => (
              <option key={country} value={country}>{country}</option>
            ))}
          </select>
        </div>
        <div>
          <label htmlFor="filter-city" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.city}
          </label>
          <select
            id="filter-city"
            name="city"
            value={filters.city}
            onChange={handleFilterChange}
            className="w-full p-2 rounded-md border cursor-pointer"
            style={{
              borderColor: currentColors.mediumGrayText,
              backgroundColor: currentColors.lightGrayBg,
              color: currentColors.darkText,
              outlineColor: currentColors.logoPrimaryBlue,
            }}
            disabled={!filters.country && isCountryChief} // Disable if country is restricted and no country filter is selected
          >
            <option value="">{translations.allCities}</option>
            {uniqueCities.map((city) => (
              <option key={city} value={city}>{city}</option>
            ))}
          </select>
        </div>
      </div>
      <div className="w-full text-right mb-4">
        <button
          onClick={handleClearFilters}
          className="px-4 py-2 rounded-md font-medium flex items-center justify-center transition-colors duration-200 cursor-pointer inline-flex"
          style={{ backgroundColor: currentColors.logoPrimaryBlue, color: currentColors.whiteText }}
        >
          <RotateCcw size={18} className="mr-2" /> {translations.clearFilters}
        </button>
      </div>

      <div className="overflow-x-auto rounded-lg border" style={{ borderColor: currentColors.mediumGrayText }}>
        <table className="min-w-full divide-y divide-gray-200" style={{ borderColor: currentColors.mediumGrayText }}>
          <thead style={{ backgroundColor: currentColors.lightGrayBg }}>
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider" style={{ color: currentColors.mediumGrayText }}>
                {translations.nameSurnameHeader}
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider" style={{ color: currentColors.mediumGrayText }}>
                {translations.countryHeader}
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider" style={{ color: currentColors.mediumGrayText }}>
                {translations.cityHeader}
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider" style={{ color: currentColors.mediumGrayText }}>
                {translations.roleHeader}
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider" style={{ color: currentColors.mediumGrayText }}></th>
            </tr>
          </thead>
          <tbody style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}>
            {filteredUsers.length > 0 ? (
              filteredUsers.map((user) => (
                <tr key={user.id} className="border-t hover:bg-gray-50 transition-colors duration-150" style={{ borderColor: currentColors.lightGrayBg }}>
                  <td className="px-6 py-4 text-sm font-medium whitespace-nowrap">
                    {user.name} {user.surname}
                  </td>
                  <td className="px-6 py-4 text-sm whitespace-nowrap">
                    {user.country}
                  </td>
                  <td className="px-6 py-4 text-sm whitespace-nowrap">
                    {user.city}
                  </td>
                  <td className="px-6 py-4 text-sm whitespace-nowrap">
                    {user.role}
                  </td>
                  <td className="px-6 py-4 text-sm text-right whitespace-nowrap">
                    <button
                      onClick={() => handleEditUser(user.id)}
                      className={`bg-blue-500 hover:bg-blue-600 text-white font-bold py-1.5 px-3 rounded-md transition-colors duration-200 mr-2
                      ${!(isAdmin || isCountryChief) ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}
                      disabled={!(isAdmin || isCountryChief)}
                    >
                      {translations.editButton}
                    </button>
                    <button
                      onClick={() => handleDeleteUser(user)}
                      className={`bg-red-500 hover:bg-red-600 text-white font-bold py-1.5 px-3 rounded-md transition-colors duration-200
                      ${!(isAdmin || isCountryChief) ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}
                      disabled={!(isAdmin || isCountryChief)}
                    >
                      {translations.deleteButton}
                    </button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan={5} className="px-6 py-4 whitespace-nowrap text-sm text-center" style={{ color: currentColors.mediumGrayText }}>
                  {translations.noUsersFound}
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}

// New User Form Page (Company) (New) - Updated with profile picture
function NewCompanyUserFormPage({ currentColors, translations, setActiveRoute, companyUsers, setCompanyUsers, stores, setShowDialog, setDialogTitle, setDialogMessage, setDialogType, setDialogCallback, profileUser }) {
  const isAdmin = profileUser?.role === "Admin";
  const isCountryChief = profileUser?.role === "Country Chief";

  const initialCountry = isAdmin ? "" : profileUser?.country || "";

  const [formData, setFormData] = useState({
    id: companyUsers.length > 0 ? Math.max(...companyUsers.map(u => u.id)) + 1 : 101, // Start company IDs from 101
    name: "",
    surname: "",
    dob: "",
    country: initialCountry,
    city: "",
    role: "Country Chief", // Default company role
    email: "",
    password: "",
    repeatPassword: "",
    profilePicture: null, // New field for profile picture
  });

  const [formErrors, setFormErrors] = useState({});
  const [showPassword, setShowPassword] = useState(false);
  const [showRepeatPassword, setShowRepeatPassword] = useState(false);
  const fileInputRef = useRef(null); // Ref for hidden file input

  const countryOptions = useMemo(() => {
    if (isAdmin) {
      return [...new Set(stores.map(s => s.country))].map(c => ({ value: c, label: c })).sort((a,b) => a.label.localeCompare(b.label));
    } else if (isCountryChief) {
      return [{ value: profileUser?.country, label: profileUser?.country }];
    }
    return [];
  }, [stores, isAdmin, isCountryChief, profileUser]);

  const cityOptions = useMemo(() => {
    if (formData.country) {
      return [...new Set(stores.filter(s => s.country === formData.country).map(s => s.city))].map(c => ({ value: c, label: c })).sort((a,b) => a.label.localeCompare(b.label));
    }
    return [];
  }, [formData.country, stores]);

  const roleOptions = [
    { value: "Country Chief", label: "Country Chief" },
    { value: "Analyst", label: "Analyst" },
    { value: "Engineer", label: "Engineer" },
  ];

  const handleFormChange = (e) => {
    const { name, value, type, checked, files } = e.target;

    if (name === "profilePicture" && files && files[0]) {
      const file = files[0];
      const reader = new FileReader();
      reader.onloadend = () => {
        setFormData((prev) => ({ ...prev, profilePicture: reader.result }));
      };
      reader.readAsDataURL(file);
      setFormErrors(prevErrors => ({ ...prevErrors, profilePicture: '' }));
    } else {
      setFormData((prev) => {
        const newState = {
          ...prev,
          [name]: type === "checkbox" ? checked : value,
        };
        if (name === "country") {
          newState.city = "";
        }
        if (name === "password" || name === "repeatPassword") {
          if (name === "password" && value !== newState.repeatPassword && newState.repeatPassword !== "") {
            setFormErrors(prevErrors => ({ ...prevErrors, repeatPassword: translations.passwordMismatch }));
          } else if (name === "repeatPassword" && value !== newState.password) {
            setFormErrors(prevErrors => ({ ...prevErrors, repeatPassword: translations.passwordMismatch }));
          } else {
            setFormErrors(prevErrors => ({ ...prevErrors, repeatPassword: '' }));
          }
        }
        return newState;
      });
      setFormErrors(prevErrors => ({ ...prevErrors, [name]: '' }));
    }
  };

  const validateForm = () => {
    let errors = {};
    let isValid = true;

    const requiredFields = [
      "name", "surname", "dob", "country", "city",
      "role", "email", "password", "repeatPassword"
    ];

    requiredFields.forEach(field => {
      if (!formData[field] || (typeof formData[field] === 'string' && formData[field].trim() === '')) {
        errors[field] = translations.requiredFieldWarning;
        isValid = false;
      }
    });

    if (formData.password !== formData.repeatPassword) {
      errors.repeatPassword = translations.passwordMismatch;
      isValid = false;
    }

    if (formData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      errors.email = translations.invalidEmail;
      isValid = false;
    }

    setFormErrors(errors);
    return isValid;
  };

  const handleSaveUser = () => {
    if (validateForm()) {
      setDialogTitle(translations.confirmSaveUserTitle);
      setDialogMessage(translations.confirmSaveUserMessage);
      setDialogType("confirm");
      setDialogCallback(() => () => {
        const newUser = { ...formData };
        delete newUser.repeatPassword;
        setCompanyUsers((prevUsers) => [...prevUsers, newUser]);
        setShowDialog(false);
        setActiveRoute("/users-company");
      });
      setShowDialog(true);
    } else {
      const firstErrorField = Object.keys(formErrors).find(key => formErrors[key]);
      if (firstErrorField) {
        document.getElementById(firstErrorField)?.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    }
  };

  const handleProfilePictureClick = () => {
    fileInputRef.current.click();
  };

  return (
    <div className="p-8 rounded-lg shadow-md" style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}>
      <h1 className="text-3xl font-semibold mb-6" style={{ color: currentColors.darkText }}>
        {translations.addNewUserTitle}
      </h1>

      <form className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
        {/* Profile Picture Upload */}
        <div className="md:col-span-2 flex flex-col items-center mb-4">
          <label htmlFor="profilePicture" className="block text-sm font-medium mb-2" style={{ color: currentColors.darkText }}>
            {translations.profilePictureLabel}
          </label>
          <div
            className="w-32 h-32 rounded-full overflow-hidden border-2 border-gray-300 flex items-center justify-center mb-3 cursor-pointer hover:border-blue-500 transition-colors duration-200"
            style={{ borderColor: currentColors.mediumGrayText }}
            onClick={handleProfilePictureClick}
          >
            {formData.profilePicture ? (
              <img src={formData.profilePicture} alt="Profile" className="w-full h-full object-cover" />
            ) : (
              <Camera size={64} color={currentColors.mediumGrayText} />
            )}
          </div>
          <input
            type="file"
            id="profilePicture"
            name="profilePicture"
            accept="image/*"
            onChange={handleFormChange}
            ref={fileInputRef} // Assign ref
            className="hidden" // Hide the default file input
          />
          {formErrors.profilePicture && <p className="text-red-500 text-xs mt-1">{formErrors.profilePicture}</p>}
        </div>

        <div>
          <label htmlFor="name" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.employeeNameLabel} <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.name ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          />
          {formErrors.name && <p className="text-red-500 text-xs mt-1">{formErrors.name}</p>}
        </div>
        <div>
          <label htmlFor="surname" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.employeeSurnameLabel} <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="surname"
            name="surname"
            value={formData.surname}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.surname ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          />
          {formErrors.surname && <p className="text-red-500 text-xs mt-1">{formErrors.surname}</p>}
        </div>
        <div>
          <label htmlFor="dob" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.dobLabel} <span className="text-red-500">*</span>
          </label>
          <input
            type="date"
            id="dob"
            name="dob"
            value={formData.dob}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.dob ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          />
          {formErrors.dob && <p className="text-red-500 text-xs mt-1">{formErrors.dob}</p>}
        </div>
        <div>
          <label htmlFor="country" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.countryLabel} <span className="text-red-500">*</span>
          </label>
          <select
            id="country"
            name="country"
            value={formData.country}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.country ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
            disabled={!isAdmin && isCountryChief}
          >
            <option value="">{translations.selectCountry}</option>
            {countryOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)}
          </select>
          {formErrors.country && <p className="text-red-500 text-xs mt-1">{formErrors.country}</p>}
        </div>
        <div>
          <label htmlFor="city" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.cityLabel} <span className="text-red-500">*</span>
          </label>
          <select
            id="city"
            name="city"
            value={formData.city}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.city ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
            disabled={!formData.country}
          >
            <option value="">{translations.selectCity}</option>
            {cityOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)}
          </select>
          {formErrors.city && <p className="text-red-500 text-xs mt-1">{formErrors.city}</p>}
        </div>
        <div>
          <label htmlFor="role" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.roleLabel} <span className="text-red-500">*</span>
          </label>
          <select
            id="role"
            name="role"
            value={formData.role}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.role ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          >
            {roleOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)}
          </select>
          {formErrors.role && <p className="text-red-500 text-xs mt-1">{formErrors.role}</p>}
        </div>
        <div>
          <label htmlFor="email" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.mailLabel} <span className="text-red-500">*</span>
          </label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.email ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          />
          {formErrors.email && <p className="text-red-500 text-xs mt-1">{formErrors.email}</p>}
        </div>
        <div className="relative">
          <label htmlFor="password" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.passwordLabel} <span className="text-red-500">*</span>
          </label>
          <div className={`flex items-center rounded-md border ${formErrors.password ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          >
            <input
              type={showPassword ? "text" : "password"}
              id="password"
              name="password"
              value={formData.password}
              onChange={handleFormChange}
              className="w-full p-2 focus:outline-none focus:ring-0 bg-transparent"
              style={{ color: currentColors.darkText }}
            />
            <span
              className="p-2 cursor-pointer"
              onClick={() => setShowPassword(!showPassword)}
              style={{ color: currentColors.mediumGrayText }}
            >
              {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}
            </span>
          </div>
          {formErrors.password && <p className="text-red-500 text-xs mt-1">{formErrors.password}</p>}
        </div>
        <div className="relative">
          <label htmlFor="repeatPassword" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.repeatPasswordLabel} <span className="text-red-500">*</span>
          </label>
          <div className={`flex items-center rounded-md border ${formErrors.repeatPassword ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          >
            <input
              type={showRepeatPassword ? "text" : "password"}
              id="repeatPassword"
              name="repeatPassword"
              value={formData.repeatPassword}
              onChange={handleFormChange}
              className="w-full p-2 focus:outline-none focus:ring-0 bg-transparent"
              style={{ color: currentColors.darkText }}
            />
            <span
              className="p-2 cursor-pointer"
              onClick={() => setShowRepeatPassword(!showRepeatPassword)}
              style={{ color: currentColors.mediumGrayText }}
            >
              {showRepeatPassword ? <EyeOff size={18} /> : <Eye size={18} />}
            </span>
          </div>
          {formErrors.repeatPassword && <p className="text-red-500 text-xs mt-1">{formErrors.repeatPassword}</p>}
        </div>
      </form>
      <div className="flex justify-between mt-6">
        <button
          onClick={() => setActiveRoute("/users-company")}
          className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200"
          style={{ backgroundColor: currentColors.prevButtonBg }}
        >
          {translations.removeProcessButton}
        </button>
        <button
          onClick={handleSaveUser}
          className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200"
          style={{ backgroundColor: currentColors.nextButtonBg }}
        >
          {translations.saveButton}
        </button>
      </div>
    </div>
  );
}

// Edit User Form Page (Company) (New) - Updated with profile picture
function EditCompanyUserFormPage({ currentColors, translations, setActiveRoute, companyUsers, setCompanyUsers, stores, userId, setShowDialog, setDialogTitle, setDialogMessage, setDialogType, setDialogCallback, profileUser }) {
  const currentUser = companyUsers.find(user => user.id === userId);

  const isAdmin = profileUser?.role === "Admin";
  const isCountryChief = profileUser?.role === "Country Chief";

  // Access check at the start
  if (!isAdmin && !isCountryChief) { // Only Admin and Country Chief can access this page
    return (
      <AccessDenied
        currentColors={currentColors}
        translations={translations}
        setShowDialog={setShowDialog}
        setDialogTitle={setDialogTitle}
        setDialogMessage={setDialogMessage}
        setDialogType={setDialogType}
        setDialogCallback={setDialogCallback}
        goBack={() => setActiveRoute("/users-company")}
      />
    );
  }

  // Ensure user can only edit users within their country if they are Country Chief
  if (!isAdmin && isCountryChief && currentUser?.country !== profileUser?.country) {
    return (
      <AccessDenied
        currentColors={currentColors}
        translations={translations}
        setShowDialog={setShowDialog}
        setDialogTitle={setDialogTitle}
        setDialogMessage={setDialogMessage}
        setDialogType={setDialogType}
        setDialogCallback={setDialogCallback}
        goBack={() => setActiveRoute("/users-company")}
      />
    );
  }


  const [formData, setFormData] = useState(currentUser ? { ...currentUser, repeatPassword: currentUser.password } : {});
  const [formErrors, setFormErrors] = useState({});
  const [showPassword, setShowPassword] = useState(false);
  const [showRepeatPassword, setShowRepeatPassword] = useState(false);
  const fileInputRef = useRef(null); // Ref for hidden file input

  useEffect(() => {
    if (!currentUser) {
      setActiveRoute("/users-company");
      return;
    }
    setFormData(currentUser ? { ...currentUser, repeatPassword: currentUser.password } : {});
  }, [userId, companyUsers, setActiveRoute, currentUser]);

  const countryOptions = useMemo(() => {
    if (isAdmin) {
      return [...new Set(stores.map(s => s.country))].map(c => ({ value: c, label: c })).sort((a,b) => a.label.localeCompare(b.label));
    } else if (isCountryChief) {
      return [{ value: profileUser?.country, label: profileUser?.country }];
    }
    return [];
  }, [stores, isAdmin, isCountryChief, profileUser]);

  const cityOptions = useMemo(() => {
    if (formData.country) {
      return [...new Set(stores.filter(s => s.country === formData.country).map(s => s.city))].map(c => ({ value: c, label: c })).sort((a,b) => a.label.localeCompare(b.label));
    }
    return [];
  }, [formData.country, stores]);

  const roleOptions = [
    { value: "Country Chief", label: "Country Chief" },
    { value: "Analyst", label: "Analyst" },
    { value: "Engineer", label: "Engineer" },
  ];

  const handleFormChange = (e) => {
    const { name, value, type, checked, files } = e.target;

    if (name === "profilePicture" && files && files[0]) {
      const file = files[0];
      const reader = new FileReader();
      reader.onloadend = () => {
        setFormData((prev) => ({ ...prev, profilePicture: reader.result }));
      };
      reader.readAsDataURL(file);
      setFormErrors(prevErrors => ({ ...prevErrors, profilePicture: '' }));
    } else {
      setFormData((prev) => {
        const newState = {
          ...prev,
          [name]: type === "checkbox" ? checked : value,
        };
        if (name === "country") {
          newState.city = "";
        }
        if (name === "password" || name === "repeatPassword") {
          if (name === "password" && value !== newState.repeatPassword && newState.repeatPassword !== "") {
            setFormErrors(prevErrors => ({ ...prevErrors, repeatPassword: translations.passwordMismatch }));
          } else if (name === "repeatPassword" && value !== newState.password) {
            setFormErrors(prevErrors => ({ ...prevErrors, repeatPassword: translations.passwordMismatch }));
          } else {
            setFormErrors(prevErrors => ({ ...prevErrors, repeatPassword: '' }));
          }
        }
        return newState;
      });
      setFormErrors(prevErrors => ({ ...prevErrors, [name]: '' }));
    }
  };

  const validateForm = () => {
    let errors = {};
    let isValid = true;

    const requiredFields = [
      "name", "surname", "dob", "country", "city",
      "role", "email", "password", "repeatPassword"
    ];

    requiredFields.forEach(field => {
      if (!formData[field] || (typeof formData[field] === 'string' && formData[field].trim() === '')) {
        errors[field] = translations.requiredFieldWarning;
        isValid = false;
      }
    });

    if (formData.password !== formData.repeatPassword) {
      errors.repeatPassword = translations.passwordMismatch;
      isValid = false;
    }

    if (formData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      errors.email = translations.invalidEmail;
      isValid = false;
    }

    setFormErrors(errors);
    return isValid;
  };

  const handleSaveUser = () => {
    if (!isAdmin && !isCountryChief) { // Re-check permission on save attempt
      setShowDialog(true);
      setDialogTitle(translations.accessDeniedTitle);
      setDialogMessage(translations.accessDeniedMessage);
      setDialogType("alert");
      setDialogCallback(() => () => setShowDialog(false));
      return;
    }
    if (validateForm()) {
      setDialogTitle(translations.confirmSaveUserTitle);
      setDialogMessage(translations.confirmSaveUserMessage);
      setDialogType("confirm");
      setDialogCallback(() => () => {
        setCompanyUsers((prevUsers) =>
          prevUsers.map((user) =>
            user.id === formData.id ? { ...formData, repeatPassword: undefined } : user
          )
        );
        setShowDialog(false);
        setActiveRoute("/users-company");
      });
      setShowDialog(true);
    } else {
      const firstErrorField = Object.keys(formErrors).find(key => formErrors[key]);
      if (firstErrorField) {
        document.getElementById(firstErrorField)?.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    }
  };

  const handleDiscard = () => {
    setActiveRoute("/users-company");
  };

  const handleProfilePictureClick = () => {
    fileInputRef.current.click();
  };

  if (!currentUser) {
    return (
      <div className="p-8 rounded-lg shadow-md" style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}>
        <h1 className="text-3xl font-semibold mb-6" style={{ color: currentColors.darkText }}>
          {translations.editUserTitle}
        </h1>
        <p className="text-red-500">{translations.userNotFound}</p>
        <div className="mt-6">
          <button
            onClick={() => setActiveRoute("/users-company")}
            className="px-4 py-2 rounded-md font-medium transition-colors duration-200 cursor-pointer"
            style={{ backgroundColor: currentColors.logoPrimaryBlue, color: currentColors.whiteText }}
          >
            {translations.backToUserList}
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="p-8 rounded-lg shadow-md" style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}>
      <h1 className="text-3xl font-semibold mb-6" style={{ color: currentColors.darkText }}>
        {translations.editUserTitle}: {currentUser.name} {currentUser.surname}
      </h1>

      <form className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
        {/* Profile Picture Upload */}
        <div className="md:col-span-2 flex flex-col items-center mb-4">
          <label htmlFor="profilePicture" className="block text-sm font-medium mb-2" style={{ color: currentColors.darkText }}>
            {translations.profilePictureLabel}
          </label>
          <div
            className="w-32 h-32 rounded-full overflow-hidden border-2 border-gray-300 flex items-center justify-center mb-3 cursor-pointer hover:border-blue-500 transition-colors duration-200"
            style={{ borderColor: currentColors.mediumGrayText }}
            onClick={handleProfilePictureClick}
          >
            {formData.profilePicture ? (
              <img src={formData.profilePicture} alt="Profile" className="w-full h-full object-cover" />
            ) : (
              <Camera size={64} color={currentColors.mediumGrayText} />
            )}
          </div>
          <input
            type="file"
            id="profilePicture"
            name="profilePicture"
            accept="image/*"
            onChange={handleFormChange}
            ref={fileInputRef} // Assign ref
            className="hidden" // Hide the default file input
          />
          {formErrors.profilePicture && <p className="text-red-500 text-xs mt-1">{formErrors.profilePicture}</p>}
        </div>

        <div>
          <label htmlFor="name" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.employeeNameLabel} <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name || ''}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.name ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          />
          {formErrors.name && <p className="text-red-500 text-xs mt-1">{formErrors.name}</p>}
        </div>
        <div>
          <label htmlFor="surname" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.employeeSurnameLabel} <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="surname"
            name="surname"
            value={formData.surname || ''}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.surname ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          />
          {formErrors.surname && <p className="text-red-500 text-xs mt-1">{formErrors.surname}</p>}
        </div>
        <div>
          <label htmlFor="dob" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.dobLabel} <span className="text-red-500">*</span>
          </label>
          <input
            type="date"
            id="dob"
            name="dob"
            value={formData.dob || ''}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.dob ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          />
          {formErrors.dob && <p className="text-red-500 text-xs mt-1">{formErrors.dob}</p>}
        </div>
        <div>
          <label htmlFor="country" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.countryLabel} <span className="text-red-500">*</span>
          </label>
          <select
            id="country"
            name="country"
            value={formData.country}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.country ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
            disabled={!isAdmin && isCountryChief}
          >
            <option value="">{translations.selectCountry}</option>
            {countryOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)}
          </select>
          {formErrors.country && <p className="text-red-500 text-xs mt-1">{formErrors.country}</p>}
        </div>
        <div>
          <label htmlFor="city" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.cityLabel} <span className="text-red-500">*</span>
          </label>
          <select
            id="city"
            name="city"
            value={formData.city}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.city ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
            disabled={!formData.country}
          >
            <option value="">{translations.selectCity}</option>
            {cityOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)}
          </select>
          {formErrors.city && <p className="text-red-500 text-xs mt-1">{formErrors.city}</p>}
        </div>
        <div>
          <label htmlFor="role" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.roleLabel} <span className="text-red-500">*</span>
          </label>
          <select
            id="role"
            name="role"
            value={formData.role}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.role ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          >
            {roleOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)}
          </select>
          {formErrors.role && <p className="text-red-500 text-xs mt-1">{formErrors.role}</p>}
        </div>
        <div>
          <label htmlFor="email" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.mailLabel} <span className="text-red-500">*</span>
          </label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.email ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          />
          {formErrors.email && <p className="text-red-500 text-xs mt-1">{formErrors.email}</p>}
        </div>
        <div className="relative">
          <label htmlFor="password" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.passwordLabel} <span className="text-red-500">*</span>
          </label>
          <div className={`flex items-center rounded-md border ${formErrors.password ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          >
            <input
              type={showPassword ? "text" : "password"}
              id="password"
              name="password"
              value={formData.password}
              onChange={handleFormChange}
              className="w-full p-2 focus:outline-none focus:ring-0 bg-transparent"
              style={{ color: currentColors.darkText }}
            />
            <span
              className="p-2 cursor-pointer"
              onClick={() => setShowPassword(!showPassword)}
              style={{ color: currentColors.mediumGrayText }}
            >
              {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}
            </span>
          </div>
          {formErrors.password && <p className="text-red-500 text-xs mt-1">{formErrors.password}</p>}
        </div>
        <div className="relative">
          <label htmlFor="repeatPassword" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.repeatPasswordLabel} <span className="text-red-500">*</span>
          </label>
          <div className={`flex items-center rounded-md border ${formErrors.repeatPassword ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          >
            <input
              type={showRepeatPassword ? "text" : "password"}
              id="repeatPassword"
              name="repeatPassword"
              value={formData.repeatPassword}
              onChange={handleFormChange}
              className="w-full p-2 focus:outline-none focus:ring-0 bg-transparent"
              style={{ color: currentColors.darkText }}
            />
            <span
              className="p-2 cursor-pointer"
              onClick={() => setShowRepeatPassword(!showRepeatPassword)}
              style={{ color: currentColors.mediumGrayText }}
            >
              {showRepeatPassword ? <EyeOff size={18} /> : <Eye size={18} />}
            </span>
          </div>
          {formErrors.repeatPassword && <p className="text-red-500 text-xs mt-1">{formErrors.repeatPassword}</p>}
        </div>
      </form>
      <div className="flex justify-between mt-6">
        <button
          onClick={handleDiscard}
          className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200"
          style={{ backgroundColor: currentColors.prevButtonBg }}
        >
          {translations.discardButton}
        </button>
        <button
          onClick={handleSaveUser}
          className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200"
          style={{ backgroundColor: currentColors.nextButtonBg }}
        >
          {translations.saveButton}
        </button>
      </div>
    </div>
  );
}

// Profile Details Page Component
function ProfileDetailsPage({ currentColors, translations, setActiveRoute, profileUser, setProfileUser, setShowDialog, setDialogTitle, setDialogMessage, setDialogType, setDialogCallback }) {
  const [formData, setFormData] = useState(profileUser || {});
  const [formErrors, setFormErrors] = useState({});
  const fileInputRef = useRef(null);

  useEffect(() => {
    // Sync formData with profileUser when profileUser changes
    setFormData(profileUser || {});
  }, [profileUser]);

  const handleFormChange = (e) => {
    const { name, value, files } = e.target;
    if (name === "profilePicture" && files && files[0]) {
      const file = files[0];
      const reader = new FileReader();
      reader.onloadend = () => {
        setFormData((prev) => ({ ...prev, profilePicture: reader.result }));
      };
      reader.readAsDataURL(file);
      setFormErrors(prevErrors => ({ ...prevErrors, profilePicture: '' }));
    } else {
      setFormData((prev) => ({ ...prev, [name]: value }));
      setFormErrors(prevErrors => ({ ...prevErrors, [name]: '' }));
    }
  };

  const validateForm = () => {
    let errors = {};
    let isValid = true;

    if (!formData.name || formData.name.trim() === '') {
      errors.name = translations.requiredFieldWarning;
      isValid = false;
    }
    if (!formData.surname || formData.surname.trim() === '') {
      errors.surname = translations.requiredFieldWarning;
      isValid = false;
    }
    if (!formData.dob || formData.dob.trim() === '') {
      errors.dob = translations.requiredFieldWarning;
      isValid = false;
    }

    setFormErrors(errors);
    return isValid;
  };

  const handleSave = () => {
    if (validateForm()) {
      setDialogTitle(translations.confirmSaveUserTitle);
      setDialogMessage(translations.confirmSaveUserMessage);
      setDialogType("confirm");
      setDialogCallback(() => () => {
        setProfileUser(formData);
        setShowDialog(false);
        setActiveRoute("/"); // Redirect to Dashboard
      });
      setShowDialog(true);
    } else {
      const firstErrorField = Object.keys(formErrors).find(key => formErrors[key]);
      if (firstErrorField) {
        document.getElementById(firstErrorField)?.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    }
  };

  const handleDiscard = () => {
    setActiveRoute("/"); // Redirect to Dashboard without saving
  };

  const handleProfilePictureClick = () => {
    fileInputRef.current.click();
  };

  if (!profileUser) {
    return (
      <div className="p-8 rounded-lg shadow-md" style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}>
        <h1 className="text-3xl font-semibold mb-6" style={{ color: currentColors.darkText }}>
          {translations.profileDetailsTitle}
        </h1>
        <p className="text-red-500">{translations.userNotFound}</p>
        <div className="mt-6">
          <button
            onClick={() => setActiveRoute("/")}
            className="px-4 py-2 rounded-md font-medium transition-colors duration-200 cursor-pointer"
            style={{ backgroundColor: currentColors.logoPrimaryBlue, color: currentColors.whiteText }}
          >
            {translations.backToDashboard}
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="p-8 rounded-lg shadow-md" style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}>
      <h1 className="text-3xl font-semibold mb-6 text-center" style={{ color: currentColors.darkText }}>
        {translations.profileDetailsTitle}
      </h1>

      <div className="flex flex-col items-center mb-6">
        <label htmlFor="profilePicture" className="block text-sm font-medium mb-2" style={{ color: currentColors.darkText }}>
          {translations.profilePictureLabel}
        </label>
        <div
          className="w-32 h-32 rounded-full overflow-hidden border-2 border-gray-300 flex items-center justify-center mb-3 cursor-pointer hover:border-blue-500 transition-colors duration-200"
          style={{ borderColor: currentColors.mediumGrayText }}
          onClick={handleProfilePictureClick}
        >
          {formData.profilePicture ? (
            <img src={formData.profilePicture} alt="Profile" className="w-full h-full object-cover" />
          ) : (
              // Placeholder for profile picture if none exists
            <Camera size={64} color={currentColors.mediumGrayText} />
          )}
        </div>
        <input
          type="file"
          id="profilePicture"
          name="profilePicture"
          accept="image/*"
          onChange={handleFormChange}
          ref={fileInputRef}
          className="hidden"
        />
        {formErrors.profilePicture && <p className="text-red-500 text-xs mt-1">{formErrors.profilePicture}</p>}
      </div>

      <form className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
        <div>
          <label htmlFor="name" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.employeeNameLabel} <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name || ''}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.name ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          />
          {formErrors.name && <p className="text-red-500 text-xs mt-1">{formErrors.name}</p>}
        </div>
        <div>
          <label htmlFor="surname" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.employeeSurnameLabel} <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="surname"
            name="surname"
            value={formData.surname || ''}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.surname ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          />
          {formErrors.surname && <p className="text-red-500 text-xs mt-1">{formErrors.surname}</p>}
        </div>
        <div>
          <label htmlFor="dob" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.dobLabel} <span className="text-red-500">*</span>
          </label>
          <input
            type="date"
            id="dob"
            name="dob"
            value={formData.dob || ''}
            onChange={handleFormChange}
            className={`w-full p-2 rounded-md border ${formErrors.dob ? 'border-red-500' : 'border-gray-300'}`}
            style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
          />
          {formErrors.dob && <p className="text-red-500 text-xs mt-1">{formErrors.dob}</p>}
        </div>
        <div>
          <label htmlFor="role" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.roleLabel}
          </label>
          <input
            type="text"
            id="role"
            name="role"
            value={formData.role || ''}
            className="w-full p-2 rounded-md border border-gray-300 bg-gray-100 cursor-not-allowed"
            style={{ backgroundColor: currentColors.lightGrayBg, color: currentColors.mediumGrayText }}
            readOnly
            disabled
          />
        </div>
        <div>
          <label htmlFor="country" className="block text-sm font-medium mb-1" style={{ color: currentColors.darkText }}>
            {translations.countryLabel}
          </label>
          <input
            type="text"
            id="country"
            name="country"
            value={formData.country || ''}
            className="w-full p-2 rounded-md border border-gray-300 bg-gray-100 cursor-not-allowed"
            style={{ backgroundColor: currentColors.lightGrayBg, color: currentColors.mediumGrayText }}
            readOnly
            disabled
          />
        </div>
      </form>
      <div className="flex justify-between mt-6">
        <button
          onClick={handleDiscard}
          className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200"
          style={{ backgroundColor: currentColors.prevButtonBg }}
        >
          {translations.discardChangesButton}
        </button>
        <button
          onClick={handleSave}
          className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200"
          style={{ backgroundColor: currentColors.nextButtonBg }}
        >
          {translations.saveButton}
        </button>
      </div>
    </div>
  );
}


function App() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isSidebarExpanded, setIsSidebarExpanded] = useState(true);
  const [isDarkMode, setIsDarkMode] = useState(() => {
    const savedMode = localStorage.getItem('isDarkMode');
    return savedMode === 'true' ? true : false;
  });
  const [language, setLanguage] = useState(() => localStorage.getItem('language') || "en");
  const [activeRoute, setActiveRoute] = useState("/login");
  const [editingUserId, setEditingUserId] = useState(null);
  const [showProfileDropdown, setShowProfileDropdown] = useState(false); // State for profile dropdown

  // State for the logged-in user's profile details
  const [profileUser, setProfileUser] = useState(() => {
    const savedProfile = localStorage.getItem('profileUser');
    return savedProfile ? JSON.parse(savedProfile) : null;
  });

  // Effect to save theme preference to localStorage
  useEffect(() => {
    localStorage.setItem('isDarkMode', isDarkMode);
  }, [isDarkMode]);

  // Effect to save language preference to localStorage
  useEffect(() => {
    localStorage.setItem('language', language);
  }, [language]);

  // Effect to save profileUser to localStorage
  useEffect(() => {
    if (profileUser) {
      localStorage.setItem('profileUser', JSON.stringify(profileUser));
    } else {
      localStorage.removeItem('profileUser');
    }
  }, [profileUser]);


  const [showDialog, setShowDialog] = useState(false);
  const [dialogTitle, setDialogTitle] = useState("");
  const [dialogMessage, setDialogMessage] = useState("");
  const [dialogType, setDialogType] = useState("alert");
  const [dialogCallback, setDialogCallback] = useState(null);

  const [stores] = useState([
    {
      id: 1,
      name: "EilSense Market A",
      country: "USA",
      city: "New York",
      branch: "Downtown",
      address: "123 Main St, New York, NY 10001",
      server_token: "SRV_XYZ123ABCDEFGHIJKLMN",
      status: "active",
      created_at: "2023-01-15T10:00:00Z",
      working_hours: "09:00-21:00",
      allDayOpen: false,
      openingHour: "09:00",
      closingHour: "21:00",
      ownerName: "Alice",
      ownerSurname: "Smith",
      installerName: "Bob",
      installerSurname: "Johnson",
      addBranch: true,
      server_software_version: "1.0.5",
      last_update_date: "2025-06-10T14:30:00Z",
      num_esp32_connected: 5,
    },
    {
      id: 2,
      name: "EilSense Hypermarket B",
      country: "Turkey",
      city: "Istanbul",
      branch: "Kadıköy",
      address: "Bağdat Cd. No: 1, Kadıköy, İstanbul",
      server_token: "SRV_DEF456GHIJKLMNOPQRST",
      status: "active",
      created_at: "2023-02-20T11:30:00Z",
      working_hours: "08:00-22:00",
      allDayOpen: false,
      openingHour: "08:00",
      closingHour: "22:00",
      ownerName: "Can",
      ownerSurname: "Yilmaz",
      installerName: "Deniz",
      installerSurname: "Aslan",
      addBranch: true,
      server_software_version: "1.0.6",
      last_update_date: "2025-06-11T10:00:00Z",
      num_esp32_connected: 8,
    },
    {
      id: 3,
      name: "EilSense Express C",
      country: "Germany",
      city: "Berlin",
      branch: "Mitte",
      address: "Friedrichstr. 45, 10117 Berlin",
      server_token: "SRV_JKL789MNOPQRSTUVWXYZAB",
      status: "inactive",
      created_at: "2023-03-01T09:15:00Z",
      working_hours: "10:00-20:00",
      allDayOpen: false,
      openingHour: "10:00",
      closingHour: "20:00",
      ownerName: "Lena",
      ownerSurname: "Müller",
      installerName: "Max",
      installerSurname: "Schmidt",
      addBranch: true,
      server_software_version: "1.0.4",
      last_update_date: "2025-05-20T08:00:00Z",
      num_esp32_connected: 2,
    },
    {
      id: 4,
      name: "EilSense Mini P",
      country: "Poland",
      city: "Warsaw",
      branch: "Wola",
      address: "Prosta 1, 00-838 Warsaw",
      server_token: "SRV_PQR012STUVWXYZABCDEF",
      status: "active",
      created_at: "2023-04-10T14:00:00Z",
      working_hours: "07:00-23:00",
      allDayOpen: false,
      openingHour: "07:00",
      closingHour: "23:00",
      ownerName: "Jan",
      ownerSurname: "Kowalski",
      installerName: "Piotr",
      installerSurname: "Nowak",
      addBranch: true,
      server_software_version: "1.0.7",
      last_update_date: "2025-06-12T09:45:00Z",
      num_esp32_connected: 10,
    },
    {
      id: 5,
      name: "EilSense Asia",
      country: "Turkey",
      city: "Ankara",
      branch: "Çankaya",
      address: "Atatürk Blv. 5, Çankaya, Ankara",
      server_token: "SRV_UVW345XYZABCDEFGHIJK",
      status: "active",
      created_at: "2023-05-05T16:45:00Z",
      working_hours: "09:00-21:00",
      allDayOpen: false,
      openingHour: "09:00",
      closingHour: "21:00",
      ownerName: "Ayşe",
      ownerSurname: "Demir",
      installerName: "Emre",
      installerSurname: "Kara",
      addBranch: true,
      server_software_version: "1.0.6",
      last_update_date: "2025-06-05T11:00:00Z",
      num_esp32_connected: 4,
    },
    {
      id: 6,
      name: "EilSense World",
      country: "USA",
      city: "Los Angeles",
      branch: "Hollywood",
      address: "Sunset Blvd. 100, Los Angeles, CA 90028",
      server_token: "SRV_ABCDEF1234567890ABCD",
      status: "inactive",
      created_at: "2023-06-01T12:00:00Z",
      working_hours: "24/7",
      allDayOpen: true,
      openingHour: "00:00",
      closingHour: "00:00",
      ownerName: "Chris",
      ownerSurname: "Evans",
      installerName: "Sarah",
      installerSurname: "Connor",
      addBranch: true,
      server_software_version: "1.0.7",
      last_update_date: "2025-06-13T18:00:00Z",
      num_esp32_connected: 12,
    },
    {
      id: 7,
      name: "EilSense Old Logs",
      country: "Poland",
      city: "Krakow",
      branch: "Old Town",
      address: "Rynek Główny 1, 31-042 Kraków",
      server_token: "SRV_OLDLOGS1234567890",
      status: "active",
      created_at: "2024-01-01T09:00:00Z",
      working_hours: "09:00-17:00",
      allDayOpen: false,
      openingHour: "09:00",
      closingHour: "17:00",
      ownerName: "Old",
      ownerSurname: "Log",
      installerName: "Log",
      installerSurname: "User",
      addBranch: true,
      server_software_version: "1.0.1",
      last_update_date: "2024-12-30T23:59:59Z",
      num_esp32_connected: 1,
    },
  ]);

  const [users, setUsers] = useState([
    { id: 1, name: "Ali", surname: "Yilmaz", dob: "1990-05-10", country: "Turkey", city: "Istanbul", storeName: "EilSense Hypermarket B", addBranch: true, branch: "Kadıköy", role: "Runner", email: "ali.yilmaz@example.com", password: "password123", profilePicture: null },
    { id: 2, name: "Maria", surname: "Kowalska", dob: "1988-11-22", country: "Poland", city: "Warsaw", storeName: "EilSense Mini P", addBranch: true, branch: "Wola", role: "Runner", email: "maria.kowalska@example.com", password: "password123", profilePicture: null },
    { id: 3, name: "John", surname: "Doe", dob: "1992-01-15", country: "USA", city: "New York", storeName: "EilSense Market A", addBranch: true, branch: "Downtown", role: "Runner", email: "john.doe@example.com", password: "password123", profilePicture: null },
    { id: 4, name: "Fatma", surname: "Demir", dob: "1995-03-20", country: "Turkey", city: "Ankara", storeName: "EilSense Asia", addBranch: true, branch: "Çankaya", role: "Runner", email: "fatma.demir@example.com", password: "password123", profilePicture: null },
    { id: 5, name: "Hans", surname: "Müller", dob: "1980-07-01", country: "Germany", city: "Berlin", storeName: "EilSense Express C", addBranch: true, branch: "Mitte", role: "Runner", email: "hans.muller@example.com", password: "password123", profilePicture: null },
  ]);

  const [companyUsers, setCompanyUsers] = useState([
    { id: 101, name: "Emre", surname: "Can", dob: "1985-02-01", country: "Turkey", city: "Istanbul", role: "Country Chief", email: "emre.can@company.com", password: "comp_password1", profilePicture: null },
    { id: 102, name: "Sophie", surname: "Leclerc", dob: "1993-08-15", country: "Germany", city: "Berlin", role: "Analyst", email: "sophie.leclerc@company.com", password: "comp_password2", profilePicture: null },
    { id: 103, name: "David", surname: "Chen", dob: "1990-04-20", country: "USA", city: "New York", role: "Engineer", email: "david.chen@company.com", password: "comp_password3", profilePicture: null },
  ]);

  const lightColors = {
    headerSidebarBg: "#212B36",
    logoPrimaryBlue: "#00CFFF",
    logoSecondaryBlue: "#007BFF",
    pureWhite: "#FFFFFF",
    lightGrayBg: "#F0F2F5",
    darkText: "#1F2937",
    mediumGrayText: "#6B7280",
    whiteText: "#FFFFFF",
    successGreen: "#28A745",
    warningOrange: "#FFC107",
    errorRed: "#DC3545",
    progressBarBorder: "#D1D5DB",
    progressBarLine: "#D1D5DB",
    progressBarActive: "#28A745",
    nextButtonBg: "#28A745",
    prevButtonBg: "#B0B0B0",
  };

  const darkColors = {
    headerSidebarBg: "#1A202C",
    logoPrimaryBlue: "#00CFFF",
    logoSecondaryBlue: "#007BFF",
    pureWhite: "#2D3748",
    lightGrayBg: "#1A202C",
    darkText: "#E2E8F0",
    mediumGrayText: "#A0AEC0",
    whiteText: "#FFFFFF",
    successGreen: "#48BB78",
    warningOrange: "#ECC94B",
    errorRed: "#FC8181",
    progressBarBorder: "#4B5563",
    progressBarLine: "#4B5563",
    progressBarActive: "#48BB78",
    nextButtonBg: "#48BB78",
    prevButtonBg: "#6B7280",
  };

  const currentColors = isDarkMode ? darkColors : lightColors;

  const appTranslations = {
    en: {
      dashboard: {
        title: "Dashboard",
        welcomeText: "Welcome to EilSense.io Management Panel!",
        instructionText:
          "This area will summarize the overall status of your system, store performance, and critical notifications. Please select the relevant sections from the left menu to perform detailed operations.",
        note: "Note: The logo in the header bar above is a representation of your EilSense.io name and logo's visual tones. Your actual logo (a transparent PNG/SVG file) will appear exactly as you want it when integrated here.",
      },
      stores: {
        title: "Stores & Branches",
        storesPlaceholderText: "This page will list and allow management of all your registered stores and branches.",
        newInstallationTitle: "New Store Installation",
        newInstallationPlaceholderText: "This page is currently under construction. Please check back later for the full installation wizard.",
        noStoresFound: "No stores found matching your criteria.",
      },
      firmware: {
        title: "Firmware Updates",
        introText: "This section is where you manage firmware updates.",
        instructionText:
          "You can distribute new software to devices from here.",
        futureFeatures:
          "Upcoming: Features to view current firmware versions and distribute new versions will be added.",
      },
      users: {
        title: "Users / Roles",
        introText: "This section is where you manage user accounts and roles.",
        instructionText: "You can add new users and define their permissions.",
        futureFeatures:
          "Upcoming: User listing, adding, editing, and deleting features will be added.",
        usersRolesTitle: "Users / Roles",
        userForSupermarketTitle: "User For Supermarket",
        userForSupermarketDesc: "Manage users associated with supermarket branches.",
        userForCompanyTitle: "User For Company",
        userForCompanyDesc: "Manage users associated with the main company.",
        addNewUserButton: "Add New User",
        store: "Store",
        allStores: "All Stores",
        country: "Country",
        allCountries: "All Countries",
        city: "City",
        allCities: "All Cities",
        clearFilters: "Clear Filters",
        nameSurnameHeader: "Name Surname",
        storeNameHeader: "Store Name",
        branchHeader: "Branch",
        countryHeader: "Country",
        cityHeader: "City",
        roleHeader: "Role",
        editButton: "Edit",
        deleteButton: "Delete",
        noUsersFound: "No users found matching your criteria.",
        confirmDeleteUserTitle: "Confirm User Delineation",
        confirmDeleteUserMessage: "Are you sure you want to delete the user",
        deleteUserSuccess: "deleted successfully!",
        deleteConfirmationPrompt: "Please type the user's full name to confirm deletion:",
        deleteConfirmationPlaceholder: "Type full name here",
        deleteConfirmationMismatch: "The typed name does not match. Deletion cancelled.",
        addNewUserTitle: "Add New User",
        employeeNameLabel: "Employee Name",
        employeeSurnameLabel: "Employee Surname",
        dobLabel: "Date of Birth",
        countryLabel: "Country",
        cityLabel: "City",
        storeNameLabel: "Store Name",
        addBranchLabel: "Add Branch",
        branchLabel: "Branch",
        roleLabel: "Role",
        mailLabel: "Email",
        passwordLabel: "Password",
        repeatPasswordLabel: "Repeat Password",
        removeProcessButton: "Remove Process",
        saveButton: "Save",
        confirmSaveUserTitle: "Confirm Save",
        confirmSaveUserMessage: "Are you sure you want to save this user?",
        passwordMismatch: "Passwords do not match.",
        requiredFieldWarning: "This field cannot be left blank.",
        invalidEmail: "Please enter a valid email address.",
        selectCountry: "Select Country",
        selectCity: "Select City",
        selectStore: "Select Store",
        editUserTitle: "Edit User",
        discardButton: "Discard",
        userNotFound: "User not found.",
        backToUserList: "Back to User List",
        comingSoon: "Coming Soon!",
        profilePictureLabel: "Profile Picture",
        profileDetailsTitle: "Profile Details",
        discardChangesButton: "Discard Changes",
        backToDashboard: "Back to Dashboard",
        accessDeniedTitle: "Access Denied",
        accessDeniedMessage: "You do not have permission to access this section.",
        goBackButton: "Go Back",
      },
      menu: {
        dashboard: "Dashboard",
        stores: "Stores & Branches",
        newInstallation: "New Installation",
        firmware: "Firmware Updates",
        users: "Users / Roles",
      },
      profile: {
        userName: "John Doe",
        profileDetails: "Profile Details",
        logOut: "Log out",
      },
      footer: {
        rights: "All Rights Reserved.",
        address: "Example St. No: 123, Example City, Country.",
        email: "Email:",
        phone: "Phone:",
        privacy: "Privacy Policy",
        terms: "Terms of Use",
      },
      login: { // Consolidated login translations here
        title: "Login",
        mailLabel: "Email",
        passwordLabel: "Password",
        rememberMe: "Remember Me",
        loginButton: "Login",
        loginError: "Invalid email or password.",
        mobileOnlyAccess: "Your login is only valid for the Mobile Application. You do not have access to this website as you are not a company employee."
      }
    },
  };

  const navItems = [
    { name: appTranslations.en.menu.dashboard, icon: Home, route: "/", access: ["Admin", "Country Chief", "Analyst", "Engineer"] },
    { name: appTranslations.en.menu.stores, icon: Store, route: "/stores", access: ["Admin", "Country Chief", "Analyst"] },
    { name: appTranslations.en.menu.newInstallation, icon: PlusCircle, route: "/new-installation", access: ["Admin", "Country Chief", "Engineer"] }, // Country Chief added access
    { name: appTranslations.en.menu.firmware, icon: Settings, route: "/firmware", access: ["Admin"] },
    { name: appTranslations.en.menu.users, icon: Users, route: "/users", access: ["Admin", "Country Chief", "Analyst", "Engineer"] },
  ];

  const logoPlaceholderUrl = `https://placehold.co/180x40/${currentColors.headerSidebarBg.substring(1)}/${currentColors.logoPrimaryBlue.substring(1)}?font=inter&text=EilSense.io`;

  const toggleTheme = () => {
    setIsDarkMode((prevMode) => !prevMode);
  };

  const handleLoginSuccess = (userData) => {
    setIsAuthenticated(true);
    setProfileUser(userData); // Set the full user data
    setActiveRoute("/");
  };

  const handleLogout = () => {
    setIsAuthenticated(false);
    setActiveRoute("/login");
    setProfileUser(null); // Clear profile user data on logout
    localStorage.removeItem('rememberedEmail'); // Clear cached login
    localStorage.removeItem('rememberedPassword'); // Clear cached password
    localStorage.removeItem('rememberMe'); // Clear remember me preference
  };

  const CustomDialog = ({ title, message, type, onConfirm, onCancel, onClose, currentColors, storeNameForConfirmation }) => {
    const [localConfirmInput, setLocalConfirmInput] = useState("");
    const [localConfirmInputError, setLocalConfirmInputError] = useState("");

    const handleConfirm = () => {
      if (type === "confirm" && storeNameForConfirmation) {
        if (localConfirmInput.trim() === storeNameForConfirmation) {
          onConfirm(localConfirmInput.trim());
        } else {
          setLocalConfirmInputError(appTranslations.en.users.deleteConfirmationMismatch);
        }
      } else {
        onConfirm();
      }
    };

    const handleCancel = () => {
      setLocalConfirmInput("");
      setLocalConfirmInputError("");
      onCancel();
    };

    const handleClose = () => {
      setLocalConfirmInput("");
      setLocalConfirmInputError("");
      onClose();
    };

    return (
      <div className="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center z-50">
        <div className="bg-white p-6 rounded-lg shadow-xl max-w-sm w-full" style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}>
          <h3 className="text-lg font-semibold mb-4" style={{ color: currentColors.darkText }}>{title}</h3>
          <p className="mb-6">{message}</p>

          {type === "confirm" && storeNameForConfirmation && (
            <div className="mb-4">
              <label htmlFor="confirmInput" className="block text-sm font-medium mb-2" style={{ color: currentColors.darkText }}>
                {appTranslations.en.users.deleteConfirmationPrompt}
              </label>
              <input
                type="text"
                id="confirmInput"
                value={localConfirmInput}
                onChange={(e) => {
                  setLocalConfirmInput(e.target.value);
                  setLocalConfirmInputError("");
                }}
                placeholder={appTranslations.en.users.deleteConfirmationPlaceholder}
                className={`w-full p-2 rounded-md border ${localConfirmInputError ? 'border-red-500' : 'border-gray-300'}`}
                style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
              />
              {localConfirmInputError && (
                <p className="text-red-500 text-xs italic mt-1">{localConfirmInputError}</p>
              )}
            </div>
          )}

          <div className="flex justify-end space-x-4">
            {type === "confirm" ? (
              <button
                onClick={handleCancel}
                className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 transition-colors duration-200"
                style={{ backgroundColor: currentColors.prevButtonBg }}
              >
                No
              </button>
            ) : null} {/* Only show 'No' button for confirm type */}
            <button
              onClick={handleConfirm}
              className={`bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-200
                ${type === "confirm" && storeNameForConfirmation && localConfirmInput.trim() !== storeNameForConfirmation ? 'opacity-50 cursor-not-allowed' : ''}
              `}
              style={{ backgroundColor: currentColors.logoSecondaryBlue }}
              disabled={type === "confirm" && storeNameForConfirmation && localConfirmInput.trim() !== storeNameForConfirmation}
            >
              {type === "confirm" ? "Yes" : "OK"}
            </button>
          </div>
        </div>
      </div>
    );
  };


  const renderMainContent = () => {
    const currentTranslations = appTranslations.en;
    const userRole = profileUser?.role;

    if (!isAuthenticated) {
      return (
        <LoginPage
          currentColors={currentColors}
          translations={currentTranslations.login}
          onLoginSuccess={handleLoginSuccess}
          users={users} // Pass all users to login page for checks
          companyUsers={companyUsers} // Pass all company users to login page for checks
        />
      );
    }

    // Role-based rendering of main content
    switch (activeRoute) {
      case "/":
        // Dashboard accessible by all authenticated users
        return (
          <div
            className="p-8 rounded-lg shadow-md"
            style={{
              backgroundColor: currentColors.pureWhite,
              color: currentColors.darkText,
            }}
          >
            <h1
              className="text-3xl font-semibold mb-6"
              style={{ color: currentColors.darkText }}
            >
              {currentTranslations.dashboard.title}
            </h1>
            <p className="mb-4">
              {currentTranslations.dashboard.welcomeText}
            </p>
            <p className="mb-4">
              {currentTranslations.dashboard.instructionText}
            </p>
            <p
              className="text-sm italic"
              style={{ color: currentColors.mediumGrayText }}
            >
              {currentTranslations.dashboard.note}
            </p>
          </div>
        );
      case "/stores":
        if (userRole === "Admin" || userRole === "Country Chief" || userRole === "Analyst") {
          return (
            <StoresPage
              currentColors={currentColors}
              translations={currentTranslations.stores}
              profileUser={profileUser}
              stores={stores}
              setShowDialog={setShowDialog}
              setDialogTitle={setDialogTitle}
              setDialogMessage={setDialogMessage}
              setDialogType={setDialogType}
              setDialogCallback={setDialogCallback}
            />
          );
        }
        return (
          <AccessDenied
            currentColors={currentColors}
            translations={currentTranslations.users}
            setShowDialog={setShowDialog}
            setDialogTitle={setDialogTitle}
            setDialogMessage={setDialogMessage}
            setDialogType={setDialogType}
            setDialogCallback={setDialogCallback}
            goBack={() => setActiveRoute("/")} // Redirect to Dashboard
          />
        );
      case "/new-installation":
        if (userRole === "Admin" || userRole === "Engineer" || userRole === "Country Chief") { // Country Chief added
          return (
            <NewInstallationPage
              currentColors={currentColors}
              translations={currentTranslations.stores}
            />
          );
        }
        return (
          <AccessDenied
            currentColors={currentColors}
            translations={currentTranslations.users}
            setShowDialog={setShowDialog}
            setDialogTitle={setDialogTitle}
            setDialogMessage={setDialogMessage}
            setDialogType={setDialogType}
            setDialogCallback={setDialogCallback}
            goBack={() => setActiveRoute("/")} // Redirect to Dashboard
          />
        );
      case "/firmware":
        if (userRole === "Admin") {
          return (
            <div
              className="p-8 rounded-lg shadow-md"
              style={{
                backgroundColor: currentColors.pureWhite,
                color: currentColors.darkText,
              }}
            >
              <h1
                className="text-3xl font-semibold mb-6"
                style={{ color: currentColors.darkText }}
              >
                {currentTranslations.firmware.title}
              </h1>
              <p className="mb-4">{currentTranslations.firmware.introText}</p>
              <p className="mb-4">
                {currentTranslations.firmware.instructionText}
              </p>
              <p className="mb-4">
                {currentTranslations.firmware.futureFeatures}
              </p>
            </div>
          );
        }
        return (
          <AccessDenied
            currentColors={currentColors}
            translations={currentTranslations.users}
            setShowDialog={setShowDialog}
            setDialogTitle={setDialogTitle}
            setDialogMessage={setDialogMessage}
            setDialogType={setDialogType}
            setDialogCallback={setDialogCallback}
            goBack={() => setActiveRoute("/")} // Redirect to Dashboard
          />
        );
      case "/users":
        if (userRole === "Admin" || userRole === "Country Chief" || userRole === "Analyst" || userRole === "Engineer") {
          return (
            <UsersAndRolesPage
              currentColors={currentColors}
              translations={currentTranslations.users}
              setActiveRoute={setActiveRoute}
              profileUser={profileUser}
              setShowDialog={setShowDialog}
              setDialogTitle={setDialogTitle}
              setDialogMessage={setDialogMessage}
              setDialogType={setDialogType}
              setDialogCallback={setDialogCallback}
            />
          );
        }
        return (
          <AccessDenied
            currentColors={currentColors}
            translations={currentTranslations.users}
            setShowDialog={setShowDialog}
            setDialogTitle={setDialogTitle}
            setDialogMessage={setDialogMessage}
            setDialogType={setDialogType}
            setDialogCallback={setDialogCallback}
            goBack={() => setActiveRoute("/")}
          />
        );
      case "/users-supermarket":
        if (userRole === "Admin" || userRole === "Country Chief" || userRole === "Analyst" || userRole === "Engineer") {
          return (
            <UsersForSupermarketPage
              currentColors={currentColors}
              translations={currentTranslations.users}
              setActiveRoute={setActiveRoute}
              users={users}
              setUsers={setUsers}
              stores={stores}
              setShowDialog={setShowDialog}
              setDialogTitle={setDialogTitle}
              setDialogMessage={setDialogMessage}
              setDialogType={setDialogType}
              setDialogCallback={setDialogCallback}
              profileUser={profileUser}
            />
          );
        }
        return (
          <AccessDenied
            currentColors={currentColors}
            translations={currentTranslations.users}
            setShowDialog={setShowDialog}
            setDialogTitle={setDialogTitle}
            setDialogMessage={setDialogMessage}
            setDialogType={setDialogType}
            setDialogCallback={setDialogCallback}
            goBack={() => setActiveRoute("/users")}
          />
        );
      case "/users-supermarket/add":
        if (userRole === "Admin" || userRole === "Country Chief" || userRole === "Engineer") {
          return (
            <NewUserFormPage
              currentColors={currentColors}
              translations={currentTranslations.users}
              setActiveRoute={setActiveRoute}
              users={users}
              setUsers={setUsers}
              stores={stores}
              setShowDialog={setShowDialog}
              setDialogTitle={setDialogTitle}
              setDialogMessage={setDialogMessage}
              setDialogType={setDialogType}
              setDialogCallback={setDialogCallback}
              profileUser={profileUser}
            />
          );
        }
        return (
          <AccessDenied
            currentColors={currentColors}
            translations={currentTranslations.users}
            setShowDialog={setShowDialog}
            setDialogTitle={setDialogTitle}
            setDialogMessage={setDialogMessage}
            setDialogType={setDialogType}
            setDialogCallback={setDialogCallback}
            goBack={() => setActiveRoute("/users-supermarket")}
          />
        );
      case (activeRoute.match(/\/users-supermarket\/edit\/(\d+)/) || {}).input:
        // Pass userId if it matches the pattern
        const matchSupermarketEdit = activeRoute.match(/\/users-supermarket\/edit\/(\d+)/);
        if (matchSupermarketEdit && (userRole === "Admin" || userRole === "Country Chief" || userRole === "Analyst")) {
          const userId = parseInt(matchSupermarketEdit[1]);
          return (
            <EditUserFormPage
              currentColors={currentColors}
              translations={currentTranslations.users}
              setActiveRoute={setActiveRoute}
              users={users}
              setUsers={setUsers}
              stores={stores}
              userId={userId}
              setShowDialog={setShowDialog}
              setDialogTitle={setDialogTitle}
              setDialogMessage={setDialogMessage}
              setDialogType={setDialogType}
              setDialogCallback={setDialogCallback}
              profileUser={profileUser}
            />
          );
        }
        return (
          <AccessDenied
            currentColors={currentColors}
            translations={currentTranslations.users}
            setShowDialog={setShowDialog}
            setDialogTitle={setDialogTitle}
            setDialogMessage={setDialogMessage}
            setDialogType={setDialogType}
            setDialogCallback={setDialogCallback}
            goBack={() => setActiveRoute("/users-supermarket")}
          />
        );
      case "/users-company":
        if (userRole === "Admin" || userRole === "Country Chief") {
          return (
            <UsersForCompanyPage
              currentColors={currentColors}
              translations={currentTranslations.users}
              setActiveRoute={setActiveRoute}
              companyUsers={companyUsers}
              setCompanyUsers={setCompanyUsers}
              stores={stores}
              setShowDialog={setShowDialog}
              setDialogTitle={setDialogTitle}
              setDialogMessage={setDialogMessage}
              setDialogType={setDialogType}
              setDialogCallback={setDialogCallback}
              profileUser={profileUser}
            />
          );
        }
        return (
          <AccessDenied
            currentColors={currentColors}
            translations={currentTranslations.users}
            setShowDialog={setShowDialog}
            setDialogTitle={setDialogTitle}
            setDialogMessage={setDialogMessage}
            setDialogType={setDialogType}
            setDialogCallback={setDialogCallback}
            goBack={() => setActiveRoute("/users")}
          />
        );
      case "/users-company/add":
        if (userRole === "Admin" || userRole === "Country Chief") { // Engineer removed
          return (
            <NewCompanyUserFormPage
              currentColors={currentColors}
              translations={currentTranslations.users}
              setActiveRoute={setActiveRoute}
              companyUsers={companyUsers}
              setCompanyUsers={setCompanyUsers}
              stores={stores}
              setShowDialog={setShowDialog}
              setDialogTitle={setDialogTitle}
              setDialogMessage={setDialogMessage}
              setDialogType={setDialogType}
              setDialogCallback={setDialogCallback}
              profileUser={profileUser}
            />
          );
        }
        return (
          <AccessDenied
            currentColors={currentColors}
            translations={currentTranslations.users}
            setShowDialog={setShowDialog}
            setDialogTitle={setDialogTitle}
            setDialogMessage={setDialogMessage}
            setDialogType={setDialogType}
            setDialogCallback={setDialogCallback}
            goBack={() => setActiveRoute("/users-company")}
          />
        );
      case (activeRoute.match(/\/users-company\/edit\/(\d+)/) || {}).input:
        const matchCompanyEdit = activeRoute.match(/\/users-company\/edit\/(\d+)/);
        if (matchCompanyEdit && (userRole === "Admin" || userRole === "Country Chief")) { // Engineer removed
          const userId = parseInt(matchCompanyEdit[1]);
          return (
            <EditCompanyUserFormPage
              currentColors={currentColors}
              translations={currentTranslations.users}
              setActiveRoute={setActiveRoute}
              companyUsers={companyUsers}
              setCompanyUsers={setCompanyUsers}
              stores={stores}
              userId={userId}
              setShowDialog={setShowDialog}
              setDialogTitle={setDialogTitle}
              setDialogMessage={setDialogMessage}
              setDialogType={setDialogType}
              setDialogCallback={setDialogCallback}
              profileUser={profileUser}
            />
          );
        }
        return (
          <AccessDenied
            currentColors={currentColors}
            translations={currentTranslations.users}
            setShowDialog={setShowDialog}
            setDialogTitle={setDialogTitle}
            setDialogMessage={setDialogMessage}
            setDialogType={setDialogType}
            setDialogCallback={setDialogCallback}
            goBack={() => setActiveRoute("/users-company")}
          />
        );
      case "/profile-details":
        // Profile details page is accessible by any logged-in user
        return (
          <ProfileDetailsPage
            currentColors={currentColors}
            translations={currentTranslations.users}
            setActiveRoute={setActiveRoute}
            profileUser={profileUser}
            setProfileUser={setProfileUser}
            setShowDialog={setShowDialog}
            setDialogTitle={setDialogTitle}
            setDialogMessage={setDialogMessage}
            setDialogType={setDialogType}
            setDialogCallback={setDialogCallback}
          />
        );
      default:
        // Default to dashboard if route is not recognized or not allowed
        return (
          <div
            className="p-8 rounded-lg shadow-md"
            style={{
              backgroundColor: currentColors.pureWhite,
              color: currentColors.darkText,
            }}
          >
            <h1
              className="text-3xl font-semibold mb-6"
              style={{ color: currentColors.darkText }}
            >
              {currentTranslations.dashboard.title}
            </h1>
            <p>{currentTranslations.dashboard.welcomeText}</p>
          </div>
        );
    }
  };

  return (
    <div
      className="min-h-screen flex flex-col"
      style={{ backgroundColor: currentColors.lightGrayBg }}
    >
      {isAuthenticated && ( // Only show header if authenticated
        <header
          className="flex items-center p-4 shadow-md z-30 fixed w-full top-0 left-0"
          style={{ backgroundColor: currentColors.headerSidebarBg }}
        >
          <button
            onClick={() => setIsSidebarExpanded(!isSidebarExpanded)}
            className="text-white focus:outline-none p-2 rounded-full hover:bg-opacity-20 transition-colors duration-200 cursor-pointer"
          >
            {isSidebarExpanded ? (
              <X size={24} style={{ color: currentColors.whiteText }} />
            ) : (
              <Menu size={24} style={{ color: currentColors.whiteText }} />
            )}{" "}
          </button>

          <div className="flex-grow flex justify-center">
            <img
              src={logoPlaceholderUrl}
              alt="EilSense.io Logo"
              className="h-10 w-auto rounded-md"
            />
          </div>

          <div className="relative flex items-center space-x-4">
            <button
              onClick={toggleTheme}
              className="relative text-white focus:outline-none p-2 rounded-full hover:bg-opacity-20 cursor-pointer"
            >
              <Sun
                size={24}
                style={{ color: currentColors.whiteText }}
                className={`absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 transition-opacity duration-300 ease-in-out ${
                  isDarkMode ? "opacity-100" : "opacity-0"
                }`}
              />
              <Moon
                size={24}
                style={{ color: currentColors.whiteText }}
                className={`absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 transition-opacity duration-300 ease-in-out ${
                  isDarkMode ? "opacity-0" : "opacity-100"
                }`}
              />
            </button>

            <div
              className="flex items-center cursor-pointer relative"
              onClick={() => setShowProfileDropdown(!showProfileDropdown)}
            >
              <img
                src={profileUser?.profilePicture || `https://placehold.co/40x40/c2c2c2/FFFFFF/png?text=${profileUser?.name.charAt(0) || ''}${profileUser?.surname.charAt(0) || ''}`}
                alt="Profile"
                className="w-10 h-10 rounded-full border-2 border-white object-cover"
              />
              <span
                className="font-medium hidden sm:block ml-2"
                style={{ color: currentColors.whiteText }}
              >
                {profileUser ? `${profileUser.name} ${profileUser.surname}` : appTranslations.en.profile.userName}
              </span>
              <ChevronDown size={20} className="ml-1" style={{ color: currentColors.whiteText }} />
            </div>

            {showProfileDropdown && (
              <div
                className="absolute right-0 top-full mt-2 w-48 rounded-md shadow-lg py-1 z-50"
                style={{ backgroundColor: currentColors.pureWhite, color: currentColors.darkText }}
              >
                <a
                  href="#"
                  onClick={(e) => {
                    e.preventDefault();
                    setActiveRoute("/profile-details");
                    setShowProfileDropdown(false);
                  }}
                  className="block px-4 py-2 text-sm hover:bg-gray-100"
                  style={{ color: currentColors.darkText, backgroundColor: currentColors.pureWhite }}
                >
                  {appTranslations.en.profile.profileDetails}
                </a>
                <a
                  href="#"
                  onClick={(e) => {
                    e.preventDefault();
                    handleLogout();
                    setShowProfileDropdown(false);
                  }}
                  className="block px-4 py-2 text-sm text-red-600 hover:bg-gray-100"
                  style={{ color: currentColors.errorRed, backgroundColor: currentColors.pureWhite }}
                >
                  {appTranslations.en.profile.logOut}
                </a>
              </div>
            )}
          </div>
        </header>
      )}


      <div className="flex flex-1" style={{ paddingTop: isAuthenticated ? "64px" : "0px" }}> {/* Adjust padding based on authentication */}
        {isAuthenticated && ( // Only show sidebar if authenticated
          <aside
            className={`fixed top-16 left-0 h-[calc(100vh-64px)] overflow-y-auto shadow-lg transition-all duration-300 ease-in-out z-20 flex flex-col`}
            style={{
              backgroundColor: currentColors.headerSidebarBg,
              width: isSidebarExpanded ? "250px" : "77px",
            }}
          >
            <nav className="flex-grow">
              <ul className="space-y-2 py-4">
                {navItems // All nav items are now visible regardless of role
                  .map((item) => {
                    const hasAccess = item.access.includes(profileUser?.role);
                    return (
                      <li key={item.route}>
                        <a
                          href="#"
                          onClick={(e) => {
                            e.preventDefault();
                            if (hasAccess) {
                              setActiveRoute(item.route);
                              setEditingUserId(null); // Clear editing user on route change
                            } else {
                                setShowDialog(true);
                                setDialogTitle(appTranslations.en.users.accessDeniedTitle);
                                setDialogMessage(appTranslations.en.users.accessDeniedMessage);
                                setDialogType("alert");
                                setDialogCallback(() => () => setShowDialog(false));
                            }
                          }}
                          className={`flex items-center rounded-lg font-medium transition-colors duration-200
                            ${
                              isSidebarExpanded
                                ? "py-2 px-3"
                                : "py-2 px-2 justify-center"
                            }
                            ${activeRoute === item.route ? "mx-2" : ""}
                            ${!hasAccess ? "opacity-50 cursor-not-allowed" : "cursor-pointer"}
                          `}
                          style={{
                            backgroundColor:
                              activeRoute === item.route
                                ? currentColors.logoPrimaryBlue
                                : "transparent",
                            color: currentColors.whiteText,
                          }}
                        >
                          <item.icon size={20} style={{ color: currentColors.whiteText }} />
                          <span
                            className={`ml-3 overflow-hidden whitespace-nowrap ${
                              !isSidebarExpanded && "hidden"
                            }`}
                          >
                            {item.name}
                          </span>
                        </a>
                      </li>
                    );
                  })}
              </ul>
            </nav>
            <div
              className={`w-full ${
                isSidebarExpanded ? "px-3 pb-4" : "pb-4 flex justify-center"
              }`}
            >
              <label htmlFor="language-select" className="sr-only">
                Language Select
              </label>
              <select
                id="language-select"
                value={language}
                onChange={(e) => setLanguage(e.target.value)}
                className={`rounded-md bg-gray-700 text-white border border-gray-600 focus:outline-none cursor-pointer
                  ${
                    isSidebarExpanded
                      ? "w-full py-2 px-3 text-left"
                      : "w-16 py-2 text-center text-sm"
                  }
                `}
                style={{
                  backgroundColor: currentColors.headerSidebarBg,
                  color: currentColors.whiteText,
                  borderColor: currentColors.mediumGrayText,
                }}
              >
                <option value="en">{isSidebarExpanded ? "English" : "en"}</option>
                <option value="tr">{isSidebarExpanded ? "Türkçe" : "tr"}</option>
                <option value="ru">{isSidebarExpanded ? "Русский" : "ru"}</option>
                <option value="pl">{isSidebarExpanded ? "Polski" : "pl"}</option>
              </select>
            </div>
          </aside>
        )}
        <main
          className="flex-1 p-6 transition-all duration-300 ease-in-out overflow-x-hidden overflow-y-auto"
          style={{
            marginLeft: isAuthenticated ? (isSidebarExpanded ? "250px" : "77px") : "0px",
            paddingTop: isAuthenticated ? "24px" : "0px",
            backgroundColor: currentColors.lightGrayBg,
            color: currentColors.darkText,
          }}
        >
          {renderMainContent()}
        </main>
      </div>

      {isAuthenticated && ( // Only show footer if authenticated
        <footer
          className="w-full p-6 text-center text-sm leading-relaxed"
          style={{
            backgroundColor: currentColors.headerSidebarBg,
            color: currentColors.whiteText,
          }}
        >
          <p className="mb-2">
            &copy; {new Date().getFullYear()} EilSense.io.{" "}
            {appTranslations.en.footer.rights}
          </p>
          <p className="mb-2">{appTranslations.en.footer.address}</p>
          <p className="mb-2">
            {appTranslations.en.footer.email} info@eilsense.io |{" "}
            {appTranslations.en.footer.phone} +90 555 123 45 67
          </p>
          <p>
            <a href="/privacy-policy" className="underline hover:text-gray-300 mx-2">
              {appTranslations.en.footer.privacy}
            </a>{" "}
            |
            <a href="/terms-of-use" className="underline hover:text-gray-300 mx-2">
              {appTranslations.en.footer.terms}
            </a>
          </p>
        </footer>
      )}

      {showDialog && (
        <CustomDialog
          title={dialogTitle}
          message={dialogMessage}
          type={dialogType}
          onConfirm={dialogCallback}
          onCancel={() => setShowDialog(false)}
          onClose={() => setShowDialog(false)}
          currentColors={currentColors}
          storeNameForConfirmation={dialogType === "confirm" ? (dialogMessage.match(/'([^']+)'/)?.[1] || "") : ""}
        />
      )}
    </div>
  );
}

export default App;
